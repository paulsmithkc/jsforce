{"version":3,"sources":["../lib/promise.js","../lib/logger.js","../lib/browser/canvas.js","../lib/browser/jsonp.js","../lib/transport.js","../lib/oauth2.js","../lib/date.js","../lib/soql-builder.js","../lib/csv.js","../lib/record-stream.js","../lib/query.js","../lib/record.js","../lib/cache.js","../lib/quick-action.js","../lib/sobject.js","../lib/http-api.js","../lib/process.js","../lib/connection.js","../lib/soap.js","../lib/_required.js","../lib/require.js","../lib/core.js","../lib/api/analytics.js","../lib/api/apex.js","../lib/api/bulk.js","../lib/api/chatter.js","../lib/api/metadata.js","../lib/api/soap.js","../lib/api/streaming-extension.js","../lib/api/streaming.js","../lib/api/tooling.js","../lib/api/index.js","../lib/registry/registry.js","../lib/registry/file-registry.js","../lib/registry/index.js","../lib/jsforce.js"],"sourcesContent":["/*global process*/\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash/core');\r\n\r\n/**\r\n * @callback ResolvedCallback\r\n * @param {T} result - Resolved value\r\n * @returns {S}\r\n * @template T,S\r\n */\r\n\r\n/**\r\n * @callback RejectedCallback\r\n * @param {Error} reason - Rejected reason\r\n * @returns {S}\r\n * @template S\r\n */\r\n\r\n/**\r\n * @callback ResolveCallback\r\n * @param {T} result\r\n * @template T\r\n */\r\n\r\n/**\r\n * @callback RejectedCallback\r\n * @param {Error} reason - Rejected reason\r\n * @returns {S}\r\n * @template S\r\n */\r\n\r\n/**\r\n * @callback PromiseCallback\r\n * @param {ResolveCallback.<T>} resolve\r\n * @param {RejectCallback} reject\r\n * @template T\r\n */\r\n\r\n/**\r\n * Promise class with a little extension\r\n *\r\n * @class Promise\r\n * @constructor\r\n * @param {PromiseCallback.<T>}\r\n * @template T\r\n */\r\nvar Promise = require('promise/lib/es6-extensions');\r\n\r\n/**\r\n * The \"then\" method from the Promises/A+ specification\r\n *\r\n * @method Promise#then\r\n * @param {FulfilledCallback.<T, S1>} [onFulfilled]\r\n * @param {RejectedCallback.<S2>} [onRejected]\r\n * @returns {Promise.<S1|S2>}\r\n */\r\n\r\n/**\r\n * Call \"then\" using given node-style callback function.\r\n * This is basically same as \"nodeify\" except that it always return the original promise\r\n *\r\n * @method Promise#thenCall\r\n * @param {Callback.<T>} [callback] - Callback function\r\n * @returns {Promise}\r\n */\r\nPromise.prototype.thenCall = function(callback) {\r\n  if (_.isFunction(callback)) {\r\n    this.then(function(res) {\r\n      process.nextTick(function() {\r\n        callback(null, res);\r\n      });\r\n    }, function(err) {\r\n      process.nextTick(function() {\r\n        callback(err);\r\n      });\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * A sugar method, equivalent to promise.then(undefined, onRejected).\r\n *\r\n * @method Promise#catch\r\n * @param {RejectedCallback.<S>} onRejected\r\n * @returns {Promise.<S>}\r\n */\r\n\r\n/**\r\n * Synonym of Promise#catch\r\n *\r\n * @method Promise#fail\r\n * @param {RejectedCallback.<S>} onRejected\r\n * @returns {Promise.<S>}\r\n */\r\nPromise.prototype.fail = Promise.prototype['catch'];\r\n\r\n/**\r\n * Returns resolving promise with given reason\r\n *\r\n * @method Promise.resolve\r\n * @param {*} result - Resolved value\r\n * @returns {Promise}\r\n */\r\n\r\n/**\r\n * Returns rejecting promise with given reason\r\n *\r\n * @method Promise.reject\r\n * @param {Error} reason - Rejecting reason\r\n * @returns {Promise}\r\n */\r\n\r\n/**\r\n * Returns a promise that is fulfilled with an array containing the fulfillment value of each promise,\r\n * or is rejected with the same rejection reason as the first promise to be rejected.\r\n *\r\n * @method Promise.all\r\n * @param {Array.<Promise.<*>|*>} promises\r\n * @returns {Promise.<Array.<*>>}\r\n */\r\n\r\n/**\r\n * Returns a deferred object\r\n *\r\n * @method Promise.defer\r\n * @returns {Deferred}\r\n */\r\nPromise.defer = function() {\r\n  return new Deferred();\r\n};\r\n\r\n/**\r\n * Deferred object\r\n *\r\n * @protected\r\n * @constructor\r\n */\r\nvar Deferred = function() {\r\n  var self = this;\r\n  this.promise = new Promise(function(resolve, reject) {\r\n    self.resolve = resolve;\r\n    self.reject = reject;\r\n  });\r\n};\r\n\r\n/**\r\n * Resolve promise\r\n * @method Deferred#resolve\r\n * @param {*} result - Resolving result\r\n */\r\n\r\n/**\r\n * Reject promise\r\n * @method Deferred#reject\r\n * @param {Error} error - Rejecting reason\r\n */\r\n\r\n/**\r\n *\r\n */\r\nmodule.exports = Promise;\r\n","'use strict';\r\n\r\n/**\r\n * @protected\r\n * @class\r\n * @constructor\r\n * @param {String|Number} logLevel - Log level\r\n */\r\nvar Logger = module.exports = function(logLevel) {\r\n  if (typeof logLevel === 'string') {\r\n    logLevel = LogLevels[logLevel];\r\n  }\r\n  if (!logLevel) {\r\n    logLevel = LogLevels.INFO;\r\n  }\r\n  this._logLevel = logLevel;\r\n};\r\n\r\n/**\r\n * @memberof Logger\r\n */\r\nvar LogLevels = Logger.LogLevels = {\r\n  \"DEBUG\" : 1,\r\n  \"INFO\" : 2,\r\n  \"WARN\" : 3,\r\n  \"ERROR\" : 4,\r\n  \"FATAL\" : 5\r\n};\r\n\r\n/**\r\n * Output log\r\n *\r\n * @param {String} level - Logging target level\r\n * @param {String} message - Message to log\r\n */\r\nLogger.prototype.log = function(level, message) {\r\n  if (this._logLevel <= level) {\r\n    if (level < LogLevels.ERROR) {\r\n      console.log(message);\r\n    } else {\r\n      console.error(message);\r\n    }\r\n  }\r\n};\r\n\r\nfor (var level in LogLevels) {\r\n  Logger.prototype[level.toLowerCase()] = createLoggerFunction(LogLevels[level]);\r\n}\r\n\r\nfunction createLoggerFunction(level) {\r\n  return function(message) { this.log(level, message); };\r\n}\r\n","/*global Sfdc */\r\n'use strict';\r\n\r\nvar Duplex = require('readable-stream').Duplex,\r\n    _ = require('lodash/core');\r\n\r\nfunction parseHeaders(hs) {\r\n  var headers = {};\r\n  hs.split(/\\n/).forEach(function(line) {\r\n    var pair = line.split(/\\s*:\\s*/);\r\n    var name = pair[0].toLowerCase();\r\n    var value = pair[1];\r\n    headers[name] = value;\r\n  });\r\n  return headers;\r\n}\r\n\r\nmodule.exports = {\r\n\r\n  supported: typeof Sfdc === 'object' && typeof Sfdc.canvas !== 'undefined',\r\n\r\n  createRequest: function(signedRequest) {\r\n    return function(params, callback) {\r\n      var response;\r\n      var str = new Duplex();\r\n      str._read = function(size) {\r\n        if (response) {\r\n          str.push(response.body);\r\n        }\r\n      };\r\n      var bufs = [];\r\n      var sent = false;\r\n      str._write = function(chunk, encoding, callback) {\r\n        bufs.push(chunk.toString(encoding));\r\n        callback();\r\n      };\r\n      str.on('finish', function() {\r\n        if (!sent) {\r\n          send(bufs.join(''));\r\n          sent = true;\r\n        }\r\n      });\r\n      if (params.body || params.body === \"\" || !/^(put|post|patch)$/i.test(params.method)) {\r\n        send(params.body);\r\n        sent = true;\r\n      }\r\n\r\n      function send(body) {\r\n        var settings = {\r\n          client: signedRequest.client,\r\n          method: params.method,\r\n          data: body\r\n        };\r\n        if (params.headers) {\r\n          settings.headers = {};\r\n          for (var name in params.headers) {\r\n            if (name.toLowerCase() === 'content-type') {\r\n              settings.contentType = params.headers[name];\r\n            } else {\r\n              settings.headers[name] = params.headers[name];\r\n            }\r\n          }\r\n        }\r\n        settings.success = function(data) {\r\n          var headers = parseHeaders(data.responseHeaders);\r\n          var body = data.payload;\r\n          if (!_.isString(body)) {\r\n            body = JSON.stringify(body);\r\n          }\r\n          response = {\r\n            statusCode : data.status,\r\n            headers: headers,\r\n            body: body\r\n          };\r\n          if (callback) {\r\n            callback(null, response, response.body);\r\n          }\r\n          str.end();\r\n        };\r\n        settings.failure = function(err) {\r\n          if (callback) {\r\n            callback(err);\r\n          }\r\n        };\r\n        Sfdc.canvas.client.ajax(params.url, settings);\r\n      }\r\n      return str;\r\n    };\r\n  }\r\n};\r\n","/*global window, document */\r\n'use strict';\r\n\r\nvar _index = 0;\r\n\r\nmodule.exports = {\r\n\r\n  supported: typeof window !== 'undefined' && typeof document !== 'undefined',\r\n\r\n  createRequest: function(jsonpParam, timeout) {\r\n    jsonpParam = jsonpParam || 'callback';\r\n    timeout = timeout || 10000;\r\n\r\n    return function(params, callback) {\r\n      if (params.method.toUpperCase() !== 'GET') {\r\n        return callback(new Error('JSONP only supports GET request.'));\r\n      }\r\n      var cbFuncName = '_jsforce_jsonpCallback_' + (++_index);\r\n      var callbacks = window;\r\n      var url = params.url;\r\n      url += url.indexOf('?')>0 ? '&' : '?';\r\n      url += jsonpParam + '=' + cbFuncName;\r\n\r\n      var script = document.createElement('script');\r\n      script.type = 'text/javascript';\r\n      script.src = url;\r\n      document.documentElement.appendChild(script);\r\n\r\n      var pid = setTimeout(function() {\r\n        cleanup();\r\n        callback(new Error(\"JSONP call time out.\"));\r\n      }, timeout);\r\n\r\n      callbacks[cbFuncName] = function(res) {\r\n        cleanup();\r\n        callback(null, {\r\n          statusCode: 200,\r\n          headers: { \"content-type\": \"application/json\" },\r\n          body: JSON.stringify(res)\r\n        });\r\n      };\r\n\r\n      var cleanup = function() {\r\n        clearTimeout(pid);\r\n        document.documentElement.removeChild(script);\r\n        delete callbacks[cbFuncName];\r\n      };\r\n    };\r\n\r\n  }\r\n\r\n};","/*global process, Sfdc */\r\n\r\n'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    Promise = require('./promise');\r\n\r\n/* */\r\n\r\nvar request = require('request'),\r\n    canvas = require('./browser/canvas'),\r\n    jsonp = require('./browser/jsonp');\r\n\r\n// set options if defaults setting is available in request, which is not available in xhr module.\r\nif (request.defaults) {\r\n  var defaults = {\r\n    followAllRedirects: true\r\n  };\r\n  if (process.env.HTTP_PROXY) {\r\n    defaults.proxy = process.env.HTTP_PROXY;\r\n  }\r\n  if (parseInt(process.env.HTTP_TIMEOUT)) {\r\n    defaults.timeout = parseInt(process.env.HTTP_TIMEOUT);\r\n  }\r\n  request = request.defaults(defaults);\r\n}\r\n\r\nvar baseUrl;\r\nif (typeof window === 'undefined') {\r\n  baseUrl = process.env.LOCATION_BASE_URL || \"\";\r\n} else {\r\n  var apiHost = normalizeApiHost(window.location.host);\r\n  baseUrl = apiHost ? \"https://\" + apiHost : \"\";\r\n}\r\n\r\n/**\r\n * Add stream() method to promise (and following promise chain), to access original request stream.\r\n * @private\r\n */\r\nfunction streamify(promise, factory) {\r\n  var _then = promise.then;\r\n  promise.then = function() {\r\n    factory();\r\n    var newPromise = _then.apply(promise, arguments);\r\n    return streamify(newPromise, factory);\r\n  };\r\n  promise.stream = factory;\r\n  return promise;\r\n}\r\n\r\n/**\r\n * Normarize Salesforce API host name\r\n * @private\r\n */\r\nfunction normalizeApiHost(apiHost) {\r\n  var m = /(\\w+)\\.(visual\\.force|salesforce)\\.com$/.exec(apiHost);\r\n  if (m) {\r\n    apiHost = m[1] + \".salesforce.com\";\r\n  }\r\n  return apiHost;\r\n}\r\n\r\n/**\r\n * Class for HTTP request transport\r\n *\r\n * @class\r\n * @protected\r\n */\r\nvar Transport = module.exports = function() {};\r\n\r\n/**\r\n * Make HTTP request, returns promise instead of stream\r\n *\r\n * @param {Object} params - HTTP request\r\n * @param {Callback.<Object>} [callback] - Calback Function\r\n * @returns {Promise.<Object>}\r\n */\r\nTransport.prototype.httpRequest = function(params, callback) {\r\n  var deferred = Promise.defer();\r\n  var req;\r\n  var httpRequest = this._getHttpRequestModule();\r\n  var createRequest = function() {\r\n    if (!req) {\r\n      req = httpRequest(params, function(err, response) {\r\n        if (err) {\r\n          deferred.reject(err);\r\n        } else {\r\n          deferred.resolve(response);\r\n        }\r\n      });\r\n    }\r\n    return req;\r\n  };\r\n  return streamify(deferred.promise, createRequest).thenCall(callback);\r\n};\r\n\r\n/** @protected **/\r\nTransport.prototype._getHttpRequestModule = function() {\r\n  return request;\r\n};\r\n\r\n\r\n/**\r\n * Class for JSONP request transport\r\n * @class Transport~JsonpTransport\r\n * @protected\r\n * @extends Transport\r\n * @param {String} jsonpParam - Callback parameter name for JSONP invokation.\r\n */\r\nvar JsonpTransport = Transport.JsonpTransport = function(jsonpParam) {\r\n  this._jsonpParam = jsonpParam;\r\n};\r\n\r\ninherits(JsonpTransport, Transport);\r\n\r\n/** @protected **/\r\nJsonpTransport.prototype._getHttpRequestModule = function() {\r\n  return jsonp.createRequest(this._jsonpParam);\r\n};\r\n\r\nJsonpTransport.supported = jsonp.supported;\r\n\r\n\r\n/**\r\n * Class for Sfdc Canvas request transport\r\n * @class Transport~CanvasTransport\r\n * @protected\r\n * @extends Transport\r\n * @param {Object} signedRequest - Parsed signed request object\r\n */\r\nvar CanvasTransport = Transport.CanvasTransport = function(signedRequest) {\r\n  this._signedRequest = signedRequest;\r\n};\r\n\r\ninherits(CanvasTransport, Transport);\r\n\r\n/** @protected **/\r\nCanvasTransport.prototype._getHttpRequestModule = function() {\r\n  return canvas.createRequest(this._signedRequest);\r\n};\r\n\r\nCanvasTransport.supported = canvas.supported;\r\n\r\n\r\n/**\r\n * Class for HTTP request transport using AJAX proxy service\r\n *\r\n * @class Transport~ProxyTransport\r\n * @protected\r\n * @extends Transport\r\n * @param {String} proxyUrl - AJAX Proxy server URL\r\n */\r\nvar ProxyTransport = Transport.ProxyTransport = function(proxyUrl) {\r\n  this._proxyUrl = proxyUrl;\r\n};\r\n\r\ninherits(ProxyTransport, Transport);\r\n\r\n/**\r\n * Make HTTP request via AJAX proxy\r\n *\r\n * @method Transport~ProxyTransport#httpRequest\r\n * @param {Object} params - HTTP request\r\n * @param {Callback.<Object>} [callback] - Calback Function\r\n * @returns {Promise.<Object>}\r\n */\r\nProxyTransport.prototype.httpRequest = function(params, callback) {\r\n  var url = params.url;\r\n  if (url.indexOf(\"/\") === 0) {\r\n    url = baseUrl + url;\r\n  }\r\n  var proxyParams = {\r\n    method: params.method,\r\n    url: this._proxyUrl + '?' + Date.now() + \".\" + (\"\" + Math.random()).substring(2),\r\n    headers: {\r\n      'salesforceproxy-endpoint': url\r\n    }\r\n  };\r\n  if (params.body || params.body === \"\") {\r\n    proxyParams.body = params.body;\r\n  }\r\n  if (params.headers) {\r\n    for (var name in params.headers) {\r\n      proxyParams.headers[name] = params.headers[name];\r\n    }\r\n  }\r\n  return ProxyTransport.super_.prototype.httpRequest.call(this, proxyParams, callback);\r\n};\r\n\r\n\r\n/**\r\n * Class for HTTP request transport using a proxy server\r\n *\r\n * @class Transport~HttpProxyTransport\r\n * @protected\r\n * @extends Transport\r\n * @param {String} httpProxy - URL of the HTTP proxy server\r\n */\r\nvar HttpProxyTransport = Transport.HttpProxyTransport = function(httpProxy) {\r\n  this._httpProxy = httpProxy;\r\n};\r\n\r\ninherits(HttpProxyTransport, Transport);\r\n\r\n/**\r\n * Make HTTP request via proxy server\r\n *\r\n * @method Transport~HttpProxyTransport#httpRequest\r\n * @param {Object} params - HTTP request\r\n * @param {Callback.<Object>} [callback] - Callback Function\r\n * @returns {Promise.<Object>}\r\n */\r\nHttpProxyTransport.prototype.httpRequest = function(params, callback) {\r\n  var url = params.url;\r\n  if (url.indexOf(\"/\") === 0) {\r\n    url = baseUrl + url;\r\n  }\r\n  var proxyParams = {\r\n    method: params.method,\r\n    url: params.url,\r\n    proxy: this._httpProxy,\r\n    headers: {}\r\n  };\r\n  if (params.body || params.body === \"\") {\r\n    proxyParams.body = params.body;\r\n  }\r\n  if (params.headers) {\r\n    for (var name in params.headers) {\r\n      proxyParams.headers[name] = params.headers[name];\r\n    }\r\n  }\r\n  return HttpProxyTransport.super_.prototype.httpRequest.call(this, proxyParams, callback);\r\n};\r\n","/**\r\n * @file Manages Salesforce OAuth2 operations\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar querystring = require('querystring'),\r\n    _ = require('lodash/core'),\r\n    Transport = require('./transport');\r\n\r\nvar defaults = {\r\n  loginUrl : \"https://login.salesforce.com\"\r\n};\r\n\r\n/**\r\n * OAuth2 class\r\n *\r\n * @class\r\n * @constructor\r\n * @param {Object} options - OAuth2 config options\r\n * @param {String} [options.loginUrl] - Salesforce login server URL\r\n * @param {String} [options.authzServiceUrl] - OAuth2 authorization service URL. If not specified, it generates from default by adding to login server URL.\r\n * @param {String} [options.tokenServiceUrl] - OAuth2 token service URL. If not specified it generates from default by adding to login server URL.\r\n * @param {String} options.clientId - OAuth2 client ID.\r\n * @param {String} [options.clientSecret] - OAuth2 client secret (This is optional for public client).\r\n * @param {String} options.redirectUri - URI to be callbacked from Salesforce OAuth2 authorization service.\r\n */\r\nvar OAuth2 = module.exports = function(options) {\r\n  if (options.authzServiceUrl && options.tokenServiceUrl) {\r\n    this.loginUrl = options.authzServiceUrl.split('/').slice(0, 3).join('/');\r\n    this.authzServiceUrl = options.authzServiceUrl;\r\n    this.tokenServiceUrl = options.tokenServiceUrl;\r\n    this.revokeServiceUrl = options.revokeServiceUrl;\r\n  } else {\r\n    this.loginUrl = options.loginUrl || defaults.loginUrl;\r\n    this.authzServiceUrl = this.loginUrl + \"/services/oauth2/authorize\";\r\n    this.tokenServiceUrl = this.loginUrl + \"/services/oauth2/token\";\r\n    this.revokeServiceUrl = this.loginUrl + \"/services/oauth2/revoke\";\r\n  }\r\n  this.clientId = options.clientId;\r\n  this.clientSecret = options.clientSecret;\r\n  this.redirectUri = options.redirectUri;\r\n  if (options.proxyUrl) {\r\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\r\n  } else if (options.httpProxy) {\r\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\r\n  } else {\r\n    this._transport = new Transport();\r\n  }\r\n};\r\n\r\n\r\n\r\n/**\r\n *\r\n */\r\n_.extend(OAuth2.prototype, /** @lends OAuth2.prototype **/ {\r\n\r\n  /**\r\n   * Get Salesforce OAuth2 authorization page URL to redirect user agent.\r\n   *\r\n   * @param {Object} params - Parameters\r\n   * @param {String} [params.scope] - Scope values in space-separated string\r\n   * @param {String} [params.state] - State parameter\r\n   * @param {String} [params.code_challenge] - Code challenge value (RFC 7636 - Proof Key of Code Exchange)\r\n   * @returns {String} Authorization page URL\r\n   */\r\n  getAuthorizationUrl : function(params) {\r\n    params = _.extend({\r\n      response_type : \"code\",\r\n      client_id : this.clientId,\r\n      redirect_uri : this.redirectUri\r\n    }, params || {});\r\n    return this.authzServiceUrl +\r\n      (this.authzServiceUrl.indexOf('?') >= 0 ? \"&\" : \"?\") +\r\n      querystring.stringify(params);\r\n  },\r\n\r\n  /**\r\n   * @typedef TokenResponse\r\n   * @type {Object}\r\n   * @property {String} access_token\r\n   * @property {String} refresh_token\r\n   */\r\n\r\n  /**\r\n   * OAuth2 Refresh Token Flow\r\n   *\r\n   * @param {String} refreshToken - Refresh token\r\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\r\n   * @returns {Promise.<TokenResponse>}\r\n   */\r\n  refreshToken : function(refreshToken, callback) {\r\n    var params = {\r\n      grant_type : \"refresh_token\",\r\n      refresh_token : refreshToken,\r\n      client_id : this.clientId\r\n    };\r\n    if (this.clientSecret) {\r\n      params.client_secret = this.clientSecret;\r\n    }\r\n    return this._postParams(params, callback);\r\n  },\r\n\r\n  /**\r\n   * OAuth2 Web Server Authentication Flow (Authorization Code)\r\n   * Access Token Request\r\n   *\r\n   * @param {String} code - Authorization code\r\n   * @param {Object} [params] - Optional parameters to send in token retrieval\r\n   * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\r\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\r\n   * @returns {Promise.<TokenResponse>}\r\n   */\r\n  requestToken : function(code, params, callback) {\r\n    if (typeof params === 'function') {\r\n      callback = params;\r\n      params = {};\r\n    }\r\n    params = _.extend({\r\n      grant_type : \"authorization_code\",\r\n      code : code,\r\n      client_id : this.clientId,\r\n      redirect_uri : this.redirectUri\r\n    }, params || {});\r\n    if (this.clientSecret) {\r\n      params.client_secret = this.clientSecret;\r\n    }\r\n    return this._postParams(params, callback);\r\n  },\r\n\r\n  /**\r\n   * OAuth2 Username-Password Flow (Resource Owner Password Credentials)\r\n   *\r\n   * @param {String} username - Salesforce username\r\n   * @param {String} password - Salesforce password\r\n   * @param {Callback.<TokenResponse>} [callback] - Callback function\r\n   * @returns {Promise.<TokenResponse>}\r\n   */\r\n  authenticate : function(username, password, callback) {\r\n    return this._postParams({\r\n      grant_type : \"password\",\r\n      username : username,\r\n      password : password,\r\n      client_id : this.clientId,\r\n      client_secret : this.clientSecret,\r\n      redirect_uri : this.redirectUri\r\n    }, callback);\r\n  },\r\n\r\n  /**\r\n   * OAuth2 Revoke Session or API Token\r\n   *\r\n   * @param {String} token - Access or Refresh token to revoke. Passing in the Access token revokes the session. Passing in the Refresh token revokes API Access.\r\n   * @param {Callback.<undefined>} [callback] - Callback function\r\n   * @returns {Promise.<undefined>}\r\n   */\r\n  revokeToken : function(token, callback) {\r\n    return this._transport.httpRequest({\r\n      method : 'POST',\r\n      url : this.revokeServiceUrl,\r\n      body: querystring.stringify({ token: token }),\r\n      headers: {\r\n        \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n      }\r\n    }).then(function(response) {\r\n      if (response.statusCode >= 400) {\r\n        var res = querystring.parse(response.body);\r\n        if (!res || !res.error) {\r\n          res = { error: \"ERROR_HTTP_\"+response.statusCode, error_description: response.body };\r\n        }\r\n        var err = new Error(res.error_description);\r\n        err.name = res.error;\r\n        throw err;\r\n      }\r\n    }).thenCall(callback);\r\n  },\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  _postParams : function(params, callback) {\r\n    return this._transport.httpRequest({\r\n      method : 'POST',\r\n      url : this.tokenServiceUrl,\r\n      body : querystring.stringify(params),\r\n      headers : {\r\n        \"content-type\" : \"application/x-www-form-urlencoded\"\r\n      }\r\n    }).then(function(response) {\r\n      var res;\r\n      try {\r\n        res = JSON.parse(response.body);\r\n      } catch(e) {}\r\n      if (response.statusCode >= 400) {\r\n        res = res || { error: \"ERROR_HTTP_\"+response.statusCode, error_description: response.body };\r\n        var err = new Error(res.error_description);\r\n        err.name = res.error;\r\n        throw err;\r\n      }\r\n      return res;\r\n    }).thenCall(callback);\r\n  }\r\n\r\n});\r\n","'use strict';\r\n\r\nvar _ = require('lodash/core');\r\n\r\n/**\r\n * A date object to keep Salesforce date literal\r\n *\r\n * @class\r\n * @constructor\r\n * @see http://www.salesforce.com/us/developer/docs/soql_sosl/Content/sforce_api_calls_soql_select_dateformats.htm\r\n */\r\nvar SfDate = module.exports = function(literal) {\r\n  this._literal = literal;\r\n};\r\n\r\n/**\r\n * Returns literal when converted to string\r\n *\r\n * @override\r\n */\r\nSfDate.prototype.toString =\r\nSfDate.prototype.toJSON = function() { return this._literal; };\r\n\r\n\r\n/** @private **/\r\nfunction zeropad(n) { return (n<10 ? \"0\" : \"\") + n; }\r\n\r\n/**\r\n * Convert JavaScript date object to ISO8601 Date format (e.g. 2012-10-31)\r\n *\r\n * @param {String|Number|Date} date - Input date\r\n * @returns {SfDate} - Salesforce date literal with ISO8601 date format\r\n */\r\nSfDate.toDateLiteral = function(date) {\r\n  if (_.isNumber(date)) {\r\n    date = new Date(date);\r\n  } else if (_.isString(date)) {\r\n    date = SfDate.parseDate(date);\r\n  }\r\n  var yy = date.getFullYear();\r\n  var mm = date.getMonth()+1;\r\n  var dd = date.getDate();\r\n  var dstr = [ yy, zeropad(mm), zeropad(dd) ].join(\"-\");\r\n  return new SfDate(dstr);\r\n};\r\n\r\n/**\r\n * Convert JavaScript date object to ISO8601 DateTime format\r\n * (e.g. 2012-10-31T12:34:56Z)\r\n *\r\n * @param {String|Number|Date} date - Input date\r\n * @returns {SfDate} - Salesforce date literal with ISO8601 datetime format\r\n */\r\nSfDate.toDateTimeLiteral = function(date) {\r\n  if (_.isNumber(date)) {\r\n    date = new Date(date);\r\n  } else if (_.isString(date)) {\r\n    date = SfDate.parseDate(date);\r\n  }\r\n  var yy = date.getUTCFullYear();\r\n  var mm = date.getUTCMonth()+1;\r\n  var dd = date.getUTCDate();\r\n  var hh = date.getUTCHours();\r\n  var mi = date.getUTCMinutes();\r\n  var ss = date.getUTCSeconds();\r\n  var dtstr =\r\n    [ yy, zeropad(mm), zeropad(dd) ].join(\"-\") + \"T\" +\r\n    [ zeropad(hh), zeropad(mi), zeropad(ss) ].join(\":\") + \"Z\";\r\n  return new SfDate(dtstr);\r\n};\r\n\r\n/**\r\n * Parse IS08601 date(time) formatted string and return date instance\r\n *\r\n * @param {String} str\r\n * @returns {Date}\r\n */\r\nSfDate.parseDate = function(str) {\r\n  var d = new Date();\r\n  var regexp = /^([\\d]{4})-?([\\d]{2})-?([\\d]{2})(T([\\d]{2}):?([\\d]{2}):?([\\d]{2})(.([\\d]{3}))?(Z|([\\+\\-])([\\d]{2}):?([\\d]{2})))?$/;\r\n  var m = str.match(regexp);\r\n  if (m) {\r\n    d = new Date(0);\r\n    if (!m[4]) {\r\n      d.setFullYear(parseInt(m[1], 10));\r\n      d.setDate(parseInt(m[3], 10));\r\n      d.setMonth(parseInt(m[2], 10) - 1);\r\n      d.setHours(0);\r\n      d.setMinutes(0);\r\n      d.setSeconds(0);\r\n      d.setMilliseconds(0);\r\n    } else {\r\n      d.setUTCFullYear(parseInt(m[1], 10));\r\n      d.setUTCDate(parseInt(m[3], 10));\r\n      d.setUTCMonth(parseInt(m[2], 10) - 1);\r\n      d.setUTCHours(parseInt(m[5], 10));\r\n      d.setUTCMinutes(parseInt(m[6], 10));\r\n      d.setUTCSeconds(parseInt(m[7], 10));\r\n      d.setUTCMilliseconds(parseInt(m[9] || '0', 10));\r\n      if (m[10] && m[10] !== 'Z') {\r\n        var offset = parseInt(m[12],10) * 60 + parseInt(m[13], 10);\r\n        d.setTime((m[11] === '+' ? -1 : 1) * offset * 60 * 1000 +d.getTime());\r\n      }\r\n    }\r\n    return d;\r\n  } else {\r\n    throw new Error(\"Invalid date format is specified : \" + str);\r\n  }\r\n};\r\n\r\n/*\r\n * Pre-defined Salesforce Date Literals\r\n */\r\nvar SfDateLiterals = {\r\n  YESTERDAY: 1,\r\n  TODAY: 1,\r\n  TOMORROW: 1,\r\n  LAST_WEEK: 1,\r\n  THIS_WEEK: 1,\r\n  NEXT_WEEK: 1,\r\n  LAST_MONTH: 1,\r\n  THIS_MONTH: 1,\r\n  NEXT_MONTH: 1,\r\n  LAST_90_DAYS: 1,\r\n  NEXT_90_DAYS: 1,\r\n  LAST_N_DAYS: 2,\r\n  NEXT_N_DAYS: 2,\r\n  NEXT_N_WEEKS: 2,\r\n  LAST_N_WEEKS: 2,\r\n  NEXT_N_MONTHS: 2,\r\n  LAST_N_MONTHS: 2,\r\n  THIS_QUARTER: 1,\r\n  LAST_QUARTER: 1,\r\n  NEXT_QUARTER: 1,\r\n  NEXT_N_QUARTERS: 2,\r\n  LAST_N_QUARTERS: 2,\r\n  THIS_YEAR: 1,\r\n  LAST_YEAR: 1,\r\n  NEXT_YEAR: 1,\r\n  NEXT_N_YEARS: 2,\r\n  LAST_N_YEARS: 2,\r\n  THIS_FISCAL_QUARTER: 1,\r\n  LAST_FISCAL_QUARTER: 1,\r\n  NEXT_FISCAL_QUARTER: 1,\r\n  NEXT_N_FISCAL_QUARTERS:2,\r\n  LAST_N_FISCAL_QUARTERS:2,\r\n  THIS_FISCAL_YEAR:1,\r\n  LAST_FISCAL_YEAR:1,\r\n  NEXT_FISCAL_YEAR:1,\r\n  NEXT_N_FISCAL_YEARS: 2,\r\n  LAST_N_FISCAL_YEARS: 2\r\n};\r\n\r\nfor (var literal in SfDateLiterals) {\r\n  var type = SfDateLiterals[literal];\r\n  SfDate[literal] =\r\n   type === 1 ? new SfDate(literal) : createLiteralBuilder(literal);\r\n}\r\n\r\n/** @private **/\r\nfunction createLiteralBuilder(literal) {\r\n  return function(num) { return new SfDate(literal + \":\" + num); };\r\n}\r\n","/**\r\n * @file Create and build SOQL string from configuration\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _      = require('lodash/core'),\r\n    SfDate = require(\"./date\");\r\n\r\n\r\n/**\r\n * Create SOQL\r\n * @private\r\n */\r\nfunction createSOQL(query) {\r\n  var soql = [\r\n    \"SELECT \",\r\n    createFieldsClause(query.fields, query.includes),\r\n    \" FROM \",\r\n    query.table\r\n  ].join(\"\");\r\n  var cond = createConditionClause(query.conditions);\r\n  if (cond) {\r\n    soql += \" WHERE \" + cond;\r\n  }\r\n  var orderby = createOrderByClause(query.sort);\r\n  if (orderby) {\r\n    soql += \" ORDER BY \" + orderby;\r\n  }\r\n  if (query.limit) {\r\n    soql += \" LIMIT \" + query.limit;\r\n  }\r\n  if (query.offset) {\r\n    soql += \" OFFSET \" + query.offset;\r\n  }\r\n  return soql;\r\n}\r\n\r\n/** @private **/\r\nfunction createFieldsClause(fields, childQueries) {\r\n  childQueries = _.map(_.values(childQueries || {}), function(cquery) {\r\n    return '(' + createSOQL(cquery) + ')';\r\n  });\r\n  return (fields || [ \"Id\" ]).concat(childQueries).join(', ');\r\n}\r\n\r\n/** @private **/\r\nfunction createConditionClause(conditions, operator, depth) {\r\n  if (_.isString(conditions)) {\r\n    return conditions;\r\n  }\r\n  conditions = conditions || [];\r\n  operator = operator || \"AND\";\r\n  depth = depth || 0;\r\n  if (!isArray(conditions)) { // if passed in hash object\r\n    conditions = _.keys(conditions).map(function(key) {\r\n      return {\r\n        key: key,\r\n        value: conditions[key]\r\n      };\r\n    });\r\n  } else {\r\n    conditions = conditions.map(function(cond) {\r\n      var conds = [];\r\n      for (var key in cond) {\r\n        conds.push({\r\n          key: key,\r\n          value: cond[key]\r\n        });\r\n      }\r\n      return conds.length>1 ? conds : conds[0];\r\n    });\r\n  }\r\n  conditions = conditions.map(function(cond) {\r\n    var d = depth+1, op;\r\n    switch (cond.key) {\r\n      case \"$or\" :\r\n      case \"$and\" :\r\n      case \"$not\" :\r\n        if (operator !== \"NOT\" && conditions.length === 1) {\r\n          d = depth; // not change tree depth\r\n        }\r\n        op = cond.key === \"$or\" ? \"OR\" :\r\n             cond.key === \"$and\" ? \"AND\" :\r\n             \"NOT\";\r\n        return createConditionClause(cond.value, op, d);\r\n      default:\r\n        return createFieldExpression(cond.key, cond.value);\r\n    }\r\n  }).filter(function(expr) { return expr; });\r\n\r\n  var paren;\r\n  if (operator === 'NOT') {\r\n    paren = depth > 0;\r\n    return (paren ? \"(\" : \"\") + \"NOT \" + conditions[0] + (paren ? \")\" : \"\");\r\n  } else {\r\n    paren = depth > 0 && conditions.length > 1;\r\n    return (paren ? \"(\" : \"\") + conditions.join(\" \"+operator+\" \") + (paren ? \")\" : \"\");\r\n  }\r\n}\r\n\r\nvar opMap = {\r\n  \"=\"     : \"=\",\r\n  \"$eq\"   : \"=\",\r\n  \"!=\"    : \"!=\",\r\n  \"$ne\"   : \"!=\",\r\n  \">\"     : \">\",\r\n  \"$gt\"   : \">\",\r\n  \"<\"     : \"<\",\r\n  \"$lt\"   : \"<\",\r\n  \">=\"    : \">=\",\r\n  \"$gte\"  : \">=\",\r\n  \"<=\"    : \"<=\",\r\n  \"$lte\"  : \"<=\",\r\n  \"$like\" : \"LIKE\",\r\n  \"$nlike\" : \"NOT LIKE\",\r\n  \"$in\"   : \"IN\",\r\n  \"$nin\"  : \"NOT IN\",\r\n  \"$includes\" : \"INCLUDES\",\r\n  \"$excludes\" : \"EXCLUDES\",\r\n  \"$exists\" : \"EXISTS\"\r\n};\r\n\r\n/** @private **/\r\nfunction createFieldExpression(field, value) {\r\n  // Assume the `$in` operator if value is an array and none was supplied.\r\n  if (_.isArray(value)) {\r\n    return createOpExpression(field, \"$in\", value);\r\n  }\r\n  // Otherwise, if an object was passed then process the supplied ops.\r\n  else if (_.isObject(value)) {\r\n    var expressions = _.map(value, function (v, k) {\r\n      if (k[0] === \"$\") return createOpExpression(field, k, v);\r\n    });\r\n    return expressions.join(' AND ');\r\n  }\r\n  // If the value is a scalar, it's an equality condition.\r\n  else return createOpExpression(field, \"$eq\", value);\r\n}\r\n\r\n/** @private **/\r\nfunction createOpExpression(field, op, value) {\r\n  var sfop = opMap[op];\r\n  if (!sfop || _.isUndefined(value)) { return null; }\r\n  var valueExpr = createValueExpression(value);\r\n  if (_.isUndefined(valueExpr)) { return null; }\r\n  switch (sfop) {\r\n    case \"NOT LIKE\":\r\n      return \"(\" + [ \"NOT\", field, 'LIKE', valueExpr ].join(\" \") + \")\";\r\n    case \"EXISTS\":\r\n      return [ field, value ? \"!=\" : \"=\", \"null\" ].join(\" \");\r\n    default:\r\n      return [ field, sfop, valueExpr ].join(\" \");\r\n  }\r\n}\r\n\r\n/** @private **/\r\nfunction createValueExpression(value) {\r\n  if (isArray(value)) {\r\n    return value.length > 0 ?\r\n           \"(\" + value.map(createValueExpression).join(\", \") + \")\" :\r\n           undefined;\r\n  }\r\n  if (value instanceof SfDate) {\r\n    return value.toString();\r\n  }\r\n  if (_.isString(value)) {\r\n    return \"'\" + escapeSOQLString(value) + \"'\";\r\n  }\r\n  if (_.isNumber(value)) {\r\n    return (value).toString();\r\n  }\r\n  if (_.isNull(value)) {\r\n    return \"null\";\r\n  }\r\n  return value;\r\n}\r\n\r\n/** @private **/\r\nfunction escapeSOQLString(str) {\r\n  return String(str || '').replace(/'/g, \"\\\\'\");\r\n}\r\n\r\n/** @private **/\r\nfunction isArray(a) {\r\n  return _.isObject(a) && _.isFunction(a.pop);\r\n}\r\n\r\n\r\n/** @private **/\r\nfunction createOrderByClause(sort) {\r\n  sort = sort || [];\r\n  if (_.isString(sort)) {\r\n    if (/,|\\s+(asc|desc)\\s*$/.test(sort)) {\r\n      // must be specified in pure \"order by\" clause. Return raw config.\r\n      return sort;\r\n    }\r\n    // sort order in mongoose-style expression.\r\n    // e.g. \"FieldA -FieldB\" => \"ORDER BY FieldA ASC, FieldB DESC\"\r\n    sort = sort.split(/\\s+/).map(function(field) {\r\n      var dir = \"ASC\"; // ascending\r\n      var flag = field[0];\r\n      if (flag === '-') {\r\n        dir = \"DESC\";\r\n        field = field.substring(1);\r\n      } else if (flag === '+') {\r\n        field = field.substring(1);\r\n      }\r\n      return [ field, dir ];\r\n    });\r\n  } else if (!isArray(sort)) {\r\n    sort = _.keys(sort).map(function(field) {\r\n      var dir = sort[field];\r\n      return [ field, dir ];\r\n    });\r\n  }\r\n  return sort.map(function(s) {\r\n    var field = s[0], dir = s[1];\r\n    switch (String(dir)) {\r\n      case \"DESC\":\r\n      case \"desc\":\r\n      case \"descending\":\r\n      case \"-\":\r\n      case \"-1\":\r\n        dir = \"DESC\";\r\n        break;\r\n      default:\r\n        dir = \"ASC\";\r\n    }\r\n    return field + \" \" + dir;\r\n  }).join(\", \");\r\n}\r\n\r\n\r\nexports.createSOQL = createSOQL;\r\n","'use strict';\r\n\r\nvar _ = require('lodash/core'),\r\n    csvParse = require('csv-parse/lib/es5'),\r\n    csvParseSync = require('csv-parse/lib/es5/sync'),\r\n    csvStringify = require('csv-stringify'),\r\n    csvStringifySync = require('csv-stringify/lib/sync');\r\n\r\n/**\r\n * @private\r\n */\r\nfunction parseCSV(str, options) {\r\n  options = _.extend({}, options, { columns: true });\r\n  return csvParseSync(str, options);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction toCSV(records, options) {\r\n  options = _.extend({}, options, { header: true });\r\n  return csvStringifySync(records, options);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction parseCSVStream(options) {\r\n  options = _.extend({}, options, { columns: true });\r\n  return csvParse(options);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction serializeCSVStream(options) {\r\n  options = _.extend({}, options, { header: true });\r\n  return csvStringify(options);\r\n}\r\n\r\n\r\n/**\r\n * @protected\r\n */\r\nmodule.exports = {\r\n  parseCSV: parseCSV,\r\n  toCSV: toCSV,\r\n  parseCSVStream: parseCSVStream,\r\n  serializeCSVStream: serializeCSVStream\r\n};\r\n","/**\r\n * @file Represents stream that handles Salesforce record as stream data\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar events = require('events'),\r\n    stream = require('readable-stream'),\r\n    Duplex = stream.Duplex,\r\n    Transform = stream.Transform,\r\n    PassThrough = stream.PassThrough,\r\n    inherits = require('inherits'),\r\n    _      = require('lodash/core'),\r\n    CSV    = require('./csv');\r\n\r\n\r\n/**\r\n * Class for Record Stream\r\n *\r\n * @class\r\n * @constructor\r\n * @extends stream.Transform\r\n */\r\nvar RecordStream = module.exports = function() {\r\n  RecordStream.super_.call(this, { objectMode: true });\r\n};\r\n\r\ninherits(RecordStream, Transform);\r\n\r\n\r\n/*\r\n * @override\r\n */\r\nRecordStream.prototype._transform = function(record, enc, callback) {\r\n  this.emit('record', record);\r\n  this.push(record);\r\n  callback();\r\n};\r\n\r\n/**\r\n * Get record stream of queried records applying the given mapping function\r\n *\r\n * @param {RecordMapFunction} fn - Record mapping function\r\n * @returns {RecordStream}\r\n */\r\nRecordStream.prototype.map = function(fn) {\r\n  return this.pipe(RecordStream.map(fn));\r\n};\r\n\r\n/**\r\n * Get record stream of queried records, applying the given filter function\r\n *\r\n * @param {RecordFilterFunction} fn - Record filtering function\r\n * @returns {RecordStream}\r\n */\r\nRecordStream.prototype.filter = function(fn) {\r\n  return this.pipe(RecordStream.filter(fn));\r\n};\r\n\r\n\r\n/**\r\n * @class RecordStream.Serializable\r\n * @extends {RecordStream}\r\n */\r\nvar Serializable = RecordStream.Serializable = function() {\r\n  Serializable.super_.call(this);\r\n  this._dataStream = null;\r\n};\r\n\r\ninherits(Serializable, RecordStream);\r\n\r\n/**\r\n * Create readable data stream which emits serialized record data\r\n *\r\n * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.\r\n * @param {Object} [options] - Options passed to converter\r\n * @returns {stream.Readable}\r\n*/\r\nSerializable.prototype.stream = function(type, options) {\r\n  type = type || 'csv';\r\n  var converter = DataStreamConverters[type];\r\n  if (!converter) {\r\n    throw new Error('Converting [' + type + '] data stream is not supported.');\r\n  }\r\n  if (!this._dataStream) {\r\n    this._dataStream = new PassThrough();\r\n    this.pipe(converter.serialize(options))\r\n      .pipe(this._dataStream);\r\n  }\r\n  return this._dataStream;\r\n};\r\n\r\n\r\n/**\r\n * @class RecordStream.Parsable\r\n * @extends {RecordStream}\r\n */\r\nvar Parsable = RecordStream.Parsable = function() {\r\n  Parsable.super_.call(this);\r\n  this._dataStream = null;\r\n};\r\n\r\ninherits(Parsable, RecordStream);\r\n\r\n/**\r\n * Create writable data stream which accepts serialized record data\r\n *\r\n * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.\r\n * @param {Object} [options] - Options passed to converter\r\n * @returns {stream.Readable}\r\n*/\r\nParsable.prototype.stream = function(type, options) {\r\n  type = type || 'csv';\r\n  var converter = DataStreamConverters[type];\r\n  var self = this;\r\n  if (!converter) {\r\n    throw new Error('Converting [' + type + '] data stream is not supported.');\r\n  }\r\n  if (!this._dataStream) {\r\n    this._dataStream = new PassThrough();\r\n    this._parserStream = converter.parse(options).on('error', function(error) { self.emit('error', error); });\r\n    this._parserStream.pipe(this).pipe(new PassThrough({ objectMode: true, highWaterMark: ( 500 * 1000 ) }));\r\n  }\r\n  return this._dataStream;\r\n};\r\n\r\n\r\n/* @override */\r\nParsable.prototype.on = function(ev, fn) {\r\n  if (ev === 'readable' || ev === 'record') {\r\n    this._dataStream.pipe(this._parserStream);\r\n  }\r\n  return Parsable.super_.prototype.on.call(this, ev, fn);\r\n};\r\n\r\n/* @override */\r\nParsable.prototype.addListener = Parsable.prototype.on;\r\n\r\n/* --------------------------------------------------- */\r\n\r\n/**\r\n * @callback RecordMapFunction\r\n * @param {Record} record - Source record to map\r\n * @returns {Record}\r\n */\r\n\r\n/**\r\n * Create a record stream which maps records and pass them to downstream\r\n *\r\n * @param {RecordMapFunction} fn - Record mapping function\r\n * @returns {RecordStream.Serializable}\r\n */\r\nRecordStream.map = function(fn) {\r\n  var mapStream = new RecordStream.Serializable();\r\n  mapStream._transform = function(record, enc, callback) {\r\n    var rec = fn(record) || record; // if not returned record, use same record\r\n    this.push(rec);\r\n    callback();\r\n  };\r\n  return mapStream;\r\n};\r\n\r\n/**\r\n * Create mapping stream using given record template\r\n *\r\n * @param {Record} record - Mapping record object. In mapping field value, temlate notation can be used to refer field value in source record, if noeval param is not true.\r\n * @param {Boolean} [noeval] - Disable template evaluation in mapping record.\r\n * @returns {RecordStream.Serializable}\r\n */\r\nRecordStream.recordMapStream = function(record, noeval) {\r\n  return RecordStream.map(function(rec) {\r\n    var mapped = { Id: rec.Id };\r\n    for (var prop in record) {\r\n      mapped[prop] = noeval ? record[prop] : evalMapping(record[prop], rec);\r\n    }\r\n    return mapped;\r\n  });\r\n\r\n  function evalMapping(value, mapping) {\r\n    if (_.isString(value)) {\r\n      var m = /^\\$\\{(\\w+)\\}$/.exec(value);\r\n      if (m) { return mapping[m[1]]; }\r\n      return value.replace(/\\$\\{(\\w+)\\}/g, function($0, prop) {\r\n        var v = mapping[prop];\r\n        return _.isNull(v) || _.isUndefined(v) ? \"\" : String(v);\r\n      });\r\n    } else {\r\n      return value;\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * @callback RecordFilterFunction\r\n * @param {Record} record - Source record to filter\r\n * @returns {Boolean}\r\n */\r\n\r\n/**\r\n * Create a record stream which filters records and pass them to downstream\r\n *\r\n * @param {RecordFilterFunction} fn - Record filtering function\r\n * @returns {RecordStream.Serializable}\r\n */\r\nRecordStream.filter = function(fn) {\r\n  var filterStream = new RecordStream.Serializable();\r\n  filterStream._transform = function(record, enc, callback) {\r\n    if (fn(record)) { this.push(record); }\r\n    callback();\r\n  };\r\n  return filterStream;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertRecordForSerialization(record, options) {\r\n  return Object.keys(record).reduce(function(rec, key) {\r\n    var value = rec[key];\r\n    var t = typeof value;\r\n    var urec = {};\r\n    if (key === 'attributes') { // 'attributes' prop will be ignored\r\n      rec = _.extend({}, rec);\r\n      delete rec[key];\r\n    } else if (options.nullValue && value === null) {\r\n      urec[key] = options.nullValue;\r\n      rec = _.extend({}, rec, urec);\r\n    } else if (value !== null && typeof value === 'object') {\r\n      var precord = convertRecordForSerialization(value, options);\r\n      rec = Object.keys(precord).reduce(function(prec, pkey) {\r\n        prec[key + '.' + pkey] = precord[pkey];\r\n        return prec;\r\n      }, _.extend({}, rec));\r\n    }\r\n    return rec;\r\n  }, record);\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction createPipelineStream(s1, s2) {\r\n  var pipeline = new PassThrough();\r\n  pipeline.on('pipe', function(source) {\r\n    source.unpipe(pipeline);\r\n    source.pipe(s1).pipe(s2);\r\n  });\r\n  pipeline.pipe = function(dest, options) {\r\n    return s2.pipe(dest, options);\r\n  };\r\n  return pipeline;\r\n}\r\n\r\n/** ---------------------------------------------------------------------- **/\r\n\r\n/**\r\n * @private\r\n */\r\nvar CSVStreamConverter = {\r\n  serialize: function(options) {\r\n    options = options || {};\r\n    return createPipelineStream(\r\n      RecordStream.map(function(record) {\r\n        return convertRecordForSerialization(record, options);\r\n      }),\r\n      CSV.serializeCSVStream(options)\r\n    );\r\n  },\r\n  parse: function(options) {\r\n    return CSV.parseCSVStream(options);\r\n  }\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nvar DataStreamConverters = RecordStream.DataStreamConverters = {\r\n  csv: CSVStreamConverter\r\n};\r\n","/*global process*/\r\n/**\r\n * @file Manages query for records in Salesforce\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    events = require('events'),\r\n    stream = require('readable-stream'),\r\n    _      = require('lodash/core'),\r\n    Promise = require('./promise'),\r\n    SfDate = require(\"./date\"),\r\n    SOQLBuilder = require(\"./soql-builder\"),\r\n    RecordStream = require(\"./record-stream\");\r\n\r\n/**\r\n * Query\r\n *\r\n * @protected\r\n * @class\r\n * @extends {stream.Readable}\r\n * @implements Promise.<T>\r\n * @template T\r\n * @param {Connection} conn - Connection object\r\n * @param {Object|String} config - Query config object or SOQL string\r\n * @param {Object} [options] - Default query options\r\n * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not\r\n * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode\r\n * @param {Boolean} [options.scanAll] - Including deleted records for query target or not\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n */\r\nvar Query = module.exports = function(conn, config, options) {\r\n  Query.super_.call(this, { objectMode: true });\r\n\r\n  this._conn = conn;\r\n  if (_.isString(config)) { // if query config is string, it is given in SOQL.\r\n    this._soql = config;\r\n  } else if (config.locator && config.locator.indexOf(\"/\") >= 0) { // if locator given in url for next records\r\n    this._locator = config.locator.split(\"/\").pop();\r\n  } else {\r\n    this._config = config;\r\n    this.select(config.fields);\r\n    if (config.includes) {\r\n      this.include(config.includes);\r\n    }\r\n    if (config.sort) {\r\n      this.sort(config.sort);\r\n    }\r\n  }\r\n  this._options = _.defaults(options || {}, {\r\n    maxFetch: 10000,\r\n    autoFetch: false,\r\n    scanAll: false,\r\n    responseTarget: ResponseTargets.QueryResult\r\n  });\r\n  this._executed = false;\r\n  this._finished = false;\r\n  this._chaining = false;\r\n\r\n  this._deferred = Promise.defer();\r\n\r\n  var self = this;\r\n};\r\n\r\ninherits(Query, stream.Readable);\r\n\r\n/**\r\n * Select fields to include in the returning result\r\n *\r\n * @param {Object|Array.<String>|String} fields - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.select = function(fields) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot set select fields for the query which has already built SOQL.\");\r\n  }\r\n  fields = fields || '*';\r\n  if (_.isString(fields)) {\r\n    fields = fields.split(/\\s*,\\s*/);\r\n  } else if (_.isObject(fields) && !_.isArray(fields)) {\r\n    var _fields =  [];\r\n    for (var k in fields) {\r\n      if (fields[k]) { _fields.push(k); }\r\n    }\r\n    fields = _fields;\r\n  }\r\n  this._config.fields = fields;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set query conditions to filter the result records\r\n *\r\n * @param {Object|String} conditions - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.where = function(conditions) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot set where conditions for the query which has already built SOQL.\");\r\n  }\r\n  this._config.conditions = conditions;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Limit the returning result\r\n *\r\n * @param {Number} limit - Maximum number of records the query will return.\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.limit = function(limit) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot set limit for the query which has already built SOQL.\");\r\n  }\r\n  this._config.limit = limit;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Synonym of Query#offset()\r\n *\r\n * @method Query#skip\r\n * @param {Number} offset - Offset number where begins returning results.\r\n * @returns {Query.<T>}\r\n */\r\n/**\r\n * Skip records\r\n *\r\n * @method Query#offset\r\n * @param {Number} offset - Offset number where begins returning results.\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.skip =\r\nQuery.prototype.offset = function(offset) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot set skip/offset for the query which has already built SOQL.\");\r\n  }\r\n  this._config.offset = offset;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Synonym of Query#sort()\r\n *\r\n * @memthod Query#orderby\r\n * @param {String|Object} sort - Sorting field or hash object with field name and sord direction\r\n * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)\r\n * @returns {Query.<T>}\r\n */\r\n/**\r\n * Set query sort with direction\r\n *\r\n * @method Query#sort\r\n * @param {String|Object} sort - Sorting field or hash object with field name and sord direction\r\n * @param {String|Number} [dir] - Sorting direction (ASC|DESC|1|-1)\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.sort =\r\nQuery.prototype.orderby = function(sort, dir) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot set sort for the query which has already built SOQL.\");\r\n  }\r\n  if (_.isString(sort) && _.isString(dir)) {\r\n    sort = [ [ sort, dir ] ];\r\n  }\r\n  this._config.sort = sort;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Include child relationship query\r\n *\r\n * @param {String} childRelName - Child relationship name to include in query result\r\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\r\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\r\n * @param {Object} [options] - Optional query configulations.\r\n * @param {Number} [options.limit] - Maximum number of records the query will return.\r\n * @param {Number} [options.offset] - Offset number where begins returning results.\r\n * @param {Number} [options.skip] - Synonym of options.offset.\r\n * @returns {Query~SubQuery}\r\n */\r\nQuery.prototype.include = function(childRelName, conditions, fields, options) {\r\n  if (this._soql) {\r\n    throw Error(\"Cannot include child relationship into the query which has already built SOQL.\");\r\n  }\r\n  if (_.isObject(childRelName)) {\r\n    var includes = childRelName;\r\n    for (var crname in includes) {\r\n      var config = includes[crname];\r\n      this.include(crname, config.conditions, config.fields, config);\r\n    }\r\n    return;\r\n  }\r\n  var childConfig = {\r\n    table: childRelName,\r\n    conditions: conditions,\r\n    fields: fields,\r\n    limit: options && options.limit,\r\n    offset: options && (options.offset || options.skip),\r\n    sort: options && options.sort\r\n  };\r\n  if (!_.isArray(this._config.includes)) this._config.includes = [];\r\n  this._config.includes.push(childConfig);\r\n  var childQuery = new SubQuery(this._conn, this, childConfig);\r\n  this._children = this._children || [];\r\n  this._children.push(childQuery);\r\n  return childQuery;\r\n};\r\n\r\n\r\n/**\r\n * Setting maxFetch query option\r\n *\r\n * @param {Number} maxFetch - Max fetching records in auto fetch mode\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.maxFetch = function(maxFetch) {\r\n  this._options.maxFetch = maxFetch;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Switching auto fetch mode\r\n *\r\n * @param {Boolean} autoFetch - Using auto fetch mode or not\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.autoFetch = function(autoFetch) {\r\n  this._options.autoFetch = autoFetch;\r\n  return this;\r\n};\r\n\r\n/**\r\n * Set flag to scan all records including deleted and archived.\r\n *\r\n * @param {Boolean} scanAll - Flag whether include deleted/archived record or not. Default is false.\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.scanAll = function(scanAll) {\r\n  this._options.scanAll = scanAll;\r\n  return this;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nvar ResponseTargets = Query.ResponseTargets = {};\r\n[ \"QueryResult\", \"Records\", \"SingleRecord\", \"Count\" ].forEach(function(f) {\r\n  ResponseTargets[f] = f;\r\n});\r\n\r\n/**\r\n * @protected\r\n * @param {String} responseTarget - Query response target\r\n * @returns {Query.<S>}\r\n */\r\nQuery.prototype.setResponseTarget = function(responseTarget) {\r\n  if (responseTarget in ResponseTargets) {\r\n    this._options.responseTarget = responseTarget;\r\n  }\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Synonym of Query#execute()\r\n *\r\n * @method Query#run\r\n * @param {Object} [options] - Query options\r\n * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not\r\n * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode\r\n * @param {Boolean} [options.scanAll] - Including deleted records for query target or not\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<T>} [callback] - Callback function\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.run =\r\n/**\r\n * Synonym of Query#execute()\r\n *\r\n * @method Query#exec\r\n * @param {Object} [options] - Query options\r\n * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not\r\n * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode\r\n * @param {Boolean} [options.scanAll] - Including deleted records for query target or not\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<T>} [callback] - Callback function\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.exec =\r\n/**\r\n * Execute query and fetch records from server.\r\n *\r\n * @method Query#execute\r\n * @param {Object} [options] - Query options\r\n * @param {Boolean} [options.autoFetch] - Using auto fetch mode or not\r\n * @param {Number} [options.maxFetch] - Max fetching records in auto fetch mode\r\n * @param {Boolean} [options.scanAll] - Including deleted records for query target or not\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<T>} [callback] - Callback function\r\n * @returns {Query.<T>}\r\n */\r\nQuery.prototype.execute = function(options, callback) {\r\n  var self = this;\r\n  var logger = this._conn._logger;\r\n  var deferred = this._deferred;\r\n\r\n  if (this._executed) {\r\n    deferred.reject(new Error(\"re-executing already executed query\"));\r\n    return this;\r\n  }\r\n\r\n  if (this._finished) {\r\n    deferred.reject(new Error(\"executing already closed query\"));\r\n    return this;\r\n  }\r\n\r\n  if (typeof options === \"function\") {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  options = {\r\n    headers: options.headers || self._options.headers,\r\n    responseTarget: options.responseTarget || self._options.responseTarget,\r\n    autoFetch: options.autoFetch || self._options.autoFetch,\r\n    maxFetch: options.maxFetch || self._options.maxFetch,\r\n    scanAll: options.scanAll || self._options.scanAll\r\n  };\r\n\r\n  // callback and promise resolution;\r\n  var promiseCallback = function(err, res) {\r\n    if (_.isFunction(callback)) {\r\n      try {\r\n        res = callback(err, res);\r\n        err = null;\r\n      } catch(e) {\r\n        err = e;\r\n      }\r\n    }\r\n    if (err) {\r\n      deferred.reject(err);\r\n    } else {\r\n      deferred.resolve(res);\r\n    }\r\n  };\r\n  this.once('response', function(res) {\r\n    promiseCallback(null, res);\r\n  });\r\n  this.once('error', function(err) {\r\n    promiseCallback(err);\r\n  });\r\n\r\n  // collect fetched records in array\r\n  // only when response target is Records and\r\n  // either callback or chaining promises are available to this query.\r\n  this.once('fetch', function() {\r\n    if (options.responseTarget === ResponseTargets.Records && (self._chaining || callback)) {\r\n      logger.debug('--- collecting all fetched records ---');\r\n      var records = [];\r\n      var onRecord = function(record) {\r\n        records.push(record);\r\n      };\r\n      self.on('record', onRecord);\r\n      self.once('end', function() {\r\n        self.removeListener('record', onRecord);\r\n        self.emit('response', records, self);\r\n      });\r\n    }\r\n  });\r\n\r\n  // flag to prevent re-execution\r\n  this._executed = true;\r\n\r\n  // start actual query\r\n  logger.debug('>>> Query start >>>');\r\n  this._execute(options).then(function() {\r\n    logger.debug('*** Query finished ***');\r\n  }).fail(function(err) {\r\n    logger.debug('--- Query error ---');\r\n    self.emit('error', err);\r\n  });\r\n\r\n  // return Query instance for chaining\r\n  return this;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nQuery.prototype._execute = function(options) {\r\n  var self = this;\r\n  var logger = this._conn._logger;\r\n  var responseTarget = options.responseTarget;\r\n  var autoFetch = options.autoFetch;\r\n  var maxFetch = options.maxFetch;\r\n  var scanAll = options.scanAll;\r\n\r\n  return Promise.resolve(\r\n    self._locator ?\r\n    self._conn._baseUrl() + \"/query/\" + self._locator :\r\n    self.toSOQL().then(function(soql) {\r\n      self.totalFetched = 0;\r\n      logger.debug(\"SOQL = \" + soql);\r\n      return self._conn._baseUrl() + \"/\" + (scanAll ? \"queryAll\" : \"query\") + \"?q=\" + encodeURIComponent(soql);\r\n    })\r\n  ).then(function(url) {\r\n    return self._conn.request({\r\n      method: 'GET',\r\n      url: url,\r\n      headers: options.headers\r\n    });\r\n  }).then(function(data) {\r\n    self.emit(\"fetch\");\r\n    self.totalSize = data.totalSize;\r\n    var res;\r\n    switch(responseTarget) {\r\n      case ResponseTargets.SingleRecord:\r\n        res = data.records && data.records.length > 0 ? data.records[0] : null;\r\n        break;\r\n      case ResponseTargets.Records:\r\n        res = data.records;\r\n        break;\r\n      case ResponseTargets.Count:\r\n        res = data.totalSize;\r\n        break;\r\n      default:\r\n        res = data;\r\n    }\r\n    // only fire response event when it should be notified per fetch\r\n    if (responseTarget !== ResponseTargets.Records) {\r\n      self.emit(\"response\", res, self);\r\n    }\r\n\r\n    // streaming record instances\r\n    var numRecords = (data.records && data.records.length) || 0;\r\n    for (var i=0; i<numRecords; i++) {\r\n      if (self.totalFetched >= maxFetch) {\r\n        self._finished = true;\r\n        break;\r\n      }\r\n      var record = data.records[i];\r\n      self.push(record);\r\n      self.emit('record', record, self.totalFetched++, self);\r\n    }\r\n    if (data.nextRecordsUrl) {\r\n      self._locator = data.nextRecordsUrl.split('/').pop();\r\n    }\r\n    self._finished = self._finished || data.done || !autoFetch;\r\n    if (self._finished) {\r\n      self.push(null);\r\n    } else {\r\n      self._execute(options);\r\n    }\r\n    return res;\r\n  });\r\n};\r\n\r\n/**\r\n * Readable stream implementation\r\n *\r\n * @override\r\n * @private\r\n */\r\nQuery.prototype._read = function(size) {\r\n  if (!this._finished && !this._executed) {\r\n    this.execute({ autoFetch: true });\r\n  }\r\n};\r\n\r\n/** @override **/\r\nQuery.prototype.on = function(e, fn) {\r\n  if (e === 'record') {\r\n    var self = this;\r\n    this.on('readable', function() {\r\n      while(self.read() !== null) {} // discard buffered records\r\n    });\r\n  }\r\n  return Query.super_.prototype.on.call(this, e, fn);\r\n};\r\n\r\n/** @override **/\r\nQuery.prototype.addListener = Query.prototype.on;\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nQuery.prototype._expandFields = function() {\r\n  if (this._soql) {\r\n    return Promise.reject(new Error(\"Cannot expand fields for the query which has already built SOQL.\"));\r\n  }\r\n  var self = this;\r\n  var logger = self._conn._logger;\r\n  var conn = this._conn;\r\n  var table = this._config.table;\r\n  var fields = this._config.fields || [];\r\n\r\n  logger.debug('_expandFields: table = ' + table + ', fields = ' + fields.join(', '));\r\n\r\n  return Promise.all([\r\n    Promise.resolve(self._parent ? findRelationTable(table) : table)\r\n      .then(function(table) {\r\n        return Promise.all(\r\n          _.map(fields, function(field) { return expandAsteriskField(table, field); })\r\n        ).then(function(expandedFields) {\r\n          self._config.fields = _.flatten(expandedFields);\r\n        });\r\n      }),\r\n    Promise.all(\r\n      _.map(self._children || [], function(childQuery) {\r\n        return childQuery._expandFields();\r\n      })\r\n    )\r\n  ]);\r\n\r\n  function findRelationTable(rname) {\r\n    var ptable = self._parent._config.table;\r\n    logger.debug('finding table for relation \"' + rname + '\" in \"' + ptable + '\"...');\r\n    return describeCache(ptable).then(function(sobject) {\r\n      var upperRname = rname.toUpperCase();\r\n      var childRelation = _.find(sobject.childRelationships, function(cr) {\r\n        return (cr.relationshipName || '').toUpperCase() === upperRname;\r\n      });\r\n      return childRelation ? childRelation.childSObject :\r\n        Promise.reject(new Error(\"No child relationship found: \" + rname ));\r\n    });\r\n  }\r\n\r\n  function describeCache(table) {\r\n    logger.debug('describe cache: '+table);\r\n    var deferred = Promise.defer();\r\n    conn.describe$(table, function(err, sobject) {\r\n      logger.debug('... done.');\r\n      if (err) { deferred.reject(err); }\r\n      else { deferred.resolve(sobject); }\r\n    });\r\n    return deferred.promise;\r\n  }\r\n\r\n  function expandAsteriskField(table, field) {\r\n    logger.debug('expanding field \"'+ field + '\" in \"' + table + '\"...');\r\n    var fpath = field.split('.');\r\n    return fpath[fpath.length - 1] === '*' ?\r\n      describeCache(table).then(function(sobject) {\r\n        logger.debug('table '+table+'has been described');\r\n        if (fpath.length > 1) {\r\n          var rname = fpath.shift();\r\n          var rfield = _.find(sobject.fields, function(f) {\r\n            return f.relationshipName &&\r\n                   f.relationshipName.toUpperCase() === rname.toUpperCase();\r\n          });\r\n          if (rfield) {\r\n            var rtable = rfield.referenceTo.length === 1 ? rfield.referenceTo[0] : 'Name';\r\n            return expandAsteriskField(rtable, fpath.join('.')).then(function(fpaths) {\r\n              return _.map(fpaths, function(fpath) { return rname + '.' + fpath; });\r\n            });\r\n          } else {\r\n            return [];\r\n          }\r\n        } else {\r\n          return _.map(sobject.fields, function(f) { return f.name; });\r\n        }\r\n      }) :\r\n      Promise.resolve([ field ]);\r\n  }\r\n};\r\n\r\n/**\r\n * Explain plan for executing query\r\n *\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nQuery.prototype.explain = function(callback) {\r\n  var self = this;\r\n  var logger = this._conn._logger;\r\n  return self.toSOQL().then(function(soql) {\r\n    logger.debug(\"SOQL = \" + soql);\r\n    var url = \"/query/?explain=\" + encodeURIComponent(soql);\r\n    return self._conn.request(url);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Return SOQL expression for the query\r\n *\r\n * @param {Callback.<String>} [callback] - Callback function\r\n * @returns {Promise.<String>}\r\n */\r\nQuery.prototype.toSOQL = function(callback) {\r\n  var self = this;\r\n  return Promise.resolve(self._soql ||\r\n    self._expandFields().then(function() { return SOQLBuilder.createSOQL(self._config); })\r\n  ).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create data stream of queried records.\r\n * Automatically resume query if paused.\r\n *\r\n * @param {String} [type] - Type of outgoing data format. Currently 'csv' is default value and the only supported.\r\n * @param {Object} [options] - Options passed to converter\r\n * @returns {stream.Readable}\r\n */\r\nQuery.prototype.stream = RecordStream.Serializable.prototype.stream;\r\n\r\n/**\r\n * Get record stream of queried records applying the given mapping function\r\n *\r\n * @param {RecordMapFunction} fn - Record mapping function\r\n * @returns {RecordStream.Serializable}\r\n */\r\nQuery.prototype.map = RecordStream.prototype.map;\r\n\r\n/**\r\n * Get record stream of queried records, applying the given filter function\r\n *\r\n * @param {RecordFilterFunction} fn - Record filtering function\r\n * @returns {RecordStream.Serializable}\r\n */\r\nQuery.prototype.filter = RecordStream.prototype.map;\r\n\r\n/*\r\n * Default threshold num of bulk API switching\r\n */\r\nvar DEFAULT_BULK_THRESHOLD = 200;\r\n\r\n/**\r\n * Synonym of Query#destroy()\r\n *\r\n * @method Query#delete\r\n * @param {String} [type] - SObject type. Required for SOQL based query object.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Query#destroy()\r\n *\r\n * @method Query#del\r\n * @param {String} [type] - SObject type. Required for SOQL based query object.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete queried records\r\n *\r\n * @method Query#destroy\r\n * @param {String} [type] - SObject type. Required for SOQL based query object.\r\n * @param {Object} [options] - Mass delete operation options\r\n * @param {Boolean} [options.allowBulk] - Allow switching to Bulk API when the num of queried records reached to certain threshold. Default is true.\r\n * @param {Number} [options.bulkThreshold] - Threshold num to switch to use Bulk API instead of usual `SObject#delete()` call. Default value is 200 after API ver 42.0, and 0.5 * `maxRequest` before API ver 42.0.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\nQuery.prototype[\"delete\"] =\r\nQuery.prototype.del =\r\nQuery.prototype.destroy = function(type, options, callback) {\r\n  if (typeof type === 'function') {\r\n    callback = type;\r\n    options = {};\r\n    type = null;\r\n  } else if (typeof type === 'object' && type !== null) {\r\n    callback = options;\r\n    options = type;\r\n    type = null;\r\n  }\r\n  options = options || {};\r\n  type = type || (this._config && this._config.table);\r\n  if (!type) {\r\n    throw new Error(\"SOQL based query needs SObject type information to bulk delete.\");\r\n  }\r\n  // Set the threshold number to pass to bulk API\r\n  var thresholdNum =\r\n    options.allowBulk === false ?\r\n      -1 :\r\n    typeof options.bulkThreshold === 'number' ?\r\n      options.bulkThreshold :\r\n      // determine threshold if the connection version supports SObject collection API or not\r\n      (this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn.maxRequest / 2);\r\n  var self = this;\r\n  return new Promise(function(resolve, reject) {\r\n    var records = [];\r\n    var batch = null;\r\n    var handleRecord = function(rec) {\r\n      if (!rec.Id) {\r\n        self.emit('error', new Error('Queried record does not include Salesforce record ID.'))\r\n        return;\r\n      }\r\n      var record = { Id: rec.Id };\r\n      if (batch) {\r\n        batch.write(record);\r\n      } else {\r\n        records.push(record);\r\n        if (thresholdNum < 0 || records.length > thresholdNum) {\r\n          // Use bulk delete instead of SObject REST API\r\n          batch =\r\n            self._conn.sobject(type).deleteBulk()\r\n              .on('response', resolve)\r\n              .on('error', reject);\r\n          records.forEach(function(record) {\r\n            batch.write(record);\r\n          });\r\n          records = [];\r\n        }\r\n      }\r\n    };\r\n    var handleEnd = function() {\r\n      if (batch) {\r\n        batch.end();\r\n      } else {\r\n        var ids = records.map(function (record) { return record.Id; });\r\n        self._conn.sobject(type).destroy(ids, { allowRecursive: true }).then(resolve, reject);\r\n      }\r\n    };\r\n    self.on('data', handleRecord)\r\n      .on('end', handleEnd)\r\n      .on('error', reject);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Update queried records, using given mapping function/object\r\n *\r\n * @param {Record|RecordMapFunction} mapping - Mapping record or record mapping function\r\n * @param {String} [type] - SObject type. Required for SOQL based query object.\r\n * @param {Object} [options] - Mass update operation options\r\n * @param {Boolean} [options.allowBulk] - Allow switching to Bulk API when the num of queried records reached to certain threshold. Default is true.\r\n * @param {Number} [options.bulkThreshold] - Threshold num to switch to use Bulk API instead of usual `SObject#delete()` call. Default value is 200 after API ver 42.0, and 0.5 * `maxRequest` before API ver 42.0.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\nQuery.prototype.update = function(mapping, type, options, callback) {\r\n  if (typeof type === 'function') {\r\n    callback = type;\r\n    options = {};\r\n    type = null;\r\n  } else if (typeof type === 'object' && type !== null) {\r\n    callback = options;\r\n    options = type;\r\n    type = null;\r\n  }\r\n  options = options || {};\r\n  type = type || (this._config && this._config.table);\r\n  if (!type) {\r\n    throw new Error(\"SOQL based query needs SObject type information to bulk update.\");\r\n  }\r\n  var updateStream = _.isFunction(mapping) ? RecordStream.map(mapping) : RecordStream.recordMapStream(mapping);\r\n  // Set the threshold number to pass to bulk API\r\n  var thresholdNum =\r\n    options.allowBulk === false ?\r\n      -1 :\r\n    typeof options.bulkThreshold === 'number' ?\r\n      options.bulkThreshold :\r\n      // determine threshold if the connection version supports SObject collection API or not\r\n      (this._conn._ensureVersion(42) ? DEFAULT_BULK_THRESHOLD : this._conn.maxRequest / 2);\r\n  var self = this;\r\n  return new Promise(function(resolve, reject) {\r\n    var records = [];\r\n    var batch = null;\r\n    var handleRecord = function(record) {\r\n      if (batch) {\r\n        batch.write(record);\r\n      } else {\r\n        records.push(record);\r\n        if (thresholdNum < 0 || records.length > thresholdNum) {\r\n          // Use bulk update instead of SObject REST API\r\n          batch =\r\n            self._conn.sobject(type).updateBulk()\r\n              .on('response', resolve)\r\n              .on('error', reject);\r\n          records.forEach(function(record) {\r\n            batch.write(record);\r\n          });\r\n          records = [];\r\n        }\r\n      }\r\n    };\r\n    var handleEnd = function() {\r\n      if (batch) {\r\n        batch.end();\r\n      } else {\r\n        self._conn.sobject(type).update(records, { allowRecursive: true }).then(resolve, reject);\r\n      }\r\n    };\r\n    self.on('error', reject)\r\n      .pipe(updateStream)\r\n      .on('data', handleRecord)\r\n      .on('end', handleEnd)\r\n      .on('error', reject);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for query result\r\n *\r\n * @param {FulfilledCallback.<T, S1>} [onFulfilled]\r\n * @param {RejectedCallback.<S2>} [onRejected]\r\n * @returns {Promise.<S1|S2>}\r\n */\r\nQuery.prototype.then = function(onResolved, onReject) {\r\n  this._chaining = true;\r\n  if (!this._finished && !this._executed) { this.execute(); }\r\n  return this._deferred.promise.then.apply(this._deferred.promise, arguments);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @param {Callback.<T>} [callback] - Callback function\r\n * @returns {Query}\r\n */\r\nQuery.prototype.thenCall = function(callback) {\r\n  if (_.isFunction(callback)) {\r\n    this.then(function(res) {\r\n      process.nextTick(function() {\r\n        callback(null, res);\r\n      });\r\n    }, function(err) {\r\n      process.nextTick(function() {\r\n        callback(err);\r\n      });\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * SubQuery object for representing child relationship query\r\n *\r\n * @protected\r\n * @class Query~SubQuery\r\n * @extends Query\r\n * @param {Connection} conn - Connection object\r\n * @param {Query} parent - Parent query object\r\n * @param {Object} config - Sub query configuration\r\n */\r\nvar SubQuery = function(conn, parent, config) {\r\n  SubQuery.super_.call(this, conn, config);\r\n  this._parent = parent;\r\n};\r\n\r\ninherits(SubQuery, Query);\r\n\r\n/**\r\n * @method Query~SubQuery#include\r\n * @override\r\n */\r\nSubQuery.prototype.include = function() {\r\n  throw new Error(\"Not allowed to include another subquery in subquery.\");\r\n};\r\n\r\n/**\r\n * Back the context to parent query object\r\n *\r\n * @method Query~SubQuery#end\r\n * @returns {Query}\r\n */\r\nSubQuery.prototype.end = function() {\r\n  return this._parent;\r\n};\r\n\r\n/**\r\n * If execute is called in subquery context, delegate it to parent query object\r\n *\r\n * @method Query~SubQuery#execute\r\n * @override\r\n */\r\nSubQuery.prototype.run =\r\nSubQuery.prototype.exec =\r\nSubQuery.prototype.execute = function() {\r\n  return this._parent.execute.apply(this._parent, arguments);\r\n};\r\n","/**\r\n * @file Represents Salesforce record information\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash/core');\r\n\r\n/**\r\n * A simple hash object including record field information\r\n *\r\n * @typedef {Object} Record\r\n */\r\n\r\n/**\r\n * Remote reference to record information\r\n *\r\n * @protected\r\n * @class\r\n * @constructor\r\n * @param {Connection} conn - Connection object\r\n * @param {String} type - SObject type\r\n * @param {String} id - Record ID\r\n */\r\nvar RecordReference = module.exports = function(conn, type, id) {\r\n  this._conn = conn;\r\n  this.type = type;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Retrieve record field information\r\n *\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<Record>} [callback] - Callback function\r\n * @returns {Promise.<Record>}\r\n */\r\nRecordReference.prototype.retrieve = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.retrieve(this.type, this.id, options, callback);\r\n};\r\n\r\n/**\r\n * Update record field information\r\n *\r\n * @param {Record} record - A Record which includes fields to update\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult>}\r\n */\r\nRecordReference.prototype.update = function(record, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  record = _.clone(record);\r\n  record.Id = this.id;\r\n  return this._conn.update(this.type, record, options, callback);\r\n};\r\n\r\n/**\r\n * Synonym of Record#destroy()\r\n *\r\n * @method RecordReference#delete\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult>}\r\n */\r\nRecordReference.prototype[\"delete\"] =\r\n/**\r\n * Synonym of Record#destroy()\r\n *\r\n * @method RecordReference#del\r\n * @param {Callback.<RecordResult>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult>}\r\n */\r\nRecordReference.prototype.del =\r\n/**\r\n * Delete record field\r\n *\r\n * @method RecordReference#destroy\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult>}\r\n */\r\nRecordReference.prototype.destroy = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.destroy(this.type, this.id, options, callback);\r\n};\r\n\r\n/**\r\n * Get blob field as stream\r\n *\r\n * @param {String} fieldName - Blob field name\r\n * @returns {stream.Stream}\r\n */\r\nRecordReference.prototype.blob = function(fieldName) {\r\n  var url = [ this._conn._baseUrl(), 'sobjects', this.type, this.id, fieldName ].join('/');\r\n  return this._conn.request(url).stream();\r\n};\r\n","/**\r\n * @file Manages asynchronous method response cache\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar events = require('events'),\r\n    inherits = require('inherits'),\r\n    _      = require('lodash/core');\r\n\r\n/**\r\n * Class for managing cache entry\r\n *\r\n * @private\r\n * @class\r\n * @constructor\r\n * @template T\r\n */\r\nvar CacheEntry = function() {\r\n  this.fetching = false;\r\n};\r\n\r\ninherits(CacheEntry, events.EventEmitter);\r\n\r\n/**\r\n * Get value in the cache entry\r\n *\r\n * @param {Callback.<T>} [callback] - Callback function callbacked the cache entry updated\r\n * @returns {T|undefined}\r\n */\r\nCacheEntry.prototype.get = function(callback) {\r\n  if (!callback) {\r\n    return this._value;\r\n  } else {\r\n    this.once('value', callback);\r\n    if (!_.isUndefined(this._value)) {\r\n      this.emit('value', this._value);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Set value in the cache entry\r\n *\r\n * @param {T} [value] - A value for caching\r\n */\r\nCacheEntry.prototype.set = function(value) {\r\n  this._value = value;\r\n  this.emit('value', this._value);\r\n};\r\n\r\n/**\r\n * Clear cached value\r\n */\r\nCacheEntry.prototype.clear = function() {\r\n  this.fetching = false;\r\n  delete this._value;\r\n};\r\n\r\n\r\n/**\r\n * Caching manager for async methods\r\n *\r\n * @class\r\n * @constructor\r\n */\r\nvar Cache = function() {\r\n  this._entries = {};\r\n};\r\n\r\n/**\r\n * retrive cache entry, or create if not exists.\r\n *\r\n * @param {String} [key] - Key of cache entry\r\n * @returns {CacheEntry}\r\n */\r\nCache.prototype.get = function(key) {\r\n  if (key && this._entries[key]) {\r\n    return this._entries[key];\r\n  } else {\r\n    var entry = new CacheEntry();\r\n    this._entries[key] = entry;\r\n    return entry;\r\n  }\r\n};\r\n\r\n/**\r\n * clear cache entries prefix matching given key\r\n * @param {String} [key] - Key prefix of cache entry to clear\r\n */\r\nCache.prototype.clear = function(key) {\r\n  for (var k in this._entries) {\r\n    if (!key || k.indexOf(key) === 0) {\r\n      this._entries[k].clear();\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * create and return cache key from namespace and serialized arguments.\r\n * @private\r\n */\r\nfunction createCacheKey(namespace, args) {\r\n  args = Array.prototype.slice.apply(args);\r\n  return namespace + '(' + _.map(args, function(a){ return JSON.stringify(a); }).join(',') + ')';\r\n}\r\n\r\n/**\r\n * Enable caching for async call fn to intercept the response and store it to cache.\r\n * The original async calll fn is always invoked.\r\n *\r\n * @protected\r\n * @param {Function} fn - Function to covert cacheable\r\n * @param {Object} [scope] - Scope of function call\r\n * @param {Object} [options] - Options\r\n * @return {Function} - Cached version of function\r\n */\r\nCache.prototype.makeResponseCacheable = function(fn, scope, options) {\r\n  var cache = this;\r\n  options = options || {};\r\n  return function() {\r\n    var args = Array.prototype.slice.apply(arguments);\r\n    var callback = args.pop();\r\n    if (!_.isFunction(callback)) {\r\n      args.push(callback);\r\n      callback = null;\r\n    }\r\n    var keys = _.isString(options.key) ? options.key :\r\n               _.isFunction(options.key) ? options.key.apply(scope, args) :\r\n               createCacheKey(options.namespace, args);\r\n    if (!Array.isArray(keys)) { keys = [ keys ]; }\r\n    var entries = [];\r\n    keys.forEach(function (key) {\r\n      var entry = cache.get(key);\r\n      entry.fetching = true;\r\n      entries.push(entry);\r\n    })\r\n    if (callback) {\r\n      args.push(function(err, result) {\r\n        if (Array.isArray(result) && result.length == entries.length) {\r\n          entries.forEach(function (entry, index) {\r\n            entry.set({ error: err, result: result[index] });\r\n          })\r\n        } else {\r\n          entries.forEach(function (entry) {\r\n            entry.set({ error: err, result: result });\r\n          });\r\n        }\r\n        callback(err, result);\r\n      });\r\n    }\r\n    var ret, error;\r\n    try {\r\n      ret = fn.apply(scope || this, args);\r\n    } catch(e) {\r\n      error = e;\r\n    }\r\n    if (ret && _.isFunction(ret.then)) { // if the returned value is promise\r\n      if (!callback) {\r\n        return ret.then(function(result) {\r\n          if (Array.isArray(result) && result.length == entries.length) {\r\n            entries.forEach(function (entry, index) {\r\n              entry.set({ error: undefined, result: result[index] });\r\n            })\r\n          } else {\r\n            entries.forEach(function (entry) {\r\n              entry.set({ error: undefined, result: result });\r\n            });\r\n          }\r\n          return result;\r\n        }, function(err) {\r\n          if (Array.isArray(err) && err.length == entries.length) {\r\n            entries.forEach(function (entry, index) {\r\n              entry.set({ error: err[index], result: undefined });\r\n            })\r\n          } else {\r\n            entries.forEach(function (entry) {\r\n              entry.set({ error: err, result: undefined });\r\n            });\r\n          }\r\n          throw err;\r\n        });\r\n      } else {\r\n        return ret;\r\n      }\r\n    } else {\r\n      if (Array.isArray(ret) && ret.length == entries.length) {\r\n        entries.forEach(function (entry, index) {\r\n          entry.set({ error: error, result: ret[index] });\r\n        })\r\n      } else {\r\n        entries.forEach(function (entry) {\r\n          entry.set({ error: error, result: ret });\r\n        });\r\n      }\r\n      if (error) { throw error; }\r\n      return ret;\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Enable caching for async call fn to lookup the response cache first, then invoke original if no cached value.\r\n *\r\n * @protected\r\n * @param {Function} fn - Function to covert cacheable\r\n * @param {Object} [scope] - Scope of function call\r\n * @param {Object} [options] - Options\r\n * @return {Function} - Cached version of function\r\n */\r\nCache.prototype.makeCacheable = function(fn, scope, options) {\r\n  var cache = this;\r\n  options = options || {};\r\n  var $fn = function() {\r\n    var args = Array.prototype.slice.apply(arguments);\r\n    var callback = args.pop();\r\n    if (!_.isFunction(callback)) {\r\n      args.push(callback);\r\n    }\r\n    var key = _.isString(options.key) ? options.key :\r\n              _.isFunction(options.key) ? options.key.apply(scope, args) :\r\n              createCacheKey(options.namespace, args);\r\n    var entry = cache.get(key);\r\n    if (!_.isFunction(callback)) { // if callback is not given in last arg, return cached result (immediate).\r\n      var value = entry.get();\r\n      if (!value) { throw new Error('Function call result is not cached yet.'); }\r\n      if (value.error) { throw value.error; }\r\n      return value.result;\r\n    }\r\n    entry.get(function(value) {\r\n      callback(value.error, value.result);\r\n    });\r\n    if (!entry.fetching) { // only when no other client is calling function\r\n      entry.fetching = true;\r\n      args.push(function(err, result) {\r\n        entry.set({ error: err, result: result });\r\n      });\r\n      fn.apply(scope || this, args);\r\n    }\r\n  };\r\n  $fn.clear = function() {\r\n    var key = _.isString(options.key) ? options.key :\r\n              _.isFunction(options.key) ? options.key.apply(scope, arguments) :\r\n              createCacheKey(options.namespace, arguments);\r\n    cache.clear(key);\r\n  };\r\n  return $fn;\r\n};\r\n\r\n\r\nmodule.exports = Cache;\r\n","/**\r\n * @file Represents Salesforce QuickAction\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\n\r\n/**\r\n * A class for quick action\r\n *\r\n * @protected\r\n * @constructor\r\n */\r\nvar QuickAction = module.exports = function(conn, path) {\r\n  this._conn = conn;\r\n  this._path = path;\r\n};\r\n\r\n/**\r\n * @typedef {Object} QuickAction~QuickActionInfo\r\n * @prop {String} type - Type of the action (e.g. Create, Update, Post, LogACall)\r\n * @prop {String} name - Name of the action\r\n * @prop {String} label - Label of the action\r\n * @prop {Object} urls - Endpoint URL information of the action\r\n */\r\n/**\r\n * @typedef {QuickAction~QuickActionInfo} QuickAction~QuickActionDescriveInfo\r\n * @prop {String} contextSobjectType - Object type used for the action\r\n * @prop {String} targetSobjectType - Object type of the action to target\r\n * @prop {String} targetParentField - Field name in the target object which refers parent(context) object record ID.\r\n * @prop {String} targetRecordTypeId - Record type of the targeted record\r\n * @prop {Object} layout - Layout sections that comprise an action\r\n */\r\n\r\n/**\r\n * Describe the action's information (including layout, etc.)\r\n *\r\n * @param {Callback.<QuickAction~QuickActionDescriveInfo>} [callback] - Callback function\r\n * @returns {Promise.<QuickAction~QuickActionDescriveInfo>}\r\n */\r\nQuickAction.prototype.describe = function(callback) {\r\n  var url = this._path + \"/describe\";\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Retrieve default field values in the action (for given record, if specified)\r\n *\r\n * @param {String} [contextId] - ID of record to get default values specific to the record\r\n * @param {Callback.<Record>} [callback] - Callback function\r\n * @returns {Promise.<Record>}\r\n */\r\nQuickAction.prototype.defaultValues = function(contextId, callback) {\r\n  if (typeof contextId === 'function') {\r\n    callback = contextId;\r\n    contextId = null;\r\n  }\r\n  var url = this._path + \"/defaultValues\";\r\n  if (contextId) {\r\n    url += \"/\" + contextId;\r\n  }\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} QuickAction~QuickActionResult\r\n * @param {String} id - Record id of the action result\r\n * @param {Array.<String>} feedItemIds - List of IDs for feed item\r\n * @param {Boolean} success - True if the action successfully completed\r\n * @param {Boolean} created - True if the action yields a new record\r\n * @param {String} contextId - Context record ID of the action\r\n * @param {Array.<Object>} errors - Errors if the action failed\r\n */\r\n\r\n/**\r\n * Execute the action for given context Id and record information\r\n * \r\n * @param {String} contextId - Context record ID of the action\r\n * @param {Record} record - Input record information for the action\r\n * @param {Callback.<QuickAction~QuickActionResult>} [callback] - Callback function\r\n * @returns {Promise.<QuickAction~QuickActionResult>}\r\n */\r\nQuickAction.prototype.execute = function(contextId, record, callback) {\r\n  var body = {\r\n    contextId: contextId,\r\n    record: record\r\n  };\r\n  return this._conn.requestPost(this._path, body).thenCall(callback);\r\n};\r\n","/**\r\n * @file Represents Salesforce SObject\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _      = require('lodash/core'),\r\n    Record = require('./record'),\r\n    Query  = require('./query'),\r\n    Cache  = require('./cache'),\r\n    QuickAction = require('./quick-action');\r\n\r\n/**\r\n * A class for organizing all SObject access\r\n *\r\n * @constructor\r\n */\r\nvar SObject = module.exports = function(conn, type) {\r\n  this._conn = conn;\r\n  this.type = type;\r\n  var cacheOptions = { key: \"describe.\" + this.type };\r\n  this.describe$ = conn.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = conn.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n\r\n  cacheOptions = { key: \"layouts.\" + this.type };\r\n  this.layouts$ = conn.cache.makeCacheable(this.layouts, this, cacheOptions);\r\n  this.layouts = conn.cache.makeResponseCacheable(this.layouts, this, cacheOptions);\r\n\r\n  cacheOptions = { key: \"compactLayouts.\" + this.type };\r\n  this.compactLayouts$ = conn.cache.makeCacheable(this.compactLayouts, this, cacheOptions);\r\n  this.compactLayouts = conn.cache.makeResponseCacheable(this.compactLayouts, this, cacheOptions);\r\n\r\n  cacheOptions = { key: \"approvalLayouts.\" + this.type };\r\n  this.approvalLayouts$ = conn.cache.makeCacheable(this.approvalLayouts, this, cacheOptions);\r\n  this.approvalLayouts = conn.cache.makeResponseCacheable(this.approvalLayouts, this, cacheOptions);\r\n};\r\n\r\n/**\r\n * Synonym of SObject#create()\r\n *\r\n * @method SObject#insert\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method SObject#create\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nSObject.prototype.insert =\r\nSObject.prototype.create = function(records, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.create(this.type, records, options, callback);\r\n};\r\n\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\nSObject.prototype.retrieve = function(ids, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.retrieve(this.type, ids, options, callback);\r\n};\r\n\r\n/**\r\n * Update records\r\n *\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nSObject.prototype.update = function(records, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.update(this.type, records, options, callback);\r\n};\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nSObject.prototype.upsert = function(records, extIdField, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.upsert(this.type, records, extIdField, options, callback);\r\n};\r\n\r\n/**\r\n * Synonym of SObject#destroy()\r\n *\r\n * @method SObject#delete\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of SObject#destroy()\r\n *\r\n * @method SObject#del\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method SObject#destroy\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nSObject.prototype[\"delete\"] =\r\nSObject.prototype.del =\r\nSObject.prototype.destroy = function(ids, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  return this._conn.destroy(this.type, ids, options, callback);\r\n};\r\n\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\nSObject.prototype.describe = function(callback) {\r\n  return this._conn.describe(this.type, callback);\r\n};\r\n\r\n/**\r\n * Get record representation instance by given id\r\n *\r\n * @param {String} id - A record ID\r\n * @returns {RecordReference}\r\n */\r\nSObject.prototype.record = function(id) {\r\n  return new Record(this._conn, this.type, id);\r\n};\r\n\r\n/**\r\n * Find and fetch records which matches given conditions\r\n *\r\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\r\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\r\n * @param {Object} [options] - Query options.\r\n * @param {Number} [options.limit] - Maximum number of records the query will return.\r\n * @param {Number} [options.offset] - Offset number where begins returning results.\r\n * @param {Number} [options.skip] - Synonym of options.offset.\r\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\r\n * @returns {Query.<Array.<Record>>}\r\n */\r\nSObject.prototype.find = function(conditions, fields, options, callback) {\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = {};\r\n    fields = null;\r\n    options = null;\r\n  } else if (typeof fields === 'function') {\r\n    callback = fields;\r\n    fields = null;\r\n    options = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  options = options || {};\r\n  var config = {\r\n    fields: fields,\r\n    includes: options.includes,\r\n    table: this.type,\r\n    conditions: conditions,\r\n    limit: options.limit,\r\n    sort: options.sort,\r\n    offset: options.offset || options.skip\r\n  };\r\n  var query = new Query(this._conn, config, options);\r\n  query.setResponseTarget(Query.ResponseTargets.Records);\r\n  if (callback) { query.run(callback); }\r\n  return query;\r\n};\r\n\r\n/**\r\n * Fetch one record which matches given conditions\r\n *\r\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\r\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\r\n * @param {Object} [options] - Query options.\r\n * @param {Number} [options.limit] - Maximum number of records the query will return.\r\n * @param {Number} [options.offset] - Offset number where begins returning results.\r\n * @param {Number} [options.skip] - Synonym of options.offset.\r\n * @param {Callback.<Record>} [callback] - Callback function\r\n * @returns {Query.<Record>}\r\n */\r\nSObject.prototype.findOne = function(conditions, fields, options, callback) {\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = {};\r\n    fields = null;\r\n    options = null;\r\n  } else if (typeof fields === 'function') {\r\n    callback = fields;\r\n    fields = null;\r\n    options = null;\r\n  } else if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  options = _.extend(options || {}, { limit: 1 });\r\n  var query = this.find(conditions, fields, options);\r\n  query.setResponseTarget(Query.ResponseTargets.SingleRecord);\r\n  if (callback) { query.run(callback); }\r\n  return query;\r\n};\r\n\r\n/**\r\n * Find and fetch records only by specifying fields to fetch.\r\n *\r\n * @param {Object|Array.<String>|String} [fields] - Fields to fetch. Format can be in JSON object (MongoDB-like), array of field names, or comma-separated field names.\r\n * @param {Callback.<Array.<Record>>} [callback] - Callback function\r\n * @returns {Query.<Array.<Record>>}\r\n */\r\nSObject.prototype.select = function(fields, callback) {\r\n  return this.find(null, fields, null, callback);\r\n};\r\n\r\n/**\r\n * Count num of records which matches given conditions\r\n *\r\n * @param {Object|String} [conditions] - Conditions in JSON object (MongoDB-like), or raw SOQL WHERE clause string.\r\n * @param {Callback.<Number>} [callback] - Callback function\r\n * @returns {Query.<Number>}\r\n */\r\nSObject.prototype.count = function(conditions, callback) {\r\n  if (typeof conditions === 'function') {\r\n    callback = conditions;\r\n    conditions = {};\r\n  }\r\n  var query = this.find(conditions, { \"count()\" : true });\r\n  query.setResponseTarget(\"Count\");\r\n  if (callback) { query.run(callback); }\r\n  return query;\r\n};\r\n\r\n\r\n/**\r\n * Call Bulk#load() to execute bulkload, returning batch object\r\n *\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.bulkload = function(operation, options, input, callback) {\r\n  return this._conn.bulk.load(this.type, operation, options, input, callback);\r\n};\r\n\r\n/**\r\n * Synonym of SObject#createBulk()\r\n *\r\n * @method SObject#insertBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\n/**\r\n * Bulkly insert input data using bulk API\r\n *\r\n * @method SObject#createBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk insert. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.insertBulk =\r\nSObject.prototype.createBulk = function(input, callback) {\r\n  return this.bulkload(\"insert\", input, callback);\r\n};\r\n\r\n/**\r\n * Bulkly update records by input data using bulk API\r\n *\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk update Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.updateBulk = function(input, callback) {\r\n  return this.bulkload(\"update\", input, callback);\r\n};\r\n\r\n/**\r\n * Bulkly upsert records by input data using bulk API\r\n *\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk upsert. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {String} [options.extIdField] - External ID field name\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.upsertBulk = function(input, extIdField, callback) {\r\n  return this.bulkload(\"upsert\", { extIdField: extIdField }, input, callback);\r\n};\r\n\r\n/**\r\n * Synonym of SObject#destroyBulk()\r\n *\r\n * @method SObject#deleteBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\n/**\r\n * Bulkly delete records specified by input data using bulk API\r\n *\r\n * @method SObject#destroyBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.deleteBulk =\r\nSObject.prototype.destroyBulk = function(input, callback) {\r\n  return this.bulkload(\"delete\", input, callback);\r\n};\r\n\r\n/**\r\n * Synonym of SObject#destroyHardBulk()\r\n *\r\n * @method SObject#deleteHardBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\n/**\r\n * Bulkly hard delete records specified in input data using bulk API\r\n *\r\n * @method SObject#destroyHardBulk\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulk delete. Accepts array of records, CSv string, and CSV data input stream.\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nSObject.prototype.deleteHardBulk =\r\nSObject.prototype.destroyHardBulk = function(input, callback) {\r\n  return this.bulkload(\"hardDelete\", input, callback);\r\n};\r\n\r\n/**\r\n * Retrieve recently accessed records\r\n *\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\nSObject.prototype.recent = function (callback) {\r\n  return this._conn.recent(this.type, callback);\r\n};\r\n\r\n/**\r\n * Retrieve the updated records\r\n *\r\n * @param {String|Date} start - start date or string representing the start of the interval\r\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\r\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\r\n * @returns {Promise.<UpdatedRecordsInfo>}\r\n */\r\nSObject.prototype.updated = function (start, end, callback) {\r\n  return this._conn.updated(this.type, start, end, callback);\r\n};\r\n\r\n/**\r\n * Retrieve the deleted records\r\n *\r\n * @param {String|Date} start - start date or string representing the start of the interval\r\n * @param {String|Date} end - start date or string representing the end of the interval, must be > start\r\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\r\n * @returns {Promise.<DeletedRecordsInfo>}\r\n */\r\nSObject.prototype.deleted = function (start, end, callback) {\r\n  return this._conn.deleted(this.type, start, end, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} LayoutInfo\r\n * @prop {Array.<Object>} layouts - Array of layouts\r\n * @prop {Array.<Object>} recordTypeMappings - Array of record type mappings\r\n */\r\n/**\r\n * Describe layout information for SObject\r\n *\r\n * @param {String} [layoutName] - Name of named layout. (e.g. UserAlt in User SObject)\r\n * @param {Callback.<LayoutInfo>} [callback] - Callback function\r\n * @returns {Promise.<LayoutInfo>}\r\n */\r\nSObject.prototype.layouts = function(layoutName, callback) {\r\n  if (typeof layoutName === 'function') {\r\n    callback = layoutName;\r\n    layoutName = null;\r\n  }\r\n  var url = \"/sobjects/\" + this.type + \"/describe/\" + (layoutName ? \"namedLayouts/\"+layoutName : \"layouts\");\r\n  return this._conn.request(url, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} CompactLayoutInfo\r\n * @prop {Array.<Object>} compactLayouts - Array of compact layouts\r\n * @prop {String} defaultCompactLayoutId - ID of default compact layout\r\n * @prop {Array.<Object>} recordTypeCompactLayoutMappings - Array of record type mappings\r\n */\r\n/**\r\n * Describe compact layout information defined for SObject\r\n *\r\n * @param {Callback.<CompactLayoutInfo>} [callback] - Callback function\r\n * @returns {Promise.<CompactLayoutInfo>}\r\n */\r\nSObject.prototype.compactLayouts = function(callback) {\r\n  var url = \"/sobjects/\" + this.type + \"/describe/compactLayouts\";\r\n  return this._conn.request(url, callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} ApprovalLayoutInfo\r\n * @prop {Array.<Object>} approvalLayouts - Array of approval layouts\r\n */\r\n/**\r\n * Describe compact layout information defined for SObject\r\n *\r\n * @param {Callback.<ApprovalLayoutInfo>} [callback] - Callback function\r\n * @returns {Promise.<ApprovalLayoutInfo>}\r\n */\r\nSObject.prototype.approvalLayouts = function(callback) {\r\n  var url = \"/sobjects/\" + this.type + \"/describe/approvalLayouts\";\r\n  return this._conn.request(url, callback);\r\n};\r\n\r\n/**\r\n * Returns the list of list views for the SObject\r\n *\r\n * @param {Callback.<ListViewsInfo>} [callback] - Callback function\r\n * @returns {Promise.<ListViewsInfo>}\r\n */\r\nSObject.prototype.listviews = function(callback) {\r\n  var url = this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews';\r\n  return this._conn.request(url, callback);\r\n};\r\n\r\n/**\r\n * Returns the list view info in specifed view id\r\n *\r\n * @param {String} id - List view ID\r\n * @returns {ListView}\r\n */\r\nSObject.prototype.listview = function(id) {\r\n  return new ListView(this._conn, this.type, id);\r\n};\r\n\r\n/**\r\n * Returns all registered quick actions for the SObject\r\n *\r\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\r\n */\r\nSObject.prototype.quickActions = function(callback) {\r\n  return this._conn.request(\"/sobjects/\" + this.type + \"/quickActions\").thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get reference for specified quick aciton in the SObject\r\n *\r\n * @param {String} actionName - Name of the quick action\r\n * @returns {QuickAction}\r\n */\r\nSObject.prototype.quickAction = function(actionName) {\r\n  return new QuickAction(this._conn, \"/sobjects/\" + this.type + \"/quickActions/\" + actionName);\r\n};\r\n\r\n\r\n/**\r\n * A class for organizing list view information\r\n *\r\n * @protected\r\n * @class ListView\r\n * @param {Connection} conn - Connection instance\r\n * @param {SObject} type - SObject type\r\n * @param {String} id - List view ID\r\n */\r\nvar ListView = function(conn, type, id) {\r\n  this._conn = conn;\r\n  this.type = type;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Executes query for the list view and returns the resulting data and presentation information.\r\n *\r\n * @param {Callback.<ListViewResultInfo>} [callback] - Callback function\r\n * @returns {Promise.<ListViewResultInfo>}\r\n */\r\nListView.prototype.results = function(callback) {\r\n  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/results';\r\n  return this._conn.request(url, callback);\r\n};\r\n\r\n\r\n/**\r\n * Returns detailed information about a list view\r\n *\r\n * @param {Object} [options] - Identity call options\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\r\n * @param {Callback.<ListViewDescribeInfo>} [callback] - Callback function\r\n * @returns {Promise.<ListViewDescribeInfo>}\r\n */\r\nListView.prototype.describe = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  var url =  this._conn._baseUrl() + '/sobjects/' + this.type + '/listviews/' + this.id + '/describe';\r\n  return this._conn.request({ method: 'GET', url: url, headers: options.headers }, callback);\r\n};\r\n\r\n/**\r\n * Explain plan for executing list view\r\n *\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nListView.prototype.explain = function(callback) {\r\n  var url = \"/query/?explain=\" + this.id;\r\n  return this._conn.request(url, callback);\r\n};\r\n","'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    events = require('events'),\r\n    _ = require('lodash/core'),\r\n    Promise = require('./promise');\r\n\r\n/**\r\n * HTTP based API class with authorization hook\r\n *\r\n * @constructor\r\n * @extends events.EventEmitter\r\n * @param {Connection} conn - Connection object\r\n * @param {Object} [options] - Http API Options\r\n * @param {String} [options.responseType] - Overriding content mime-type in response\r\n * @param {Transport} [options.transport] - Transport for http api\r\n * @param {Object} [options.noContentResponse] - Alternative response when no content returned in response (= HTTP 204)\r\n */\r\nvar HttpApi = function(conn, options) {\r\n  options = options || {};\r\n  this._conn = conn;\r\n  this.on('resume', function(err) { conn.emit('resume', err); });\r\n  this._responseType = options.responseType;\r\n  this._transport = options.transport || conn._transport;\r\n  this._noContentResponse = options.noContentResponse;\r\n};\r\n\r\ninherits(HttpApi, events.EventEmitter);\r\n\r\n/**\r\n * Callout to API endpoint using http\r\n *\r\n * @param {Object} request - Http Request object\r\n * @param {String} request.url - Endpoint URL to request\r\n * @param {String} request.method - Http method for request\r\n * @param {Object} [request.headers] - Http request headers in hash object\r\n * @param {Callback.<Object>} callback - Callback function\r\n * @returns {Promise.<Object>} -\r\n */\r\nHttpApi.prototype.request = function(request, callback) {\r\n  var self = this;\r\n  var conn = this._conn;\r\n  var logger = conn._logger;\r\n  var refreshDelegate = this.getRefreshDelegate();\r\n  // remember previous instance url in case it changes after a refresh\r\n  var lastInstanceUrl = conn.instanceUrl;\r\n\r\n  var deferred = Promise.defer();\r\n\r\n  var onResume = function(err) {\r\n    if (err) {\r\n      deferred.reject(err);\r\n      return;\r\n    }\r\n    // check to see if the token refresh has changed the instance url\r\n    if(lastInstanceUrl !== conn.instanceUrl){\r\n      // if the instance url has changed\r\n      // then replace the current request urls instance url fragment\r\n      // with the updated instance url\r\n      request.url = request.url.replace(lastInstanceUrl,conn.instanceUrl);\r\n    }\r\n\r\n    self.request(request).then(function(response) {\r\n      deferred.resolve(response);\r\n    }, function(err) {\r\n      deferred.reject(err);\r\n    });\r\n  };\r\n\r\n  if (refreshDelegate && refreshDelegate._refreshing) {\r\n    refreshDelegate.once('resume', onResume);\r\n    return deferred.promise.thenCall(callback);\r\n  }\r\n\r\n  // hook before sending\r\n  self.beforeSend(request);\r\n\r\n  self.emit('request', request);\r\n  logger.debug(\"<request> method=\" + request.method + \", url=\" + request.url);\r\n  var requestTime = Date.now();\r\n\r\n  return this._transport.httpRequest(request).then(function(response) {\r\n    var responseTime = Date.now();\r\n    logger.debug(\"elapsed time : \" + (responseTime - requestTime) + \"msec\");\r\n    logger.debug(\"<response> status=\" + response.statusCode + \", url=\" + request.url);\r\n\r\n    self.emit('response', response);\r\n    // Refresh token if session has been expired and requires authentication\r\n    // when session refresh delegate is available\r\n    if (self.isSessionExpired(response) && refreshDelegate) {\r\n      refreshDelegate.refresh(requestTime, onResume);\r\n      return deferred.promise;\r\n    }\r\n    if (self.isErrorResponse(response)) {\r\n      var err = self.getError(response);\r\n      throw err;\r\n    }\r\n    return self.getResponseBody(response);\r\n  }, function(err) {\r\n    var responseTime = Date.now();\r\n    logger.debug(\"elapsed time : \" + (responseTime - requestTime) + \"msec\");\r\n    logger.error(err);\r\n    throw err;\r\n  })\r\n  .thenCall(callback);\r\n};\r\n\r\n/**\r\n * @protected\r\n */\r\nHttpApi.prototype.getRefreshDelegate = function() {\r\n  return this._conn._refreshDelegate;\r\n};\r\n\r\n/**\r\n *\r\n * @protected\r\n */\r\nHttpApi.prototype.beforeSend = function(request) {\r\n  request.headers = request.headers || {};\r\n  if (this._conn.accessToken) {\r\n    request.headers.Authorization = \"Bearer \" + this._conn.accessToken;\r\n  }\r\n  if (this._conn.callOptions) {\r\n    var callOptions = [];\r\n    for (var name in this._conn.callOptions) {\r\n      callOptions.push(name + \"=\" + this._conn.callOptions[name]);\r\n    }\r\n    request.headers[\"Sforce-Call-Options\"] = callOptions.join(', ');\r\n  }\r\n};\r\n\r\n/**\r\n * Detect response content mime-type\r\n * @protected\r\n */\r\nHttpApi.prototype.getResponseContentType = function(response) {\r\n  return this._responseType || response.headers && response.headers[\"content-type\"];\r\n};\r\n\r\n/**\r\n *\r\n */\r\nHttpApi.prototype.parseResponseBody = function(response) {\r\n  var contentType = this.getResponseContentType(response);\r\n  var parseBody = /^(text|application)\\/xml(;|$)/.test(contentType) ? parseXML :\r\n         /^application\\/json(;|$)/.test(contentType) ? parseJSON :\r\n         /^text\\/csv(;|$)/.test(contentType) ? parseCSV :\r\n         parseText;\r\n  try {\r\n    return parseBody(response.body);\r\n  } catch(e) {\r\n    return response.body;\r\n  }\r\n};\r\n\r\n/**\r\n * Get response body\r\n * @protected\r\n */\r\nHttpApi.prototype.getResponseBody = function(response) {\r\n  if (response.statusCode === 204) { // No Content\r\n    return this._noContentResponse;\r\n  }\r\n  var body = this.parseResponseBody(response);\r\n  var err;\r\n  if (this.hasErrorInResponseBody(body)) {\r\n    err = this.getError(response, body);\r\n    throw err;\r\n  }\r\n  if (response.statusCode === 300) { // Multiple Choices\r\n    err = new Error('Multiple records found');\r\n    err.name = \"MULTIPLE_CHOICES\";\r\n    err.content = body;\r\n    throw err;\r\n  }\r\n  return body;\r\n};\r\n\r\n/** @private */\r\nfunction parseJSON(str) {\r\n  return JSON.parse(str);\r\n}\r\n\r\n/** @private */\r\nfunction parseXML(str) {\r\n  var ret = {};\r\n  require('xml2js').parseString(str, { explicitArray: false }, function(err, result) {\r\n    ret = { error: err, result : result };\r\n  });\r\n  if (ret.error) { throw ret.error; }\r\n  return ret.result;\r\n}\r\n\r\n/** @private */\r\nfunction parseCSV(str) {\r\n  return require('./csv').parseCSV(str);\r\n}\r\n\r\n/** @private */\r\nfunction parseText(str) { return str; }\r\n\r\n\r\n/**\r\n * Detect session expiry\r\n * @protected\r\n */\r\nHttpApi.prototype.isSessionExpired = function(response) {\r\n  return response.statusCode === 401;\r\n};\r\n\r\n/**\r\n * Detect error response\r\n * @protected\r\n */\r\nHttpApi.prototype.isErrorResponse = function(response) {\r\n  return response.statusCode >= 400;\r\n};\r\n\r\n/**\r\n * Detect error in response body\r\n * @protected\r\n */\r\nHttpApi.prototype.hasErrorInResponseBody = function(body) {\r\n  return false;\r\n};\r\n\r\n/**\r\n * Parsing error message in response\r\n * @protected\r\n */\r\nHttpApi.prototype.parseError = function(body) {\r\n  var errors = body;\r\n  return _.isArray(errors) ? errors[0] : errors;\r\n};\r\n\r\n/**\r\n * Get error message in response\r\n * @protected\r\n */\r\nHttpApi.prototype.getError = function(response, body) {\r\n  var error;\r\n  try {\r\n    error = this.parseError(body || this.parseResponseBody(response));\r\n  } catch(e) {}\r\n  error = _.isObject(error) && _.isString(error.message) ? error : {\r\n    errorCode: 'ERROR_HTTP_' + response.statusCode,\r\n    message : response.body\r\n  };\r\n  var err = new Error(error.message);\r\n  err.name = error.errorCode;\r\n  for (var key in error) { err[key] = error[key]; }\r\n  return err;\r\n};\r\n\r\n/*-------------------------------------------------------------------------*/\r\n\r\n/**\r\n * @protected\r\n */\r\nvar SessionRefreshDelegate = function(conn, refreshFn) {\r\n  this._conn = conn;\r\n  this._refreshFn = refreshFn;\r\n  this._refreshing = false;\r\n};\r\n\r\ninherits(SessionRefreshDelegate, events.EventEmitter);\r\n\r\n/**\r\n * Refresh access token\r\n * @private\r\n */\r\nSessionRefreshDelegate.prototype.refresh = function(since, callback) {\r\n  // Callback immediately When refreshed after designated time\r\n  if (this._lastRefreshedAt > since) { return callback(); }\r\n  var self = this;\r\n  var conn = this._conn;\r\n  var logger = conn._logger;\r\n  self.once('resume', callback);\r\n  if (self._refreshing) { return; }\r\n  logger.debug(\"<refresh token>\");\r\n  self._refreshing = true;\r\n  return self._refreshFn(conn, function(err, accessToken, res) {\r\n    if (!err) {\r\n      logger.debug(\"Connection refresh completed.\");\r\n      conn.accessToken = accessToken;\r\n      conn.emit(\"refresh\", accessToken, res);\r\n    }\r\n    self._lastRefreshedAt = Date.now();\r\n    self._refreshing = false;\r\n    self.emit('resume', err);\r\n  });\r\n};\r\n\r\n\r\n/**\r\n *\r\n */\r\nHttpApi.SessionRefreshDelegate = SessionRefreshDelegate;\r\nmodule.exports = HttpApi;\r\n","/**\r\n * @file Process class to manage/run workflow rule and approval process\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash/core'),\r\n    Promise = require('./promise'),\r\n    Conneciton = require('./connection');\r\n\r\n/**\r\n * A class which manages process rules and approval processes\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Process = module.exports = function(conn) {\r\n  /**\r\n   * Object which mangages process rules\r\n   * @member {Process~ProcessRule} Process#rule\r\n   */\r\n  this.rule = new ProcessRule(conn);\r\n  /**\r\n   * Object which mangages approval process\r\n   * @member {Process~ApprovalProcess} Process#approval\r\n   */\r\n  this.approval = new ApprovalProcess(conn);\r\n};\r\n\r\n/**\r\n * A class which manages process (workflow) rules\r\n *\r\n * @class Process~ProcessRule\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar ProcessRule = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Process~ProcessRuleDefinition\r\n * @prop {String} id - Id of approval process definition\r\n * @prop {String} name - Name of process rule definition\r\n * @prop {String} object - SObject name which process rule is defined\r\n */\r\n\r\n/**\r\n * Get all process rule definitions registered to sobjects\r\n *\r\n * @method Process~ProcessRule#list\r\n * @param {Callback.<Map.<String, Array.<Process~ProcessRuleDefinition>>>} [callback] - Callback function\r\n * @returns {Promise.<Map.<String, Array.<Process~ProcessRuleDefinition>>>}\r\n */\r\nProcessRule.prototype.list = function(callback) {\r\n  return this._conn.request(\"/process/rules\").then(function(res) {\r\n    return res.rules;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} Process~ProcessRuleTriggerResult\r\n * @prop {Boolean} success - Is process rule trigger succeeded or not\r\n * @prop {Array.<Object>} errors - Array of errors returned if the request failed\r\n */\r\n\r\n/**\r\n * Trigger process rule for given entities\r\n *\r\n * @method Process~ProcessRule#trigger\r\n * @param {String|Array.<String>} contextIds - Entity ID(s) to trigger workflow process\r\n * @param {Callback.<Process~ProcessRuleTriggerResult>} [callback] - Callback function\r\n * @returns {Promise.<Process~ProcessRuleTriggerResult>}\r\n */\r\nProcessRule.prototype.trigger = function(contextIds, callback) {\r\n  contextIds = _.isArray(contextIds) ? contextIds : [ contextIds ];\r\n  return this._conn.request({\r\n    method: \"POST\",\r\n    url: \"/process/rules/\",\r\n    body: JSON.stringify({\r\n      contextIds: contextIds\r\n    }),\r\n    headers: {\r\n      \"content-type\": \"application/json\"\r\n    }\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * A class which manages approval processes\r\n *\r\n * @class Process~ApprovalProcess\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar ApprovalProcess = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Process~ApprovalProcessDefinition\r\n * @prop {String} id - Id of approval process definition\r\n * @prop {String} name - Name of approval process definition\r\n * @prop {String} object - SObject name which approval process is defined\r\n * @prop {Number} sortOrder - Processing order of approval in SObject\r\n */\r\n/**\r\n * Get all approval process definitions registered to sobjects\r\n *\r\n * @method Process~ApprovalProcess#list\r\n * @param {Callback.<Map.<String, Array.<ApprovalProcessDefinition>>>} [callback] - Callback function\r\n * @returns {Promise.<Map.<String, Array.<ApprovalProcessDefinition>>>}\r\n */\r\nApprovalProcess.prototype.list = function(callback) {\r\n  return this._conn.request(\"/process/approvals\").then(function(res) {\r\n    return res.approvals;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Process~ApprovalProcessRequestResult\r\n * @prop {Boolean} success - True if processing or approval completed successfully\r\n * @prop {Array.<Object>} errors - The set of errors returned if the request failed\r\n * @prop {Array.<String>} actorIds - IDs of the users who are currently assigned to this approval step\r\n * @prop {String} entityId - Object being processed\r\n * @prop {String} instanceId - ID of the ProcessInstance associated with the object submitted for processing\r\n * @prop {String} instanceStatus - Status of the current process instance (not an individual object but the entire process instance)\r\n * @prop {Array.<String>} newWorkItemIds - Case-insensitive IDs that point to ProcessInstanceWorkitem items (the set of pending approval requests)\r\n */\r\n\r\n/**\r\n * Send bulk requests for approval process\r\n *\r\n * @method Process~ApprovalProcess#request\r\n * @param {Array.<ApprovalProcessRequest>} requests - Array of approval process request to send\r\n * @param {Callback.<Array.<ApprovalProcessRequestResult>>} - Callback function\r\n * @param {Promise.<Array.<ApprovalProcessRequestResult>>}\r\n */\r\nApprovalProcess.prototype.request = function(requests, callback) {\r\n  requests = requests.map(function(req) {\r\n    return req._request ? req._request : req;\r\n  });\r\n  return this._conn.request({\r\n    method: 'POST',\r\n    url: '/process/approvals',\r\n    headers: { \"content-type\": \"application/json\" },\r\n    body: JSON.stringify({ requests: requests })\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create approval process request\r\n *\r\n * @private\r\n */\r\nApprovalProcess.prototype._createRequest = function(actionType, contextId, comments, options, callback) {\r\n  if (typeof comments === \"function\") {\r\n    callback = comments;\r\n    options = null;\r\n    comments = null;\r\n  }\r\n  if (typeof options === \"function\") {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  options = options || {};\r\n  var request = {\r\n    actionType: actionType,\r\n    contextId: contextId,\r\n    comments: comments\r\n  };\r\n  _.extend(request, options);\r\n  return new ApprovalProcessRequest(this, request).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Submit approval request for an item\r\n *\r\n * @method Process~ApprovalProcess#submit\r\n * @param {String} contextId - ID of the item that is being acted upon\r\n * @param {String} [comments] - Comment to add to the history step associated with this request\r\n * @param {Object} [options] - Request parameters\r\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\r\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\r\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\r\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\r\n * @returns {ApprovalProcessRequest}\r\n */\r\nApprovalProcess.prototype.submit = function(contextId, comments, options, callback) {\r\n  return this._createRequest(\"Submit\", contextId, comments, options, callback);\r\n};\r\n\r\n/**\r\n * Approve approval request for an item\r\n *\r\n * @method Process~ApprovalProcess#approve\r\n * @param {String} workitemId - ID of the item that is being acted upon\r\n * @param {String} [comments] - Comment to add to the history step associated with this request\r\n * @param {Object} [options] - Request parameters\r\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\r\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\r\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\r\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\r\n * @returns {ApprovalProcessRequest}\r\n */\r\nApprovalProcess.prototype.approve = function(workitemId, comments, options, callback) {\r\n  return this._createRequest(\"Approve\", workitemId, comments, options, callback);\r\n};\r\n\r\n/**\r\n * Reject approval request for an item\r\n *\r\n * @method Process~ApprovalProcess#reject\r\n * @param {String} workitemId - ID of the item that is being acted upon\r\n * @param {String} [comments] - Comment to add to the history step associated with this request\r\n * @param {Object} [options] - Request parameters\r\n * @param {Array.<String>} [options.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\r\n * @param {String} [options.processDefinitionNameOrId] - Developer name or ID of the process definition\r\n * @param {Boolean} [options.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\r\n * @param {Callback.<ApprovalProcessRequestResult>} [callback] - Callback function\r\n * @returns {ApprovalProcessRequest}\r\n */\r\nApprovalProcess.prototype.reject = function(workitemId, comments, options, callback) {\r\n  return this._createRequest(\"Reject\", workitemId, comments, options, callback);\r\n};\r\n\r\n/**\r\n * A class representing approval process request\r\n *\r\n * @protected\r\n * @class Process~ApprovalProcessRequest\r\n * @implements {Promise.<Process~ApprovalProcessRequestResult>}\r\n * @param {Process~ApprovalProcess} process - ApprovalProcess\r\n * @param {Object} request - Request parameters\r\n * @param {String} request.actionType - Represents the kind of action to take: Submit, Approve, or Reject\r\n * @param {String} request.contextId - ID of the item that is being acted upon\r\n * @param {String} request.comments - Comment to add to the history step associated with this request\r\n * @param {Array.<String>} [request.nextApproverIds] - If the process requires specification of the next approval, the ID of the user to be assigned the next request\r\n * @param {String} [request.processDefinitionNameOrId] - Developer name or ID of the process definition\r\n * @param {Boolean} [request.skipEntryCriteria] - Determines whether to evaluate the entry criteria for the process (true) or not (false) if the process definition name or ID isn’t null\r\n */\r\nvar ApprovalProcessRequest = function(process, request) {\r\n  this._process = process;\r\n  this._request = request;\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * @method Process~ApprovalProcessRequest#then\r\n */\r\nApprovalProcessRequest.prototype.then = function(onResolve, onReject) {\r\n  if (!this._promise) {\r\n    this._promise = this._process.request([ this ]).then(function(rets) {\r\n      return rets[0];\r\n    });\r\n  }\r\n  this._promise.then(onResolve, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Process~ApprovalProcessRequest#thenCall\r\n */\r\nApprovalProcessRequest.prototype.thenCall = function(callback) {\r\n  return callback ? this.then(function(res) {\r\n    callback(null, res);\r\n  }, function(err) {\r\n    callback(err);\r\n  }) :\r\n  this;\r\n};\r\n","/*global Buffer */\r\n/**\r\n * @file Connection class to keep the API session information and manage requests\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar events  = require('events'),\r\n    inherits = require('inherits'),\r\n    _       = require('lodash/core'),\r\n    Promise = require('./promise'),\r\n    Logger  = require('./logger'),\r\n    OAuth2  = require('./oauth2'),\r\n    Query   = require('./query'),\r\n    SObject = require('./sobject'),\r\n    QuickAction = require('./quick-action'),\r\n    HttpApi = require('./http-api'),\r\n    Transport = require('./transport'),\r\n    Process = require('./process'),\r\n    Cache   = require('./cache');\r\n\r\nvar defaults = {\r\n  loginUrl: \"https://login.salesforce.com\",\r\n  instanceUrl: \"\",\r\n  version: \"42.0\"\r\n};\r\n\r\n/*\r\n * Constant of maximum records num in DML operation (update/delete)\r\n */\r\nvar MAX_DML_COUNT = 200;\r\n\r\n/*\r\n * Constant of maximum number of requests that can be batched\r\n */\r\nvar MAX_BATCH_REQUESTS = 25;\r\n\r\n/**\r\n * Connection class to keep the API session information and manage requests\r\n *\r\n * @constructor\r\n * @extends events.EventEmitter\r\n * @param {Object} [options] - Connection options\r\n * @param {OAuth2|Object} [options.oauth2] - OAuth2 instance or options to be passed to OAuth2 constructor\r\n * @param {String} [options.logLevel] - Output logging level (DEBUG|INFO|WARN|ERROR|FATAL)\r\n * @param {String} [options.version] - Salesforce API Version (without \"v\" prefix)\r\n * @param {Number} [options.maxRequest] - Max number of requests allowed in parallel call\r\n * @param {String} [options.loginUrl] - Salesforce Login Server URL (e.g. https://login.salesforce.com/)\r\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\r\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\r\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\r\n * @param {String} [options.sessionId] - Salesforce session ID\r\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\r\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\r\n * @param {String} [options.proxyUrl] - Cross-domain proxy server URL, used in browser client, non Visualforce app.\r\n * @param {String} [options.httpProxy] - URL of HTTP proxy server, used in server client.\r\n * @param {Object} [options.callOptions] - Call options used in each SOAP/REST API request. See manual.\r\n */\r\nvar Connection = module.exports = function(options) {\r\n  options = options || {};\r\n\r\n  this._logger = new Logger(options.logLevel);\r\n\r\n  var oauth2 = options.oauth2 || {\r\n    loginUrl : options.loginUrl,\r\n    clientId : options.clientId,\r\n    clientSecret : options.clientSecret,\r\n    redirectUri : options.redirectUri,\r\n    proxyUrl: options.proxyUrl,\r\n    httpProxy: options.httpProxy\r\n  };\r\n\r\n  /**\r\n   * OAuth2 object\r\n   * @member {OAuth2} Connection#oauth2\r\n   */\r\n  this.oauth2 = oauth2 = oauth2 instanceof OAuth2 ? oauth2 : new OAuth2(oauth2);\r\n\r\n  this.loginUrl = options.loginUrl || oauth2.loginUrl || defaults.loginUrl;\r\n  this.version = options.version || defaults.version;\r\n  this.maxRequest = options.maxRequest || this.maxRequest || 10;\r\n\r\n  /** @private */\r\n  if (options.proxyUrl) {\r\n    this._transport = new Transport.ProxyTransport(options.proxyUrl);\r\n  } else if (options.httpProxy) {\r\n    this._transport = new Transport.HttpProxyTransport(options.httpProxy);\r\n  } else {\r\n    this._transport = new Transport();\r\n  }\r\n\r\n  this.callOptions = options.callOptions;\r\n\r\n  /*\r\n   * Fire connection:new event to notify jsforce plugin modules\r\n   */\r\n  var jsforce = require('./core');\r\n  jsforce.emit('connection:new', this);\r\n\r\n  /**\r\n   * Streaming API object\r\n   * @member {Streaming} Connection#streaming\r\n   */\r\n  // this.streaming = new Streaming(this);\r\n  /**\r\n   * Bulk API object\r\n   * @member {Bulk} Connection#bulk\r\n   */\r\n  // this.bulk = new Bulk(this);\r\n  /**\r\n   * Tooling API object\r\n   * @member {Tooling} Connection#tooling\r\n   */\r\n  // this.tooling = new Tooling(this);\r\n  /**\r\n   * Analytics API object\r\n   * @member {Analytics} Connection#analytics\r\n   */\r\n  // this.analytics = new Analytics(this);\r\n  /**\r\n   * Chatter API object\r\n   * @member {Chatter} Connection#chatter\r\n   */\r\n  // this.chatter = new Chatter(this);\r\n  /**\r\n   * Metadata API object\r\n   * @member {Metadata} Connection#metadata\r\n   */\r\n  // this.metadata = new Metadata(this);\r\n\r\n  /**\r\n   * SOAP API object\r\n   * @member {SoapApi} Connection#soap\r\n   */\r\n  // this.soap = new SoapApi(this);\r\n\r\n  /**\r\n   * Apex REST API object\r\n   * @member {Apex} Connection#apex\r\n   */\r\n  // this.apex = new Apex(this);\r\n\r\n  /**\r\n   * @member {Process} Connection#process\r\n   */\r\n  this.process = new Process(this);\r\n\r\n  /**\r\n   * Cache object for result\r\n   * @member {Cache} Connection#cache\r\n   */\r\n  this.cache = new Cache();\r\n\r\n  // Allow to delegate connection refresh to outer function\r\n  var self = this;\r\n  var refreshFn = options.refreshFn;\r\n  if (!refreshFn && this.oauth2.clientId) {\r\n    refreshFn = oauthRefreshFn;\r\n  }\r\n  if (refreshFn) {\r\n    this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, refreshFn);\r\n  }\r\n\r\n  var cacheOptions = {\r\n    key: function(type) { \r\n      return type \r\n        ? type.type ? \"describe.\" + type.type : \"describe.\" + type\r\n        : \"describe\"; \r\n    }\r\n  };\r\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n  this.describeSObject$ = this.describe$;\r\n  this.describeSObject = this.describe;\r\n\r\n  var batchCacheOptions = {\r\n    key: function(options) {\r\n      var types = options.types;\r\n      var autofetch = options.autofetch || false;\r\n      var typesToFetch = types.length > MAX_BATCH_REQUESTS \r\n        ? (autofetch ? types : types.slice(0, MAX_BATCH_REQUESTS))\r\n        : types;\r\n      var keys = [];\r\n      typesToFetch.forEach(function (type) { keys.push('describe.' + type); });\r\n      return keys;\r\n    }\r\n  };\r\n  this.batchDescribe = this.cache.makeResponseCacheable(this.batchDescribe, this, batchCacheOptions);\r\n  this.batchDescribeSObjects = this.batchDescribe;\r\n\r\n  cacheOptions = { key: 'describeGlobal' };\r\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\r\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\r\n\r\n  this.initialize(options);\r\n};\r\n\r\ninherits(Connection, events.EventEmitter);\r\n\r\n/**\r\n * Initialize connection.\r\n *\r\n * @protected\r\n * @param {Object} options - Initialization options\r\n * @param {String} [options.instanceUrl] - Salesforce Instance URL (e.g. https://na1.salesforce.com/)\r\n * @param {String} [options.serverUrl] - Salesforce SOAP service endpoint URL (e.g. https://na1.salesforce.com/services/Soap/u/28.0)\r\n * @param {String} [options.accessToken] - Salesforce OAuth2 access token\r\n * @param {String} [options.sessionId] - Salesforce session ID\r\n * @param {String} [options.refreshToken] - Salesforce OAuth2 refresh token\r\n * @param {String|Object} [options.signedRequest] - Salesforce Canvas signed request (Raw Base64 string, JSON string, or deserialized JSON)\r\n * @param {UserInfo} [options.userInfo] - Logged in user information\r\n */\r\nConnection.prototype.initialize = function(options) {\r\n  if (!options.instanceUrl && options.serverUrl) {\r\n    options.instanceUrl = options.serverUrl.split('/').slice(0, 3).join('/');\r\n  }\r\n  this.instanceUrl = options.instanceUrl || options.serverUrl || this.instanceUrl || defaults.instanceUrl;\r\n\r\n  this.accessToken = options.sessionId || options.accessToken || this.accessToken;\r\n  this.refreshToken = options.refreshToken || this.refreshToken;\r\n  if (this.refreshToken && !this._refreshDelegate) {\r\n    throw new Error(\"Refresh token is specified without oauth2 client information or refresh function\");\r\n  }\r\n\r\n  this.signedRequest = options.signedRequest && parseSignedRequest(options.signedRequest);\r\n  if (this.signedRequest) {\r\n    this.accessToken = this.signedRequest.client.oauthToken;\r\n    if (Transport.CanvasTransport.supported) {\r\n      this._transport = new Transport.CanvasTransport(this.signedRequest);\r\n    }\r\n  }\r\n\r\n  if (options.userInfo) {\r\n    this.userInfo = options.userInfo;\r\n  }\r\n\r\n  this.limitInfo = {};\r\n\r\n  this.sobjects = {};\r\n  this.cache.clear();\r\n  this.cache.get('describeGlobal').removeAllListeners('value');\r\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\r\n    if (res.result) {\r\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\r\n      types.forEach(this.sobject, this);\r\n    }\r\n  }, this));\r\n\r\n  if (this.tooling) {\r\n    this.tooling.initialize();\r\n  }\r\n\r\n  this._sessionType = options.sessionId ? \"soap\" : \"oauth2\";\r\n\r\n};\r\n\r\n/** @private **/\r\nfunction oauthRefreshFn(conn, callback) {\r\n  conn.oauth2.refreshToken(conn.refreshToken, function(err, res) {\r\n    if (err) { return callback(err); }\r\n    var userInfo = parseIdUrl(res.id);\r\n    conn.initialize({\r\n      instanceUrl : res.instance_url,\r\n      accessToken : res.access_token,\r\n      userInfo : userInfo\r\n    });\r\n    callback(null, res.access_token, res);\r\n  });\r\n}\r\n\r\n/** @private **/\r\nfunction parseSignedRequest(sr) {\r\n  if (_.isString(sr)) {\r\n    if (sr[0] === '{') { // might be JSON\r\n      return JSON.parse(sr);\r\n    } else { // might be original base64-encoded signed request\r\n      var msg = sr.split('.').pop(); // retrieve latter part\r\n      var json = Buffer.from(msg, 'base64').toString('utf-8');\r\n      return JSON.parse(json);\r\n    }\r\n    return null;\r\n  }\r\n  return sr;\r\n}\r\n\r\n\r\n/** @private **/\r\nConnection.prototype._baseUrl = function() {\r\n  return [ this.instanceUrl, \"services/data\", \"v\" + this.version ].join('/');\r\n};\r\n\r\n/**\r\n * Convert path to absolute url\r\n * @private\r\n */\r\nConnection.prototype._normalizeUrl = function(url) {\r\n  if (url[0] === '/') {\r\n    if (url.indexOf('/services/') === 0) {\r\n      return this.instanceUrl + url;\r\n    } else {\r\n      return this._baseUrl() + url;\r\n    }\r\n  } else {\r\n    return url;\r\n  }\r\n};\r\n\r\n/**\r\n * Send REST API request with given HTTP request info, with connected session information.\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String|Object} request - HTTP request object or URL to GET request\r\n * @param {String} request.method - HTTP method URL to send HTTP request\r\n * @param {String} request.url - URL to send HTTP request\r\n * @param {Object} [request.headers] - HTTP request headers in hash object (key-value)\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.request = function(request, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = null;\r\n  }\r\n  options = options || {};\r\n  var self = this;\r\n\r\n  // if request is simple string, regard it as url in GET method\r\n  if (_.isString(request)) {\r\n    request = { method: 'GET', url: request };\r\n  }\r\n  // if url is given in relative path, prepend base url or instance url before.\r\n  request.url = this._normalizeUrl(request.url);\r\n\r\n  var httpApi = new HttpApi(this, options);\r\n\r\n  // log api usage and its quota\r\n  httpApi.on('response', function(response) {\r\n    if (response.headers && response.headers[\"sforce-limit-info\"]) {\r\n      var apiUsage = response.headers[\"sforce-limit-info\"].match(/api\\-usage=(\\d+)\\/(\\d+)/);\r\n      if (apiUsage) {\r\n        self.limitInfo = {\r\n          apiUsage: {\r\n            used: parseInt(apiUsage[1], 10),\r\n            limit: parseInt(apiUsage[2], 10)\r\n          }\r\n        };\r\n      }\r\n    }\r\n  });\r\n  return httpApi.request(request).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Send HTTP GET request\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String} url - Endpoint URL to request HTTP GET\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.requestGet = function(url, options, callback) {\r\n  var request = {\r\n    method: \"GET\",\r\n    url: url\r\n  };\r\n  return this.request(request, options, callback);\r\n};\r\n\r\n\r\n/**\r\n * Send HTTP POST request with JSON body, with connected session information\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String} url - Endpoint URL to request HTTP POST\r\n * @param {Object} body - Any JS object which can be serialized to JSON\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.requestPost = function(url, body, options, callback) {\r\n  var request = {\r\n    method: \"POST\",\r\n    url: url,\r\n    body: JSON.stringify(body),\r\n    headers: { \"content-type\": \"application/json\" }\r\n  };\r\n  return this.request(request, options, callback);\r\n};\r\n\r\n/**\r\n * Send HTTP PUT request with JSON body, with connected session information\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String} url - Endpoint URL to request HTTP PUT\r\n * @param {Object} body - Any JS object which can be serialized to JSON\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.requestPut = function(url, body, options, callback) {\r\n  var request = {\r\n    method: \"PUT\",\r\n    url: url,\r\n    body: JSON.stringify(body),\r\n    headers: { \"content-type\": \"application/json\" }\r\n  };\r\n  return this.request(request, options, callback);\r\n};\r\n\r\n/**\r\n * Send HTTP PATCH request with JSON body\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String} url - Endpoint URL to request HTTP PATCH\r\n * @param {Object} body - Any JS object which can be serialized to JSON\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.requestPatch = function(url, body, options, callback) {\r\n  var request = {\r\n    method: \"PATCH\",\r\n    url: url,\r\n    body: JSON.stringify(body),\r\n    headers: { \"content-type\": \"application/json\" }\r\n  };\r\n  return this.request(request, options, callback);\r\n};\r\n\r\n/**\r\n * Send HTTP DELETE request\r\n *\r\n * Endpoint URL can be absolute URL ('https://na1.salesforce.com/services/data/v32.0/sobjects/Account/describe')\r\n * , relative path from root ('/services/data/v32.0/sobjects/Account/describe')\r\n * , or relative path from version root ('/sobjects/Account/describe').\r\n *\r\n * @param {String} url - Endpoint URL to request HTTP DELETE\r\n * @param {Object} [options] - HTTP API request options\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nConnection.prototype.requestDelete = function(url, options, callback) {\r\n  var request = {\r\n    method: \"DELETE\",\r\n    url: url\r\n  };\r\n  return this.request(request, options, callback);\r\n};\r\n\r\n\r\n/** @private */\r\nfunction formatDate(date) {\r\n  function pad(number) {\r\n    if (number < 10) {\r\n      return '0' + number;\r\n    }\r\n    return number;\r\n  }\r\n\r\n  return date.getUTCFullYear() +\r\n    '-' + pad(date.getUTCMonth() + 1) +\r\n    '-' + pad(date.getUTCDate()) +\r\n    'T' + pad(date.getUTCHours()) +\r\n    ':' + pad(date.getUTCMinutes()) +\r\n    ':' + pad(date.getUTCSeconds()) +\r\n    '+00:00';\r\n}\r\n\r\n\r\n/** @private **/\r\nfunction parseIdUrl(idUrl) {\r\n  var idUrls = idUrl.split(\"/\");\r\n  var userId = idUrls.pop(), orgId = idUrls.pop();\r\n  return {\r\n    id: userId,\r\n    organizationId: orgId,\r\n    url: idUrl\r\n  };\r\n}\r\n\r\n/**\r\n * @callback Callback\r\n * @type {Function}\r\n * @param {Error} err - Callback error\r\n * @param {T} response - Callback response\r\n * @template T\r\n */\r\n\r\n/**\r\n * @typedef {Object} QueryResult\r\n * @prop {Boolean} done - Flag if the query is fetched all records or not\r\n * @prop {String} [nextRecordsUrl] - URL locator for next record set, (available when done = false)\r\n * @prop {Number} totalSize - Total size for query\r\n * @prop {Array.<Record>} [records] - Array of records fetched\r\n */\r\n\r\n/**\r\n * Execute query by using SOQL\r\n *\r\n * @param {String} soql - SOQL string\r\n * @param {Object} [options] - Query options\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\nConnection.prototype.query = function(soql, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var query = new Query(this, soql, options);\r\n  if (callback) {\r\n    query.run(callback);\r\n  }\r\n  return query;\r\n};\r\n\r\n/**\r\n * Execute query by using SOQL, including deleted records\r\n *\r\n * @param {String} soql - SOQL string\r\n * @param {Object} [options] - Query options\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\nConnection.prototype.queryAll = function(soql, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var query = new Query(this, soql, options);\r\n  query.scanAll(true);\r\n  if (callback) {\r\n    query.run(callback);\r\n  }\r\n  return query;\r\n};\r\n\r\n/**\r\n * Query next record set by using query locator\r\n *\r\n * @param {String} locator - Next record set locator\r\n * @param {Object} [options] - Query options\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in query request\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\nConnection.prototype.queryMore = function(locator, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var query = new Query(this, { locator: locator }, options);\r\n  if (callback) {\r\n    query.run(callback);\r\n  }\r\n  return query;\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._ensureVersion = function(majorVersion) {\r\n  var versions = this.version.split('.');\r\n  return parseInt(versions[0], 10) >= majorVersion;\r\n}\r\n\r\n/** @private */\r\nConnection.prototype._supports = function(feature) {\r\n  switch (feature) {\r\n    case 'sobject-collection':\r\n      return this._ensureVersion(42);\r\n    default:\r\n      return false;\r\n  }\r\n}\r\n\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Array.<String>} [options.fields] - Fetching field names in retrieving record\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\nConnection.prototype.retrieve = function(type, ids, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  return (\r\n    _.isArray(ids) ?\r\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\r\n        this._retrieveMany(type, ids, options) :\r\n        this._retrieveParallel(type, ids, options)) :\r\n      this._retrieveSingle(type, ids, options)\r\n  ).thenCall(callback);\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._retrieveSingle = function(type, id, options) {\r\n  if (!id) {\r\n    return Promise.reject(new Error('Invalid record ID. Specify valid record ID value'));\r\n  }\r\n  var url = [ this._baseUrl(), \"sobjects\", type, id ].join('/');\r\n  if (options.fields) {\r\n    url += '?fields=' + options.fields.join(',');\r\n  }\r\n  return this.request({\r\n    method: 'GET',\r\n    url: url,\r\n    headers: options.headers,\r\n  });\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._retrieveParallel = function(type, ids, options) {\r\n  if (ids.length > this.maxRequest) {\r\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\r\n  }\r\n  var self = this;\r\n  return Promise.all(\r\n    ids.map(function(id) {\r\n      return self._retrieveSingle(type, id, options).catch(function(err) {\r\n        if (options.allOrNone || err.errorCode !== 'NOT_FOUND') {\r\n          throw err;\r\n        }\r\n        return null;\r\n      });\r\n    })\r\n  );\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._retrieveMany = function(type, ids, options) {\r\n  if (ids.length === 0) {\r\n    return Promise.resolve([]);\r\n  }\r\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\", type ].join('/');\r\n  var self = this;\r\n  return (\r\n    options.fields ?\r\n      Promise.resolve(options.fields) :\r\n      new Promise(function(resolve, reject) {\r\n        self.describe$(type, function(err, so) {\r\n          if (err) {\r\n            reject(err);\r\n          } else {\r\n            var fields = so.fields.map(function(field) {\r\n              return field.name;\r\n            });\r\n            resolve(fields);\r\n          }\r\n        });\r\n      })\r\n  ).then(function(fields) {\r\n    return self.request({\r\n      method : 'POST',\r\n      url : url,\r\n      body : JSON.stringify({\r\n        ids : ids,\r\n        fields : fields\r\n      }),\r\n      headers : _.defaults(options.headers || {}, {\r\n        \"Content-Type\" : \"application/json\"\r\n      })\r\n    });\r\n  });\r\n};\r\n\r\n\r\n/**\r\n * @typedef RecordResult\r\n * @prop {Boolean} success - The result is succeessful or not\r\n * @prop {String} [id] - Record ID\r\n * @prop {Array.<Object>} [errors] - Errors (available when success = false)\r\n */\r\n\r\n/** @private */\r\nConnection.prototype._toRecordResult = function(id, err) {\r\n  var error = {\r\n    statusCode: err.errorCode,\r\n    message: err.message\r\n  };\r\n  if (err.content) { error.content = err.content; } // preserve External id duplication message\r\n  if (err.fields) { error.fields = err.fields; } // preserve DML exception occurred fields\r\n  var result = {\r\n    success: false,\r\n    errors: [error]\r\n  };\r\n  if (id) { result.id = id; }\r\n  return result;\r\n};\r\n\r\n/**\r\n * Synonym of Connection#create()\r\n *\r\n * @method Connection#insert\r\n * @param {String} type - SObject Type\r\n * @param {Object|Array.<Object>} records - A record or array of records to create\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method Connection#create\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nConnection.prototype.insert =\r\nConnection.prototype.create = function(type, records, options, callback) {\r\n  if (!_.isString(type)) {\r\n    // reverse order\r\n    callback = options;\r\n    options = records;\r\n    records = type;\r\n    type = null;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  return (\r\n    _.isArray(records) ?\r\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\r\n        this._createMany(type, records, options) :\r\n        this._createParallel(type, records, options)) :\r\n      this._createSingle(type, records, options)\r\n  ).thenCall(callback);\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._createSingle = function(type, record, options) {\r\n  var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\r\n  if (!sobjectType) {\r\n    return Promise.reject(new Error('No SObject Type defined in record'));\r\n  }\r\n  record = _.clone(record);\r\n  delete record.Id;\r\n  delete record.type;\r\n  delete record.attributes;\r\n  var url = [ this._baseUrl(), \"sobjects\", sobjectType ].join('/');\r\n  return this.request({\r\n    method : 'POST',\r\n    url : url,\r\n    body : JSON.stringify(record),\r\n    headers : _.defaults(options.headers || {}, {\r\n      \"Content-Type\" : \"application/json\"\r\n    })\r\n  });\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._createParallel = function(type, records, options) {\r\n  if (records.length > this.maxRequest) {\r\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\r\n  }\r\n  var self = this;\r\n  return Promise.all(\r\n    records.map(function(record) {\r\n      return self._createSingle(type, record, options).catch(function(err) {\r\n        // be aware that allOrNone in parallel mode will not revert the other successful requests\r\n        // it only raises error when met at least one failed request.\r\n        if (options.allOrNone || !err.errorCode) {\r\n          throw err;\r\n        }\r\n        return this._toRecordResult(null, err);\r\n      });\r\n    })\r\n  );\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._createMany = function(type, records, options) {\r\n  if (records.length === 0) {\r\n    return Promise.resolve([]);\r\n  }\r\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\r\n    var self = this;\r\n    return self._createMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\r\n      return self._createMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {\r\n        return rets1.concat(rets2);\r\n      });\r\n    });\r\n  }\r\n  records = _.map(records, function(record) {\r\n    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\r\n    if (!sobjectType) {\r\n      return Promise.reject(new Error('No SObject Type defined in record'));\r\n    }\r\n    record = _.clone(record);\r\n    delete record.Id;\r\n    delete record.type;\r\n    record.attributes = { type : sobjectType };\r\n    return record;\r\n  });\r\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\" ].join('/');\r\n  return this.request({\r\n    method : 'POST',\r\n    url : url,\r\n    body : JSON.stringify({\r\n      allOrNone : options.allOrNone || false,\r\n      records : records\r\n    }),\r\n    headers : _.defaults(options.headers || {}, {\r\n      \"Content-Type\" : \"application/json\"\r\n    })\r\n  });\r\n};\r\n\r\n/**\r\n * Update records\r\n *\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when records goes over the max num of collection API (=200), records are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nConnection.prototype.update = function(type, records, options, callback) {\r\n  if (!_.isString(type)) {\r\n    // reverse order\r\n    callback = options;\r\n    options = records;\r\n    records = type;\r\n    type = null;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  return (\r\n    _.isArray(records) ?\r\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\r\n        this._updateMany(type, records, options) :\r\n        this._updateParallel(type, records, options)) :\r\n      this._updateSingle(type, records, options)\r\n  ).thenCall(callback);\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._updateSingle = function(type, record, options) {\r\n  var id = record.Id;\r\n  if (!id) {\r\n    return Promise.reject(new Error('Record id is not found in record.'));\r\n  }\r\n  var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\r\n  if (!sobjectType) {\r\n    return Promise.reject(new Error('No SObject Type defined in record'));\r\n  }\r\n  record = _.clone(record);\r\n  delete record.Id;\r\n  delete record.type;\r\n  delete record.attributes;\r\n  var url = [ this._baseUrl(), \"sobjects\", sobjectType, id ].join('/');\r\n  return this.request({\r\n    method : 'PATCH',\r\n    url : url,\r\n    body : JSON.stringify(record),\r\n    headers : _.defaults(options.headers || {}, {\r\n      \"Content-Type\" : \"application/json\"\r\n    })\r\n  }, {\r\n    noContentResponse: { id : id, success : true, errors : [] }\r\n  });\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._updateParallel = function(type, records, options) {\r\n  if (records.length > this.maxRequest) {\r\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\r\n  }\r\n  var self = this;\r\n  return Promise.all(\r\n    records.map(function(record) {\r\n      return self._updateSingle(type, record, options).catch(function(err) {\r\n        // be aware that allOrNone in parallel mode will not revert the other successful requests\r\n        // it only raises error when met at least one failed request.\r\n        if (options.allOrNone || !err.errorCode) {\r\n          throw err;\r\n        }\r\n        return this._toRecordResult(record.Id, err);\r\n      });\r\n    })\r\n  );\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._updateMany = function(type, records, options) {\r\n  if (records.length === 0) {\r\n    return Promise.resolve([]);\r\n  }\r\n  if (records.length > MAX_DML_COUNT && options.allowRecursive) {\r\n    var self = this;\r\n    return self._updateMany(type, records.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\r\n      return self._updateMany(type, records.slice(MAX_DML_COUNT), options).then(function(rets2) {\r\n        return rets1.concat(rets2);\r\n      });\r\n    });\r\n  }\r\n  records = _.map(records, function(record) {\r\n    var id = record.Id;\r\n    if (!id) {\r\n      throw new Error('Record id is not found in record.');\r\n    }\r\n    var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\r\n    if (!sobjectType) {\r\n      throw new Error('No SObject Type defined in record');\r\n    }\r\n    record = _.clone(record);\r\n    delete record.Id;\r\n    record.id = id;\r\n    delete record.type;\r\n    record.attributes = { type : sobjectType };\r\n    return record;\r\n  });\r\n  var url = [ this._baseUrl(), \"composite\", \"sobjects\" ].join('/');\r\n  return this.request({\r\n    method : 'PATCH',\r\n    url : url,\r\n    body : JSON.stringify({\r\n      allOrNone : options.allOrNone || false,\r\n      records : records\r\n    }),\r\n    headers : _.defaults(options.headers || {}, {\r\n      \"Content-Type\" : \"application/json\"\r\n    })\r\n  });\r\n};\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nConnection.prototype.upsert = function(type, records, extIdField, options, callback) {\r\n  // You can omit \"type\" argument, when the record includes type information.\r\n  if (!_.isString(type)) {\r\n    // reverse order\r\n    callback = options;\r\n    options = extIdField;\r\n    extIdField = records;\r\n    records = type;\r\n    type = null;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  var self = this;\r\n  var isArray = _.isArray(records);\r\n  records = isArray ? records : [ records ];\r\n  if (records.length > this.maxRequest) {\r\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\")).thenCall(callback);\r\n  }\r\n  return Promise.all(\r\n    _.map(records, function(record) {\r\n      var sobjectType = type || (record.attributes && record.attributes.type) || record.type;\r\n      var extId = record[extIdField];\r\n      record = _.clone(record);\r\n      delete record[extIdField];\r\n      delete record.type;\r\n      delete record.attributes;\r\n\r\n      var url = [ self._baseUrl(), \"sobjects\", sobjectType, extIdField, extId ].join('/');\r\n      return self.request({\r\n        method : 'PATCH',\r\n        url : url,\r\n        body : JSON.stringify(record),\r\n        headers : _.defaults(options.headers || {}, {\r\n          \"Content-Type\" : \"application/json\"\r\n        })\r\n      }, {\r\n        noContentResponse: { success : true, errors : [] }\r\n      })\r\n      .catch(function(err) {\r\n        // be aware that `allOrNone` option in upsert method will not revert the other successful requests\r\n        // it only raises error when met at least one failed request.\r\n        if (!isArray || options.allOrNone || !err.errorCode) { throw err; }\r\n        return self._toRecordResult(null, err);\r\n      })\r\n    })\r\n  ).then(function(results) {\r\n    return !isArray && _.isArray(results) ? results[0] : results;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Connection#destroy()\r\n *\r\n * @method Connection#delete\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Connection#destroy()\r\n *\r\n * @method Connection#del\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method Connection#destroy\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Object} [options] - Options for rest api.\r\n * @param {Boolean} [options.allOrNone] - If true, any failed records in a call cause all changes for the call to be rolled back\r\n * @param {Boolean} [options.allowRecursive] - If true, when ids goes over the max num of collection API (=200), ids are divided into several chunks and requested recursively.\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in retrieve request\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\nConnection.prototype[\"delete\"] =\r\nConnection.prototype.del =\r\nConnection.prototype.destroy = function(type, ids, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  return (\r\n    _.isArray(ids) ?\r\n      (this._supports('sobject-collection') ? // check whether SObject collection API is supported\r\n        this._destroyMany(type, ids, options) :\r\n        this._destroyParallel(type, ids, options)) :\r\n      this._destroySingle(type, ids, options)\r\n  ).thenCall(callback);\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._destroySingle = function(type, id, options) {\r\n  var url = [ this._baseUrl(), \"sobjects\", type, id ].join('/');\r\n  return this.request({\r\n    method : 'DELETE',\r\n    url : url,\r\n    headers: options.headers || null\r\n  }, {\r\n    noContentResponse: { id : id, success : true, errors : [] }\r\n  });\r\n};\r\n\r\n/** @private */\r\nConnection.prototype._destroyParallel = function(type, ids, options) {\r\n  if (ids.length > this.maxRequest) {\r\n    return Promise.reject(new Error(\"Exceeded max limit of concurrent call\"));\r\n  }\r\n  var self = this;\r\n  return Promise.all(\r\n    ids.map(function(id) {\r\n      return self._destroySingle(type, id, options).catch(function(err) {\r\n        // be aware that `allOrNone` option in parallel mode will not revert the other successful requests\r\n        // it only raises error when met at least one failed request.\r\n        if (options.allOrNone || !err.errorCode) {\r\n          throw err;\r\n        }\r\n        return this._toRecordResult(id, err);\r\n      });\r\n    })\r\n  );\r\n};\r\n\r\n\r\n/** @private */\r\nConnection.prototype._destroyMany = function(type, ids, options) {\r\n  if (ids.length === 0) {\r\n    return Promise.resolve([]);\r\n  }\r\n  if (ids.length > MAX_DML_COUNT && options.allowRecursive) {\r\n    var self = this;\r\n    return self._destroyMany(type, ids.slice(0, MAX_DML_COUNT), options).then(function(rets1) {\r\n      return self._destroyMany(type, ids.slice(MAX_DML_COUNT), options).then(function(rets2) {\r\n        return rets1.concat(rets2);\r\n      });\r\n    });\r\n  }\r\n  var url = [ this._baseUrl(), \"composite\", \"sobjects?ids=\" ].join('/') + ids.join(',');\r\n  if (options.allOrNone) {\r\n    url += '&allOrNone=true';\r\n  }\r\n  return this.request({\r\n    method : 'DELETE',\r\n    url : url,\r\n    headers: options.headers || null\r\n  });\r\n};\r\n\r\n/**\r\n * Execute search by SOSL\r\n *\r\n * @param {String} sosl - SOSL string\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\nConnection.prototype.search = function(sosl, callback) {\r\n  var url = this._baseUrl() + \"/search?q=\" + encodeURIComponent(sosl);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Result returned by describeSObject call\r\n *\r\n * @typedef {Object} DescribeSObjectResult\r\n */\r\n/**\r\n * Parameter for describeSObject call\r\n * \r\n * @typedef {Object} DescribeSObjectOptions\r\n */\r\n/**\r\n * Synonym of Connection#describe()\r\n *\r\n * @method Connection#describeSObject\r\n * @param {String|DescribeSObjectOptions} type - SObject Type or options object\r\n * @param {String} type.type - The name of the SObject\r\n * @param {String} type.ifModifiedSince - Date value for If-Modified-Since header; undefined resolved if not modified after this date\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @method Connection#describe\r\n * @param {String|DescribeSObjectOptions} type - SObject Type or options object\r\n * @param {String} type.type - The name of the SObject\r\n * @param {String} type.ifModifiedSince - Date value for If-Modified-Since header; undefined resolved if not modified after this date\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\nConnection.prototype.describe =\r\nConnection.prototype.describeSObject = function(type, callback) {\r\n  var name = type.type ? type.type : type;\r\n  var url = [ this._baseUrl(), \"sobjects\", name, \"describe\" ].join('/');\r\n  var headers = type.ifModifiedSince \r\n    ? { 'If-Modified-Since': type.ifModifiedSince } \r\n    : {};\r\n  return this.request({\r\n    method: 'GET',\r\n    url: url,\r\n    headers: headers\r\n  }).then(function (resp) {\r\n    if (resp === '') {\r\n      return Promise.resolve(undefined);\r\n    } else {\r\n      return Promise.resolve(resp);\r\n    }\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Result returned by batchDescribeSObjects call\r\n *\r\n * @typedef {Object[]} DescribeSObjectResult\r\n */\r\n/**\r\n * Parameter for describeSObject call\r\n * \r\n * @typedef {Object} BatchDescribeSObjectOptions\r\n */\r\n/**\r\n * Synonym of Connection#batchDescribe()\r\n *\r\n * @method Connection#batchDescribeSObjects\r\n * @param {BatchDescribeSObjectOptions} options - options for function\r\n * @param {String[]} options.types - names of objects to fetch\r\n * @param {Boolean} options.autofetch - whether to automatically fetch metadata for large numbers of \r\n *                         types (one batch request returns a maximum of 25 results); when true, will make \r\n *                         subsequent requests until all object metadata is fetched; when false (default), \r\n *                         will make one batch request for maximum of 25 results\r\n * @param {number} options.maxConcurrentRequests - maximum number of concurrent requests sent to the org; \r\n *                         default and maximum is 15\r\n * @param {Callback.<DescribeSObjectResult[]>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult[]>}\r\n */\r\n/**\r\n * Batch describe SObject metadata\r\n *\r\n * @method Connection#batchDescribe\r\n * @param {BatchDescribeSObjectOptions} options - options for function\r\n * @param {String[]} options.types - names of objects to fetch\r\n * @param {Boolean} options.autofetch - whether to automatically fetch metadata for large numbers of \r\n *                         types (one batch request returns a maximum of 25 results); when true, will make \r\n *                         subsequent requests until all object metadata is fetched; when false (default), \r\n *                         will make one batch request for maximum of 25 results\r\n * @param {number} options.maxConcurrentRequests - maximum number of concurrent requests sent to the org; \r\n *                         default and maximum is 15\r\n * @param {Callback.<DescribeSObjectResult[]>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult[]>}\r\n */\r\nConnection.prototype.batchDescribe = Connection.prototype.batchDescribeSObjects = function (\r\n  options,\r\n  callback\r\n) {\r\n  var self = this;\r\n  var types = options.types;\r\n  var autofetch = options.autofetch || false;\r\n  var maxConcurrentRequests = Math.min((options.maxConcurrentRequests || 15), 15);\r\n  var batches = [];\r\n  do {\r\n    var batch = types.length > MAX_BATCH_REQUESTS ? types.slice(0, MAX_BATCH_REQUESTS) : types;\r\n    batches.push(batch);\r\n    types = types.length > MAX_BATCH_REQUESTS ? types.slice(MAX_BATCH_REQUESTS) : [];\r\n  } while (types.length > 0 && autofetch);\r\n  var requestBatches = [];\r\n  do {\r\n    var requestBatch = batches.length > maxConcurrentRequests ? batches.slice(0, maxConcurrentRequests) : batches;\r\n    requestBatches.push(requestBatch);\r\n    batches = batches.length > maxConcurrentRequests ? batches.slice(maxConcurrentRequests) : [];\r\n  } while (batches.length > 0);\r\n  return self.doBatchDescribeRequestBatches(requestBatches)\r\n    .thenCall(callback);\r\n};\r\n\r\nConnection.prototype.doBatchDescribeRequestBatches = function(requestBatches) {\r\n  // make each batch of requests sequentially to avoid org limits of max concurrent requests\r\n  var self = this;\r\n  var sobjects = [];\r\n  var firstBatch = requestBatches.shift();\r\n  return self.doBatchOfBatchDescribeRequests(firstBatch).then(\r\n    function (sobjectArray) {\r\n      sobjectArray.forEach(function (sobject) { sobjects.push(sobject); });\r\n      if (requestBatches.length > 0) {\r\n        return self.doBatchDescribeRequestBatches(requestBatches).then(\r\n          function (results) {\r\n            results.forEach(function (result) { sobjects.push(result); });\r\n            return Promise.resolve(sobjects);\r\n          }\r\n        )\r\n      } else {\r\n        return Promise.resolve(sobjects);\r\n      }\r\n    }\r\n  )\r\n}\r\n\r\n/** private */\r\nConnection.prototype.doBatchOfBatchDescribeRequests = function(requestBatch) {\r\n  // make up to maxConcurrentRequest requests in parallel\r\n  var self = this;\r\n  return Promise.all(\r\n    requestBatch.map(function (batch) { return self.doBatchDescribeRequest(batch); } )\r\n  ).then(function (results) {\r\n    var sobjects = [];\r\n    results.forEach(function (sobjectArray) {\r\n      sobjectArray.forEach(function (sobject) { sobjects.push(sobject); })\r\n    });\r\n    return Promise.resolve(sobjects);\r\n});\r\n}\r\n\r\n/** private */\r\nConnection.prototype.doBatchDescribeRequest = function(types) {\r\n  var self = this;\r\n  var sobjects = [];\r\n  var url = [self._baseUrl(), \"composite/batch\"].join(\"/\");\r\n  var version = \"v\" + self.version;\r\n  var batchRequests = [];\r\n  types.forEach(function (type) {\r\n    batchRequests.push({\r\n      method: \"GET\",\r\n      url: [version, \"sobjects\", type, \"describe\"].join(\"/\")\r\n    });\r\n  });\r\n  return this.request({\r\n    method: \"POST\",\r\n    url: url,\r\n    body: JSON.stringify({ batchRequests: batchRequests }),\r\n    headers: {\r\n      \"Content-Type\": \"application/json\"\r\n    }\r\n  }).then(function (response) {\r\n    if (response.results) {\r\n      var i = 0;\r\n      for (var i = 0; i < response.results.length; i++) {\r\n        var subResp = response.results[i];\r\n        if (Array.isArray(subResp.result)) {\r\n          if (subResp.result[0].errorCode && subResp.result[0].message) {\r\n            this._logger.error(\r\n              'Error: ' + subResp.result[0].errorCode + ' ' +  \r\n              subResp.result[0].message + ' - ' + typesToFetch[i]\r\n            );\r\n          }\r\n        } else {\r\n          sobjects.push(subResp.result);\r\n        }\r\n      }\r\n    }\r\n    return Promise.resolve(sobjects);\r\n  }); \r\n}\r\n\r\n/**\r\n * Result returned by describeGlobal call\r\n *\r\n * @typedef {Object} DescribeGlobalResult\r\n */\r\n/**\r\n * Describe global SObjects\r\n *\r\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeGlobalResult>}\r\n */\r\nConnection.prototype.describeGlobal = function(callback) {\r\n  var url = this._baseUrl() + \"/sobjects\";\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Get SObject instance\r\n *\r\n * @param {String} type - SObject Type\r\n * @returns {SObject}\r\n */\r\nConnection.prototype.sobject = function(type) {\r\n  this.sobjects = this.sobjects || {};\r\n  var sobject = this.sobjects[type] =\r\n    this.sobjects[type] || new SObject(this, type);\r\n  return sobject;\r\n};\r\n\r\n/**\r\n * Get identity information of current user\r\n *\r\n * @param {Object} [options] - Identity call options\r\n * @param {Object} [options.headers] - Additional HTTP request headers sent in identity request\r\n * @param {Callback.<IdentityInfo>} [callback] - Callback function\r\n * @returns {Promise.<IdentityInfo>}\r\n */\r\nConnection.prototype.identity = function(options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  options = options || {};\r\n  var self = this;\r\n  var idUrl = this.userInfo && this.userInfo.url;\r\n  return Promise.resolve(\r\n    idUrl ?\r\n    { identity: idUrl } :\r\n    this.request({ method: 'GET', url: this._baseUrl(), headers: options.headers })\r\n  ).then(function(res) {\r\n    var url = res.identity;\r\n    return self.request({ method: 'GET', url: url });\r\n  }).then(function(res) {\r\n    self.userInfo = {\r\n      id: res.user_id,\r\n      organizationId: res.organization_id,\r\n      url: res.id\r\n    };\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef UserInfo\r\n * @prop {String} id - User ID\r\n * @prop {String} organizationId - Organization ID\r\n * @prop {String} url - Identity URL of the user\r\n */\r\n\r\n/**\r\n * Authorize (using oauth2 web server flow)\r\n *\r\n * @param {String} code - Authorization code\r\n * @param {Object} [params] - Optional parameters to send in token retrieval\r\n * @param {String} [params.code_verifier] - Code verifier value (RFC 7636 - Proof Key of Code Exchange)\r\n * @param {Callback.<UserInfo>} [callback] - Callback function\r\n * @returns {Promise.<UserInfo>}\r\n */\r\nConnection.prototype.authorize = function(code, params, callback) {\r\n  if (typeof params === 'function') {\r\n    callback = params;\r\n    params = {};\r\n  }\r\n  var self = this;\r\n  var logger = this._logger;\r\n\r\n  return this.oauth2.requestToken(code, params).then(function(res) {\r\n    var userInfo = parseIdUrl(res.id);\r\n    self.initialize({\r\n      instanceUrl : res.instance_url,\r\n      accessToken : res.access_token,\r\n      refreshToken : res.refresh_token,\r\n      userInfo: userInfo\r\n    });\r\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\r\n    return userInfo;\r\n\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n\r\n/**\r\n * Login to Salesforce\r\n *\r\n * @param {String} username - Salesforce username\r\n * @param {String} password - Salesforce password (and security token, if required)\r\n * @param {Callback.<UserInfo>} [callback] - Callback function\r\n * @returns {Promise.<UserInfo>}\r\n */\r\nConnection.prototype.login = function(username, password, callback) {\r\n  // register refreshDelegate for session expiration\r\n  this._refreshDelegate = new HttpApi.SessionRefreshDelegate(this, createUsernamePasswordRefreshFn(username, password));\r\n  if (this.oauth2 && this.oauth2.clientId && this.oauth2.clientSecret) {\r\n    return this.loginByOAuth2(username, password, callback);\r\n  } else {\r\n    return this.loginBySoap(username, password, callback);\r\n  }\r\n};\r\n\r\n/** @private **/\r\nfunction createUsernamePasswordRefreshFn(username, password) {\r\n  return function(conn, callback) {\r\n    conn.login(username, password, function(err) {\r\n      if (err) { return callback(err); }\r\n      callback(null, conn.accessToken);\r\n    });\r\n  };\r\n}\r\n\r\n/**\r\n * Login by OAuth2 username & password flow\r\n *\r\n * @param {String} username - Salesforce username\r\n * @param {String} password - Salesforce password (and security token, if required)\r\n * @param {Callback.<UserInfo>} [callback] - Callback function\r\n * @returns {Promise.<UserInfo>}\r\n */\r\nConnection.prototype.loginByOAuth2 = function(username, password, callback) {\r\n  var self = this;\r\n  var logger = this._logger;\r\n  return this.oauth2.authenticate(username, password).then(function(res) {\r\n    var userInfo = parseIdUrl(res.id);\r\n    self.initialize({\r\n      instanceUrl : res.instance_url,\r\n      accessToken : res.access_token,\r\n      userInfo: userInfo\r\n    });\r\n    logger.debug(\"<login> completed. user id = \" + userInfo.id + \", org id = \" + userInfo.organizationId);\r\n    return userInfo;\r\n\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction esc(str) {\r\n  return str && String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;')\r\n                           .replace(/>/g, '&gt;').replace(/\"/g, '&quot;');\r\n}\r\n\r\n/**\r\n * Login by SOAP web service API\r\n *\r\n * @param {String} username - Salesforce username\r\n * @param {String} password - Salesforce password (and security token, if required)\r\n * @param {Callback.<UserInfo>} [callback] - Callback function\r\n * @returns {Promise.<UserInfo>}\r\n */\r\nConnection.prototype.loginBySoap = function(username, password, callback) {\r\n  var self = this;\r\n  var logger = this._logger;\r\n  var body = [\r\n    '<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">',\r\n      '<se:Header/>',\r\n      '<se:Body>',\r\n        '<login xmlns=\"urn:partner.soap.sforce.com\">',\r\n          '<username>' + esc(username) + '</username>',\r\n          '<password>' + esc(password) + '</password>',\r\n        '</login>',\r\n      '</se:Body>',\r\n    '</se:Envelope>'\r\n  ].join('');\r\n\r\n  var soapLoginEndpoint = [ this.loginUrl, \"services/Soap/u\", this.version ].join('/');\r\n\r\n  return this._transport.httpRequest({\r\n    method : 'POST',\r\n    url : soapLoginEndpoint,\r\n    body : body,\r\n    headers : {\r\n      \"Content-Type\" : \"text/xml\",\r\n      \"SOAPAction\" : '\"\"'\r\n    }\r\n  }).then(function(response) {\r\n    var m;\r\n    if (response.statusCode >= 400) {\r\n      m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\r\n      var faultstring = m && m[1];\r\n      throw new Error(faultstring || response.body);\r\n    }\r\n    logger.debug(\"SOAP response = \" + response.body);\r\n    m = response.body.match(/<serverUrl>([^<]+)<\\/serverUrl>/);\r\n    var serverUrl = m && m[1];\r\n    m = response.body.match(/<sessionId>([^<]+)<\\/sessionId>/);\r\n    var sessionId = m && m[1];\r\n    m = response.body.match(/<userId>([^<]+)<\\/userId>/);\r\n    var userId = m && m[1];\r\n    m = response.body.match(/<organizationId>([^<]+)<\\/organizationId>/);\r\n    var orgId = m && m[1];\r\n    var idUrl = soapLoginEndpoint.split('/').slice(0, 3).join('/');\r\n    idUrl += \"/id/\" + orgId + \"/\" + userId;\r\n    var userInfo = {\r\n      id: userId,\r\n      organizationId: orgId,\r\n      url: idUrl\r\n    };\r\n    self.initialize({\r\n      serverUrl: serverUrl.split('/').slice(0, 3).join('/'),\r\n      sessionId: sessionId,\r\n      userInfo: userInfo\r\n    });\r\n    logger.debug(\"<login> completed. user id = \" + userId + \", org id = \" + orgId);\r\n    return userInfo;\r\n\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n/**\r\n * Logout the current session \r\n *\r\n * @param {Boolean} [revoke] - Revokes API Access if set to true\r\n * @param {Callback.<undefined>} [callback] - Callback function\r\n * @returns {Promise.<undefined>}\r\n */\r\nConnection.prototype.logout = function(revoke, callback) {\r\n  if (typeof revoke === 'function') {\r\n    callback = revoke;\r\n    revoke = false;\r\n  }\r\n\r\n  if (this._sessionType === \"oauth2\") {\r\n    return this.logoutByOAuth2(revoke, callback);\r\n  } else {\r\n    return this.logoutBySoap(revoke, callback);\r\n  }\r\n};\r\n\r\n/**\r\n * Logout the current session by revoking access token via OAuth2 session revoke\r\n *\r\n * @param {Boolean} [revoke] - Revokes API Access if set to true\r\n * @param {Callback.<undefined>} [callback] - Callback function\r\n * @returns {Promise.<undefined>}\r\n */\r\nConnection.prototype.logoutByOAuth2 = function(revoke, callback) {\r\n  if (typeof revoke === 'function') {\r\n    callback = revoke;\r\n    revoke = false;\r\n  }\r\n  var self = this;\r\n  var logger = this._logger;\r\n\r\n  return this.oauth2.revokeToken(revoke ? this.refreshToken : this.accessToken).then(function() {\r\n    // Destroy the session bound to this connection\r\n    self.accessToken = null;\r\n    self.userInfo = null;\r\n    self.refreshToken = null;\r\n    self.instanceUrl = null;\r\n    self.cache.clear();\r\n\r\n    // nothing useful returned by logout API, just return\r\n    return undefined;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Logout the session by using SOAP web service API\r\n *\r\n * @param {Boolean} [revoke] - Revokes API Access if set to true\r\n * @param {Callback.<undefined>} [callback] - Callback function\r\n * @returns {Promise.<undefined>}\r\n */\r\nConnection.prototype.logoutBySoap = function(revoke, callback) {\r\n  if (typeof revoke === 'function') {\r\n    callback = revoke;\r\n    revoke = false;\r\n  }\r\n  var self = this;\r\n  var logger = this._logger;\r\n\r\n  var body = [\r\n    '<se:Envelope xmlns:se=\"http://schemas.xmlsoap.org/soap/envelope/\">',\r\n      '<se:Header>',\r\n        '<SessionHeader xmlns=\"urn:partner.soap.sforce.com\">',\r\n          '<sessionId>' + esc(revoke ? this.refreshToken : this.accessToken) + '</sessionId>',\r\n        '</SessionHeader>',\r\n      '</se:Header>',\r\n      '<se:Body>',\r\n        '<logout xmlns=\"urn:partner.soap.sforce.com\"/>',\r\n      '</se:Body>',\r\n    '</se:Envelope>'\r\n  ].join('');\r\n\r\n  return this._transport.httpRequest({\r\n    method : 'POST',\r\n    url : [ this.instanceUrl, \"services/Soap/u\", this.version ].join('/'),\r\n    body : body,\r\n    headers : {\r\n      \"Content-Type\" : \"text/xml\",\r\n      \"SOAPAction\" : '\"\"'\r\n    }\r\n  }).then(function(response) {\r\n    logger.debug(\"SOAP statusCode = \" + response.statusCode + \", response = \" + response.body);\r\n    if (response.statusCode >= 400) {\r\n      var m = response.body.match(/<faultstring>([^<]+)<\\/faultstring>/);\r\n      var faultstring = m && m[1];\r\n      throw new Error(faultstring || response.body);\r\n    }\r\n\r\n    // Destroy the session bound to this connection\r\n    self.accessToken = null;\r\n    self.userInfo = null;\r\n    self.refreshToken = null;\r\n    self.instanceUrl = null;\r\n    self.cache.clear();\r\n\r\n    // nothing useful returned by logout API, just return\r\n    return undefined;\r\n\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * List recently viewed records\r\n *\r\n * @param {String} [type] - SObject type\r\n * @param {Number} [limit] - Limit num to fetch\r\n * @param {Callback.<Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>>}\r\n */\r\nConnection.prototype.recent = function(type, limit, callback) {\r\n  if (!_.isString(type)) {\r\n    callback = limit;\r\n    limit = type;\r\n    type = undefined;\r\n  }\r\n  if (!_.isNumber(limit)) {\r\n    callback = limit;\r\n    limit = undefined;\r\n  }\r\n  var url;\r\n  if (type) {\r\n    url = [ this._baseUrl(), \"sobjects\", type ].join('/');\r\n    return this.request(url).then(function(res) {\r\n      return limit ? res.recentItems.slice(0, limit) : res.recentItems;\r\n    }).thenCall(callback);\r\n  } else {\r\n    url = this._baseUrl() + \"/recent\";\r\n    if (limit) {\r\n      url += \"?limit=\" + limit;\r\n    }\r\n    return this.request(url).thenCall(callback);\r\n  }\r\n\r\n};\r\n\r\n/**\r\n * @typedef {Object} UpdatedRecordsInfo\r\n * @prop {String} latestDateCovered - The timestamp of the last date covered.\r\n * @prop {Array.<String>} ids - Updated record IDs.\r\n */\r\n\r\n/**\r\n * Retrieve updated records\r\n *\r\n * @param {String} type - SObject Type\r\n * @param {String|Date} start - start date or string representing the start of the interval\r\n * @param {String|Date} end - start date or string representing the end of the interval must be > start\r\n * @param {Callback.<UpdatedRecordsInfo>} [callback] - Callback function\r\n * @returns {Promise.<UpdatedRecordsInfo>}\r\n */\r\nConnection.prototype.updated = function (type, start, end, callback) {\r\n  var url = [ this._baseUrl(), \"sobjects\", type, \"updated\" ].join('/');\r\n\r\n  if (typeof start === 'string') {\r\n    start = new Date(start);\r\n  }\r\n\r\n  if (start instanceof Date) {\r\n    start = formatDate(start);\r\n  }\r\n\r\n  if (start) {\r\n    url += \"?start=\" + encodeURIComponent(start);\r\n  }\r\n\r\n  if (typeof end === 'string') {\r\n    end = new Date(end);\r\n  }\r\n\r\n  if (end instanceof Date) {\r\n    end = formatDate(end);\r\n  }\r\n\r\n  if (end) {\r\n    url += \"&end=\" + encodeURIComponent(end);\r\n  }\r\n\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} DeletedRecordsInfo\r\n * @prop {String} earliestDateAvailable - The timestamp of the earliest date available\r\n * @prop {String} latestDateCovered - The timestamp of the last date covered\r\n * @prop {Array.<Object>} deletedRecords - Updated records\r\n * @prop {String} deletedRecords.id - Record ID\r\n * @prop {String} deletedRecords.deletedDate - The timestamp when this record was deleted\r\n */\r\n\r\n/**\r\n * Retrieve deleted records\r\n *\r\n * @param {String} type - SObject Type\r\n * @param {String|Date} start - start date or string representing the start of the interval\r\n * @param {String|Date} end - start date or string representing the end of the interval\r\n * @param {Callback.<DeletedRecordsInfo>} [callback] - Callback function\r\n * @returns {Promise.<DeletedRecordsInfo>}\r\n */\r\nConnection.prototype.deleted = function (type, start, end, callback) {\r\n  var url = [ this._baseUrl(), \"sobjects\", type, \"deleted\" ].join('/');\r\n\r\n  if (typeof start === 'string') {\r\n    start = new Date(start);\r\n  }\r\n\r\n  if (start instanceof Date) {\r\n    start = formatDate(start);\r\n  }\r\n\r\n  if (start) {\r\n    url += \"?start=\" + encodeURIComponent(start);\r\n  }\r\n\r\n  if (typeof end === 'string') {\r\n    end = new Date(end);\r\n  }\r\n\r\n  if (end instanceof Date) {\r\n    end = formatDate(end);\r\n  }\r\n\r\n  if (end) {\r\n    url += \"&end=\" + encodeURIComponent(end);\r\n  }\r\n\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} TabsInfo - See the API document for detail structure\r\n */\r\n\r\n/**\r\n * Returns a list of all tabs\r\n *\r\n * @param {Callback.<TabsInfo>} [callback] - Callback function\r\n * @returns {Promise.<TabsInfo>}\r\n */\r\nConnection.prototype.tabs = function(callback) {\r\n  var url = [ this._baseUrl(), \"tabs\" ].join('/');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} LimitsInfo - See the API document for detail structure\r\n */\r\n\r\n/**\r\n * Returns curren system limit in the organization\r\n *\r\n * @param {Callback.<LimitsInfo>} [callback] - Callback function\r\n * @returns {Promise.<LimitsInfo>}\r\n */\r\nConnection.prototype.limits = function(callback) {\r\n  var url = [ this._baseUrl(), \"limits\" ].join('/');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} ThemeInfo - See the API document for detail structure\r\n */\r\n\r\n/**\r\n * Returns a theme info\r\n *\r\n * @param {Callback.<ThemeInfo>} [callback] - Callback function\r\n * @returns {Promise.<ThemeInfo>}\r\n */\r\nConnection.prototype.theme = function(callback) {\r\n  var url = [ this._baseUrl(), \"theme\" ].join('/');\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Returns all registered global quick actions\r\n *\r\n * @param {Callback.<Array.<QuickAction~QuickActionInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<QuickAction~QuickActionInfo>>}\r\n */\r\nConnection.prototype.quickActions = function(callback) {\r\n  return this.request(\"/quickActions\").thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get reference for specified global quick aciton\r\n *\r\n * @param {String} actionName - Name of the global quick action\r\n * @returns {QuickAction}\r\n */\r\nConnection.prototype.quickAction = function(actionName) {\r\n  return new QuickAction(this, \"/quickActions/\" + actionName);\r\n};\r\n","/**\r\n * @file Manages method call to SOAP endpoint\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    _ = require('lodash/core'),\r\n    xml2js = require('xml2js'),\r\n    HttpApi = require('./http-api');\r\n\r\n\r\n/**\r\n * Class for SOAP endpoint of Salesforce\r\n *\r\n * @protected\r\n * @class\r\n * @constructor\r\n * @param {Connection} conn - Connection instance\r\n * @param {Object} options - SOAP endpoint setting options\r\n * @param {String} options.endpointUrl - SOAP endpoint URL\r\n * @param {String} [options.xmlns] - XML namespace for method call (default is \"urn:partner.soap.sforce.com\")\r\n */\r\nvar SOAP = module.exports = function(conn, options) {\r\n  SOAP.super_.apply(this, arguments);\r\n  this._endpointUrl = options.endpointUrl;\r\n  this._xmlns = options.xmlns || 'urn:partner.soap.sforce.com';\r\n};\r\n\r\ninherits(SOAP, HttpApi);\r\n\r\n/**\r\n * Invoke SOAP call using method and arguments\r\n *\r\n * @param {String} method - Method name\r\n * @param {Object} args - Arguments for the method call\r\n * @param {Object} [schema] - Schema definition of response message\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nSOAP.prototype.invoke = function(method, args, schema, callback) {\r\n  if (typeof schema === 'function') {\r\n    callback = schema;\r\n    schema = null;\r\n  }\r\n  var message = {};\r\n  message[method] = args;\r\n  return this.request({\r\n    method: 'POST',\r\n    url: this._endpointUrl,\r\n    headers: {\r\n      'Content-Type': 'text/xml',\r\n      'SOAPAction': '\"\"'\r\n    },\r\n    message: message\r\n  }).then(function(res) {\r\n    return schema ? convertType(res, schema) : res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/* @private */\r\nfunction convertType(value, schema) {\r\n  if (_.isArray(value)) {\r\n    return value.map(function(v) {\r\n      return convertType(v, schema && schema[0])\r\n    });\r\n  } else if (_.isObject(value)) {\r\n    if (value.$ && value.$['xsi:nil'] === 'true') {\r\n      return null;\r\n    } else if (_.isArray(schema)) {\r\n      return [ convertType(value, schema[0]) ];\r\n    } else {\r\n      var o = {};\r\n      for (var key in value) {\r\n        o[key] = convertType(value[key], schema && schema[key]);\r\n      }\r\n      return o;\r\n    }\r\n  } else {\r\n    if (_.isArray(schema)) {\r\n      return [ convertType(value, schema[0]) ];\r\n    } else if (_.isObject(schema)) {\r\n      return {};\r\n    } else {\r\n      switch(schema) {\r\n        case 'string':\r\n          return String(value);\r\n        case 'number':\r\n          return Number(value);\r\n        case 'boolean':\r\n          return value === 'true';\r\n        default:\r\n          return value;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n/** @override **/\r\nSOAP.prototype.beforeSend = function(request) {\r\n  request.body = this._createEnvelope(request.message);\r\n};\r\n\r\n/** @override **/\r\nSOAP.prototype.isSessionExpired = function(response) {\r\n  return response.statusCode === 500 &&\r\n    /<faultcode>[a-zA-Z]+:INVALID_SESSION_ID<\\/faultcode>/.test(response.body);\r\n};\r\n\r\n/** @override **/\r\nSOAP.prototype.parseError = function(body) {\r\n  var error = lookupValue(body, [ /:Envelope$/, /:Body$/, /:Fault$/ ]);\r\n  return {\r\n    errorCode: error.faultcode,\r\n    message: error.faultstring\r\n  };\r\n};\r\n\r\n/** @override **/\r\nSOAP.prototype.getResponseBody = function(response) {\r\n  var body = SOAP.super_.prototype.getResponseBody.call(this, response);\r\n  return lookupValue(body, [ /:Envelope$/, /:Body$/, /.+/ ]);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction lookupValue(obj, propRegExps) {\r\n  var regexp = propRegExps.shift();\r\n  if (!regexp) {\r\n    return obj;\r\n  }\r\n  else {\r\n    for (var prop in obj) {\r\n      if (regexp.test(prop)) {\r\n        return lookupValue(obj[prop], propRegExps);\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nfunction toXML(name, value) {\r\n  if (_.isObject(name)) {\r\n    value = name;\r\n    name = null;\r\n  }\r\n  if (_.isArray(value)) {\r\n    return _.map(value, function(v) { return toXML(name, v); }).join('');\r\n  } else {\r\n    var attrs = [];\r\n    var elems = [];\r\n    if (_.isObject(value)) {\r\n      for (var k in value) {\r\n        var v = value[k];\r\n        if (k[0] === '@') {\r\n          k = k.substring(1);\r\n          attrs.push(k + '=\"' + v + '\"');\r\n        } else {\r\n          elems.push(toXML(k, v));\r\n        }\r\n      }\r\n      value = elems.join('');\r\n    } else {\r\n      value = String(value)\r\n        .replace(/&/g, '&amp;')\r\n        .replace(/</g, '&lt;')\r\n        .replace(/>/g, '&gt;')\r\n        .replace(/\"/g, '&quot;')\r\n        .replace(/'/g, '&apos;');\r\n    }\r\n    var startTag = name ? '<' + name + (attrs.length > 0 ? ' ' + attrs.join(' ') : '') + '>' : '';\r\n    var endTag = name ? '</' + name + '>' : '';\r\n    return  startTag + value + endTag;\r\n  }\r\n}\r\n\r\n/**\r\n * @private\r\n */\r\nSOAP.prototype._createEnvelope = function(message) {\r\n  var header = {};\r\n  var conn = this._conn;\r\n  if (conn.accessToken) {\r\n    header.SessionHeader = { sessionId: this._conn.accessToken };\r\n  }\r\n  if (conn.callOptions) {\r\n    header.CallOptions = conn.callOptions;\r\n  }\r\n  return [\r\n    '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n    '<soapenv:Envelope xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"',\r\n    ' xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"',\r\n    ' xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">',\r\n    '<soapenv:Header xmlns=\"' + this._xmlns + '\">',\r\n    toXML(header),\r\n    '</soapenv:Header>',\r\n    '<soapenv:Body xmlns=\"' + this._xmlns + '\">',\r\n    toXML(message),\r\n    '</soapenv:Body>',\r\n    '</soapenv:Envelope>'\r\n  ].join('');\r\n};\r\n","// This file content is dynamically created in build script\r\n\"use strict\";\r\nmodule.exports = {\r\n  'inherits': require('inherits'),\r\n  'util': require('util'),\r\n  'events': require('events'),\r\n  'lodash/core': require('lodash/core'),\r\n  'readable-stream': require('readable-stream'),\r\n  'multistream': require('multistream'),\r\n  './cache': require('./cache'),\r\n  './connection': require('./connection'),\r\n  './core': require('./core'),\r\n  './csv': require('./csv'),\r\n  './date': require('./date'),\r\n  './http-api': require('./http-api'),\r\n  './logger': require('./logger'),\r\n  './oauth2': require('./oauth2'),\r\n  './process': require('./process'),\r\n  './promise': require('./promise'),\r\n  './query': require('./query'),\r\n  './quick-action': require('./quick-action'),\r\n  './record-stream': require('./record-stream'),\r\n  './record': require('./record'),\r\n  './soap': require('./soap'),\r\n  './sobject': require('./sobject'),\r\n  './soql-builder': require('./soql-builder'),\r\n  './transport': require('./transport')\r\n};","'use strict';\r\n\r\nvar required = require('./_required');\r\n\r\nmodule.exports = function(name) {\r\n  if (name === './jsforce' || name === 'jsforce') {\r\n    name = './core';\r\n  }\r\n  var m = required[name];\r\n  if (typeof m === 'undefined') {\r\n    throw new Error(\"Cannot find module '\" + name + \"'\");\r\n  }\r\n  return m;\r\n};\r\n","/**\r\n * @file JSforce Core\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n'use strict';\r\n\r\nvar EventEmitter = require('events').EventEmitter;\r\n\r\nvar jsforce = module.exports = new EventEmitter();\r\njsforce.Connection = require('./connection');\r\njsforce.OAuth2 = require('./oauth2');\r\njsforce.Date = jsforce.SfDate = require(\"./date\");\r\njsforce.RecordStream = require('./record-stream');\r\njsforce.Promise = require('./promise');\r\njsforce.require = require('./require');\r\n","/**\r\n * @file Manages Salesforce Analytics API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash/core'),\r\n    jsforce = require('../core'),\r\n    Promise  = require('../promise');\r\n\r\n/**\r\n * Report instance to retrieving asynchronously executed result\r\n *\r\n * @protected\r\n * @class Analytics~ReportInstance\r\n * @param {Analytics~Report} report - Report\r\n * @param {String} id - Report instance id\r\n */\r\nvar ReportInstance = function(report, id) {\r\n  this._report = report;\r\n  this._conn = report._conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Retrieve report result asynchronously executed\r\n *\r\n * @method Analytics~ReportInstance#retrieve\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReportInstance.prototype.retrieve = function(callback) {\r\n  var conn = this._conn,\r\n      report = this._report;\r\n  var url = [ conn._baseUrl(), \"analytics\", \"reports\", report.id, \"instances\", this.id ].join('/');\r\n  return conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Report object in Analytics API\r\n *\r\n * @protected\r\n * @class Analytics~Report\r\n * @param {Connection} conn Connection\r\n */\r\nvar Report = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe report metadata\r\n *\r\n * @method Analytics~Report#describe\r\n * @param {Callback.<Analytics~ReportMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportMetadata>}\r\n */\r\nReport.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Analytics~Report#destroy()\r\n *\r\n * @method Analytics~Report#delete\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\n/**\r\n * Synonym of Analytics~Report#destroy()\r\n *\r\n * @method Analytics~Report#del\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\n/**\r\n * Destroy a report\r\n *\r\n * @method Analytics~Report#destroy\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype[\"delete\"] =\r\nReport.prototype.del =\r\nReport.prototype.destroy = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Clones a given report\r\n *\r\n * @method Analytics~Report#clone\r\n * @param {String} name - The name of the new report\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.clone = function(name, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  url += \"?cloneId=\" + this.id;\r\n  var data = { reportMetadata: { name: name } };\r\n  var params = { method : 'POST', url: url, headers: { \"Content-Type\" : \"application/json\" }, body: JSON.stringify(data)};\r\n\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Explain plan for executing report\r\n *\r\n * @method Analytics~Report#explain\r\n * @param {Callback.<ExplainInfo>} [callback] - Callback function\r\n * @returns {Promise.<ExplainInfo>}\r\n */\r\nReport.prototype.explain = function(callback) {\r\n  var url = \"/query/?explain=\" + this.id;\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report synchronously\r\n *\r\n * @method Analytics~Report#execute\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportResult>}\r\n */\r\nReport.prototype.run =\r\nReport.prototype.exec =\r\nReport.prototype.execute = function(options, callback) {\r\n  options = options || {};\r\n  if (_.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id ].join('/');\r\n  url += \"?includeDetails=\" + (options.details ? \"true\" : \"false\");\r\n  var params = { method : options.metadata ? 'POST' : 'GET', url : url };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Run report asynchronously\r\n *\r\n * @method Analytics~Report#executeAsync\r\n * @param {Object} [options] - Options\r\n * @param {Boolean} options.details - Flag if include detail in result\r\n * @param {Analytics~ReportMetadata} options.metadata - Overriding report metadata\r\n * @param {Callback.<Analytics~ReportInstanceAttrs>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~ReportInstanceAttrs>}\r\n */\r\nReport.prototype.executeAsync = function(options, callback) {\r\n  options = options || {};\r\n  if (_.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  if (options.details) {\r\n    url += \"?includeDetails=true\";\r\n  }\r\n  var params = { method : 'POST', url : url, body: \"\" };\r\n  if (options.metadata) {\r\n    params.headers = { \"Content-Type\" : \"application/json\" };\r\n    params.body = JSON.stringify(options.metadata);\r\n  }\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get report instance for specified instance ID\r\n *\r\n * @method Analytics~Report#instance\r\n * @param {String} id - Report instance ID\r\n * @returns {Analytics~ReportInstance}\r\n */\r\nReport.prototype.instance = function(id) {\r\n  return new ReportInstance(this, id);\r\n};\r\n\r\n/**\r\n * List report instances which had been executed asynchronously\r\n *\r\n * @method Analytics~Report#instances\r\n * @param {Callback.<Array.<Analytics~ReportInstanceAttrs>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInstanceAttrs>>}\r\n */\r\nReport.prototype.instances = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\", this.id, \"instances\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Dashboard object in the Analytics API\r\n *\r\n * @protected\r\n * @class Analytics-Dashboard\r\n * @param {Connection} conn Connection\r\n * @param {String} id - The Id\r\n */\r\n\r\nvar Dashboard = function(conn, id) {\r\n  this._conn = conn;\r\n  this.id = id;\r\n};\r\n\r\n/**\r\n * Describe dashboard metadata\r\n *\r\n * @method Analytics~Dashboard#describe\r\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardMetadata>}\r\n */\r\nDashboard.prototype.describe = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"describe\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get details about dashboard components\r\n *\r\n * @method Analytics~Dashboard#components\r\n * @param {Callback.<Analytics-DashboardComponentMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardComponentMetadata>}\r\n */\r\nDashboard.prototype.components = function(componentIds, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id].join('/');\r\n  var data = {};\r\n  if (_.isFunction(componentIds)) {\r\n    callback = componentIds;\r\n  } else if (_.isArray(componentIds)) {\r\n    data.componentIds = componentIds;\r\n  } else if (_.isString(componentIds)) {\r\n    data.componentIds = [ componentIds ];\r\n  }\r\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get dashboard status\r\n *\r\n * @method Analytics~Dashboard#status\r\n * @param {Callback.<Analytics-DashboardStatusMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardStatusMetadata>}\r\n */\r\nDashboard.prototype.status = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id, \"status\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Refresh a dashboard\r\n *\r\n * @method Analytics~Dashboard#refresh\r\n * @param {Callback.<Analytics-DashboardStatusUrl>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardStatusUrl>}\r\n */\r\nDashboard.prototype.refresh = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\r\n  var params = { method : 'PUT', url : url, body: '' };\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Clone a dashboard\r\n *\r\n * @method Analytics~Dashboard#clone\r\n * @param {Callback.<Analytics-DashboardMetadata>} [callback] - Callback function\r\n * @returns {Promise.<Analytics-DashboardMetadata>}\r\n */\r\nDashboard.prototype.clone = function(name, folderid, callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\r\n  url += \"?cloneId=\" + this.id;\r\n  var data = {};\r\n\r\n  if (_.isObject(name)) {\r\n    data = name;\r\n    callback = folderid;\r\n  } else {\r\n    data.name = name;\r\n    data.folderId = folderid;\r\n  }\r\n  var params = { method : 'POST', url : url, headers : { \"Content-Type\" : \"application/json\" }, body : JSON.stringify(data)};\r\n\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Analytics~Dashboard#destroy()\r\n *\r\n * @method Analytics~Dashboard#delete\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\n/**\r\n * Synonym of Analytics~Dashboard#destroy()\r\n *\r\n * @method Analytics~Dashboard#del\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\n/**\r\n * Destroy a dashboard\r\n *\r\n * @method Analytics~Dashboard#destroy\r\n * @param {Callback.<Analytics~DashboardResult>} [callback] - Callback function\r\n * @returns {Promise.<Analytics~DashboardResult>}\r\n */\r\nDashboard.prototype[\"delete\"] =\r\nDashboard.prototype.del =\r\nDashboard.prototype.destroy = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\", this.id ].join('/');\r\n  return this._conn.request({method: 'DELETE', url: url}).thenCall(callback);\r\n};\r\n\r\n/**\r\n * API class for Analytics API\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Analytics = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Get report object of Analytics API\r\n *\r\n * @param {String} id - Report Id\r\n * @returns {Analytics~Report}\r\n */\r\nAnalytics.prototype.report = function(id) {\r\n  return new Report(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent report list\r\n *\r\n * @param {Callback.<Array.<Analytics~ReportInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~ReportInfo>>}\r\n */\r\nAnalytics.prototype.reports = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"reports\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Get dashboard object of Analytics API\r\n *\r\n * @param {String} id - Dashboard Id\r\n * @returns {Analytics~Dashboard}\r\n */\r\nAnalytics.prototype.dashboard = function(id) {\r\n  return new Dashboard(this._conn, id);\r\n};\r\n\r\n/**\r\n * Get recent dashboard list\r\n *\r\n * @param {Callback.<Array.<Analytics~DashboardInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Analytics~DashboardInfo>>}\r\n */\r\nAnalytics.prototype.dashboards = function(callback) {\r\n  var url = [ this._conn._baseUrl(), \"analytics\", \"dashboards\" ].join('/');\r\n  return this._conn.request(url).thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.analytics = new Analytics(conn);\r\n});\r\n\r\n\r\nmodule.exports = Analytics;\r\n","/**\r\n * @file Manages Salesforce Apex REST endpoint calls\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar jsforce = require('../core');\r\n\r\n/**\r\n * API class for Apex REST endpoint call\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Apex = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nApex.prototype._baseUrl = function() {\r\n  return this._conn.instanceUrl + \"/services/apexrest\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nApex.prototype._createRequestParams = function(method, path, body, options) {\r\n  var params = {\r\n    method: method,\r\n    url: this._baseUrl() + path\r\n  },\r\n  _headers = {};\r\n  if(options && 'object' === typeof options['headers']){\r\n    _headers = options['headers'];\r\n  }\r\n  if (!/^(GET|DELETE)$/i.test(method)) {\r\n    _headers[\"Content-Type\"] = \"application/json\";\r\n  }\r\n  params.headers = _headers;\r\n  if (body) {\r\n    var contentType = params.headers[\"Content-Type\"];\r\n    if (!contentType || contentType === \"application/json\") {\r\n      params.body = JSON.stringify(body);\r\n    } else {\r\n      params.body = body;\r\n    }\r\n  }\r\n  return params;\r\n};\r\n\r\n/**\r\n * Call Apex REST service in GET request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} options - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.get = function(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  return this._conn.request(this._createRequestParams('GET', path, undefined, options)).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in POST request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} options - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.post = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('POST', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in PUT request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.put = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('PUT', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Call Apex REST service in PATCH request\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [body] - Request body\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.patch = function(path, body, options, callback) {\r\n  if (typeof body === 'function') {\r\n    callback = body;\r\n    body = undefined;\r\n    options = undefined;\r\n  }\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  var params = this._createRequestParams('PATCH', path, body, options);\r\n  return this._conn.request(params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Apex#delete()\r\n *\r\n * @method Apex#del\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\n/**\r\n * Call Apex REST service in DELETE request\r\n *\r\n * @method Apex#delete\r\n *\r\n * @param {String} path - URL path to Apex REST service\r\n * @param {Object} [options] - Holds headers and other meta data for the request.\r\n * @param {Callback.<Object>} [callback] - Callback function\r\n * @returns {Promise.<Object>}\r\n */\r\nApex.prototype.del =\r\n  Apex.prototype[\"delete\"] = function(path, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options;\r\n    options = undefined;\r\n  }\r\n  return this._conn.request(this._createRequestParams('DELETE', path, undefined, options)).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.apex = new Apex(conn);\r\n});\r\n\r\n\r\nmodule.exports = Apex;\r\n","/*global process*/\r\n/**\r\n * @file Manages Salesforce Bulk API related operations\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits     = require('inherits'),\r\n    stream       = require('readable-stream'),\r\n    Duplex       = stream.Duplex,\r\n    events       = require('events'),\r\n    _            = require('lodash/core'),\r\n    joinStreams  = require('multistream'),\r\n    jsforce      = require('../core'),\r\n    RecordStream = require('../record-stream'),\r\n    Promise      = require('../promise'),\r\n    HttpApi      = require('../http-api');\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API Job\r\n *\r\n * @protected\r\n * @class Bulk~Job\r\n * @extends events.EventEmitter\r\n *\r\n * @param {Bulk} bulk - Bulk API object\r\n * @param {String} [type] - SObject type\r\n * @param {String} [operation] - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {String} [jobId] - Job ID (if already available)\r\n */\r\nvar Job = function(bulk, type, operation, options, jobId) {\r\n  this._bulk = bulk;\r\n  this.type = type;\r\n  this.operation = operation;\r\n  this.options = options || {};\r\n  this.id = jobId;\r\n  this.state = this.id ? 'Open' : 'Unknown';\r\n  this._batches = {};\r\n};\r\n\r\ninherits(Job, events.EventEmitter);\r\n\r\n/**\r\n * @typedef {Object} Bulk~JobInfo\r\n * @prop {String} id - Job ID\r\n * @prop {String} object - Object type name\r\n * @prop {String} operation - Operation type of the job\r\n * @prop {String} state - Job status\r\n */\r\n\r\n/**\r\n * Return latest jobInfo from cache\r\n *\r\n * @method Bulk~Job#info\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.info = function(callback) {\r\n  var self = this;\r\n  // if cache is not available, check the latest\r\n  if (!this._jobInfo) {\r\n    this._jobInfo = this.check();\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Open new job and get jobinfo\r\n *\r\n * @method Bulk~Job#open\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.open = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  // if not requested opening job\r\n  if (!this._jobInfo) {\r\n    var operation = this.operation.toLowerCase();\r\n    if (operation === 'harddelete') { operation = 'hardDelete'; }\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo  xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<operation>' + operation + '</operation>',\r\n        '<object>' + this.type + '</object>',\r\n        (this.options.extIdField ?\r\n         '<externalIdFieldName>'+this.options.extIdField+'</externalIdFieldName>' :\r\n         ''),\r\n        (this.options.concurrencyMode ?\r\n         '<concurrencyMode>'+this.options.concurrencyMode+'</concurrencyMode>' :\r\n         ''),\r\n        (this.options.assignmentRuleId ?\r\n          '<assignmentRuleId>' + this.options.assignmentRuleId + '</assignmentRuleId>' :\r\n          ''),\r\n        '<contentType>CSV</contentType>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n\r\n    this._jobInfo = bulk._request({\r\n      method : 'POST',\r\n      path : \"/job\",\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    }).then(function(res) {\r\n      self.emit(\"open\", res.jobInfo);\r\n      self.id = res.jobInfo.id;\r\n      self.state = res.jobInfo.state;\r\n      return res.jobInfo;\r\n    }, function(err) {\r\n      self.emit(\"error\", err);\r\n      throw err;\r\n    });\r\n  }\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create a new batch instance in the job\r\n *\r\n * @method Bulk~Job#createBatch\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.createBatch = function() {\r\n  var batch = new Batch(this);\r\n  var self = this;\r\n  batch.on('queue', function() {\r\n    self._batches[batch.id] = batch;\r\n  });\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Get a batch instance specified by given batch ID\r\n *\r\n * @method Bulk~Job#batch\r\n * @param {String} batchId - Batch ID\r\n * @returns {Bulk~Batch}\r\n */\r\nJob.prototype.batch = function(batchId) {\r\n  var batch = this._batches[batchId];\r\n  if (!batch) {\r\n    batch = new Batch(this, batchId);\r\n    this._batches[batchId] = batch;\r\n  }\r\n  return batch;\r\n};\r\n\r\n/**\r\n * Check the latest job status from server\r\n *\r\n * @method Bulk~Job#check\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id,\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.id = res.jobInfo.id;\r\n    self.type = res.jobInfo.object;\r\n    self.operation = res.jobInfo.operation;\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Wait till the job is assigned to server\r\n *\r\n * @method Bulk~Job#info\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype._waitAssign = function(callback) {\r\n  return (this.id ? Promise.resolve({ id: this.id }) : this.open()).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * List all registered batch info in job\r\n *\r\n * @method Bulk~Job#list\r\n * @param {Callback.<Array.<Bulk~BatchInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Bulk~BatchInfo>>}\r\n */\r\nJob.prototype.list = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return this._waitAssign().then(function() {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + self.id + \"/batch\",\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfoList.batchInfo);\r\n    var batchInfoList = res.batchInfoList;\r\n    batchInfoList = _.isArray(batchInfoList.batchInfo) ? batchInfoList.batchInfo : [ batchInfoList.batchInfo ];\r\n    return batchInfoList;\r\n  }).thenCall(callback);\r\n\r\n};\r\n\r\n/**\r\n * Close opened job\r\n *\r\n * @method Bulk~Job#close\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.close = function() {\r\n  var self = this;\r\n  return this._changeState(\"Closed\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"close\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * Set the status to abort\r\n *\r\n * @method Bulk~Job#abort\r\n * @param {Callback.<Bulk~JobInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~JobInfo>}\r\n */\r\nJob.prototype.abort = function() {\r\n  var self = this;\r\n  return this._changeState(\"Aborted\").then(function(jobInfo) {\r\n    self.id = null;\r\n    self.emit(\"abort\", jobInfo);\r\n    return jobInfo;\r\n  }, function(err) {\r\n    self.emit(\"error\", err);\r\n    throw err;\r\n  });\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nJob.prototype._changeState = function(state, callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  this._jobInfo = this._waitAssign().then(function() {\r\n    var body = [\r\n      '<?xml version=\"1.0\" encoding=\"UTF-8\"?>',\r\n      '<jobInfo xmlns=\"http://www.force.com/2009/06/asyncapi/dataload\">',\r\n        '<state>' + state + '</state>',\r\n      '</jobInfo>'\r\n    ].join('');\r\n    return bulk._request({\r\n      method : 'POST',\r\n      path : \"/job/\" + self.id,\r\n      body : body,\r\n      headers : {\r\n        \"Content-Type\" : \"application/xml; charset=utf-8\"\r\n      },\r\n      responseType: \"application/xml\"\r\n    });\r\n  }).then(function(res) {\r\n    logger.debug(res.jobInfo);\r\n    self.state = res.jobInfo.state;\r\n    return res.jobInfo;\r\n  });\r\n  return this._jobInfo.thenCall(callback);\r\n\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Batch (extends RecordStream)\r\n *\r\n * @protected\r\n * @class Bulk~Batch\r\n * @extends {stream.Writable}\r\n * @implements {Promise.<Array.<RecordResult>>}\r\n * @param {Bulk~Job} job - Bulk job object\r\n * @param {String} [batchId] - Batch ID (if already available)\r\n */\r\nvar Batch = function(job, batchId) {\r\n  Batch.super_.call(this, { objectMode: true });\r\n  this.job = job;\r\n  this.id = batchId;\r\n  this._bulk = job._bulk;\r\n  this._deferred = Promise.defer();\r\n  this._setupDataStreams();\r\n};\r\n\r\ninherits(Batch, stream.Writable);\r\n\r\n\r\n/**\r\n * @private\r\n */\r\nBatch.prototype._setupDataStreams = function() {\r\n  var batch = this;\r\n  var converterOptions = { nullValue : '#N/A' };\r\n  this._uploadStream = new RecordStream.Serializable();\r\n  this._uploadDataStream = this._uploadStream.stream('csv', converterOptions);\r\n  this._downloadStream = new RecordStream.Parsable();\r\n  this._downloadDataStream = this._downloadStream.stream('csv', converterOptions);\r\n\r\n  this.on('finish', function() {\r\n    batch._uploadStream.end();\r\n  });\r\n  this._uploadDataStream.once('readable', function() {\r\n    batch.job.open().then(function() {\r\n      // pipe upload data to batch API request stream\r\n      batch._uploadDataStream.pipe(batch._createRequestStream());\r\n    });\r\n  });\r\n\r\n  // duplex data stream, opened access to API programmers by Batch#stream()\r\n  var dataStream = this._dataStream = new Duplex();\r\n  dataStream._write = function(data, enc, cb) {\r\n    batch._uploadDataStream.write(data, enc, cb);\r\n  };\r\n  dataStream.on('finish', function() {\r\n    batch._uploadDataStream.end();\r\n  });\r\n\r\n  this._downloadDataStream.on('readable', function() {\r\n    dataStream.read(0);\r\n  });\r\n  this._downloadDataStream.on('end', function() {\r\n    dataStream.push(null);\r\n  });\r\n  dataStream._read = function(size) {\r\n    var chunk;\r\n    while ((chunk = batch._downloadDataStream.read()) !== null) {\r\n      dataStream.push(chunk);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * Connect batch API and create stream instance of request/response\r\n *\r\n * @private\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype._createRequestStream = function() {\r\n  var batch = this;\r\n  var bulk = batch._bulk;\r\n  var logger = bulk._logger;\r\n\r\n  return bulk._request({\r\n    method : 'POST',\r\n    path : \"/job/\" + batch.job.id + \"/batch\",\r\n    headers: {\r\n      \"Content-Type\": \"text/csv\"\r\n    },\r\n    responseType: \"application/xml\"\r\n  }, function(err, res) {\r\n    if (err) {\r\n      batch.emit('error', err);\r\n    } else {\r\n      logger.debug(res.batchInfo);\r\n      batch.id = res.batchInfo.id;\r\n      batch.emit('queue', res.batchInfo);\r\n    }\r\n  }).stream();\r\n};\r\n\r\n/**\r\n * Implementation of Writable\r\n *\r\n * @override\r\n * @private\r\n */\r\nBatch.prototype._write = function(record, enc, cb) {\r\n  record = _.clone(record);\r\n  if (this.job.operation === \"insert\") {\r\n    delete record.Id;\r\n  } else if (this.job.operation === \"delete\") {\r\n    record = { Id: record.Id };\r\n  }\r\n  delete record.type;\r\n  delete record.attributes;\r\n  this._uploadStream.write(record, enc, cb);\r\n};\r\n\r\n/**\r\n * Returns duplex stream which accepts CSV data input and batch result output\r\n *\r\n * @returns {stream.Duplex}\r\n */\r\nBatch.prototype.stream = function() {\r\n  return this._dataStream;\r\n};\r\n\r\n/**\r\n * Execute batch operation\r\n *\r\n * @method Bulk~Batch#execute\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for batch operation. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBatch.prototype.run =\r\nBatch.prototype.exec =\r\nBatch.prototype.execute = function(input, callback) {\r\n  var self = this;\r\n\r\n  if (typeof input === 'function') { // if input argument is omitted\r\n    callback = input;\r\n    input = null;\r\n  }\r\n\r\n  // if batch is already executed\r\n  if (this._result) {\r\n    throw new Error(\"Batch already executed.\");\r\n  }\r\n\r\n  var rdeferred = Promise.defer();\r\n  this._result = rdeferred.promise;\r\n  this._result.then(function(res) {\r\n    self._deferred.resolve(res);\r\n  }, function(err) {\r\n    self._deferred.reject(err);\r\n  });\r\n  this.once('response', function(res) {\r\n    rdeferred.resolve(res);\r\n  });\r\n  this.once('error', function(err) {\r\n    rdeferred.reject(err);\r\n  });\r\n\r\n  if (_.isObject(input) && _.isFunction(input.pipe)) { // if input has stream.Readable interface\r\n    input.pipe(this._dataStream);\r\n  } else {\r\n    var data;\r\n    if (_.isArray(input)) {\r\n      _.forEach(input, function(record) {\r\n        Object.keys(record).forEach(function(key) {\r\n          if (typeof record[key] === 'boolean') {\r\n            record[key] = String(record[key])\r\n          }\r\n        })\r\n        self.write(record);\r\n      });\r\n      self.end();\r\n    } else if (_.isString(input)){\r\n      data = input;\r\n      this._dataStream.write(data, 'utf8');\r\n      this._dataStream.end();\r\n    }\r\n  }\r\n\r\n  // return Batch instance for chaining\r\n  return this.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Bulk~Batch#then\r\n */\r\nBatch.prototype.then = function(onResolved, onReject, onProgress) {\r\n  return this._deferred.promise.then(onResolved, onReject, onProgress);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Bulk~Batch#thenCall\r\n */\r\nBatch.prototype.thenCall = function(callback) {\r\n  if (_.isFunction(callback)) {\r\n    this.then(function(res) {\r\n      process.nextTick(function() {\r\n        callback(null, res);\r\n      });\r\n    }, function(err) {\r\n      process.nextTick(function() {\r\n        callback(err);\r\n      });\r\n    });\r\n  }\r\n  return this;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchInfo\r\n * @prop {String} id - Batch ID\r\n * @prop {String} jobId - Job ID\r\n * @prop {String} state - Batch state\r\n * @prop {String} stateMessage - Batch state message\r\n */\r\n\r\n/**\r\n * Check the latest batch status in server\r\n *\r\n * @method Bulk~Batch#check\r\n * @param {Callback.<Bulk~BatchInfo>} [callback] - Callback function\r\n * @returns {Promise.<Bulk~BatchInfo>}\r\n */\r\nBatch.prototype.check = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var logger = bulk._logger;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  return bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId,\r\n    responseType: \"application/xml\"\r\n  }).then(function(res) {\r\n    logger.debug(res.batchInfo);\r\n    return res.batchInfo;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * Polling the batch result and retrieve\r\n *\r\n * @method Bulk~Batch#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nBatch.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var err = new Error(\"Polling time out. Job Id = \" + jobId + \" , batch Id = \" + batchId);\r\n      err.name = 'PollingTimeout';\r\n      err.jobId = jobId;\r\n      err.batchId = batchId;\r\n      self.emit('error', err);\r\n      return;\r\n    }\r\n    self.check(function(err, res) {\r\n      if (err) {\r\n        self.emit('error', err);\r\n      } else {\r\n        if (res.state === \"Failed\") {\r\n          if (parseInt(res.numberRecordsProcessed, 10) > 0) {\r\n            self.retrieve();\r\n          } else {\r\n            self.emit('error', new Error(res.stateMessage));\r\n          }\r\n        } else if (res.state === \"Completed\") {\r\n          self.retrieve();\r\n        } else {\r\n          self.emit('progress', res);\r\n          setTimeout(poll, interval);\r\n        }\r\n      }\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Bulk~BatchResultInfo\r\n * @prop {String} id - Batch result ID\r\n * @prop {String} batchId - Batch ID which includes this batch result.\r\n * @prop {String} jobId - Job ID which includes this batch result.\r\n */\r\n\r\n/**\r\n * Retrieve batch result\r\n *\r\n * @method Bulk~Batch#retrieve\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>}\r\n */\r\nBatch.prototype.retrieve = function(callback) {\r\n  var self = this;\r\n  var bulk = this._bulk;\r\n  var jobId = this.job.id;\r\n  var job = this.job;\r\n  var batchId = this.id;\r\n\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n\r\n  return job.info().then(function(jobInfo) {\r\n    return bulk._request({\r\n      method : 'GET',\r\n      path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result\"\r\n    });\r\n  }).then(function(res) {\r\n    var results;\r\n    if (job.operation === 'query') {\r\n      var conn = bulk._conn;\r\n      var resultIds = res['result-list'].result;\r\n      results = res['result-list'].result;\r\n      results = _.map(_.isArray(results) ? results : [ results ], function(id) {\r\n        return {\r\n          id: id,\r\n          batchId: batchId,\r\n          jobId: jobId\r\n        };\r\n      });\r\n    } else {\r\n      results = _.map(res, function(ret) {\r\n        return {\r\n          id: ret.Id || null,\r\n          success: ret.Success === \"true\",\r\n          errors: ret.Error ? [ ret.Error ] : []\r\n        };\r\n      });\r\n    }\r\n    self.emit('response', results);\r\n    return results;\r\n  }).fail(function(err) {\r\n    self.emit('error', err);\r\n    throw err;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Fetch query result as a record stream\r\n * @param {String} resultId - Result id\r\n * @returns {RecordStream} - Record stream, convertible to CSV data stream\r\n */\r\nBatch.prototype.result = function(resultId) {\r\n  var jobId = this.job.id;\r\n  var batchId = this.id;\r\n  if (!jobId || !batchId) {\r\n    throw new Error(\"Batch not started.\");\r\n  }\r\n  var resultStream = new RecordStream.Parsable();\r\n  var resultDataStream = resultStream.stream('csv');\r\n  var reqStream = this._bulk._request({\r\n    method : 'GET',\r\n    path : \"/job/\" + jobId + \"/batch/\" + batchId + \"/result/\" + resultId,\r\n    responseType: \"application/octet-stream\"\r\n  }).stream().pipe(resultDataStream);\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * @private\r\n */\r\nvar BulkApi = function() {\r\n  BulkApi.super_.apply(this, arguments);\r\n};\r\n\r\ninherits(BulkApi, HttpApi);\r\n\r\nBulkApi.prototype.beforeSend = function(request) {\r\n  request.headers = request.headers || {};\r\n  request.headers[\"X-SFDC-SESSION\"] = this._conn.accessToken;\r\n};\r\n\r\nBulkApi.prototype.isSessionExpired = function(response) {\r\n  return response.statusCode === 400 &&\r\n    /<exceptionCode>InvalidSessionId<\\/exceptionCode>/.test(response.body);\r\n};\r\n\r\nBulkApi.prototype.hasErrorInResponseBody = function(body) {\r\n  return !!body.error;\r\n};\r\n\r\nBulkApi.prototype.parseError = function(body) {\r\n  return {\r\n    errorCode: body.error.exceptionCode,\r\n    message: body.error.exceptionMessage\r\n  };\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Class for Bulk API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Bulk = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n};\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nBulk.prototype.pollTimeout = 10000;\r\n\r\n/** @private **/\r\nBulk.prototype._request = function(request, callback) {\r\n  var conn = this._conn;\r\n  request = _.clone(request);\r\n  var baseUrl = [ conn.instanceUrl, \"services/async\", conn.version ].join('/');\r\n  request.url = baseUrl + request.path;\r\n  var options = { responseType: request.responseType };\r\n  delete request.path;\r\n  delete request.responseType;\r\n  return new BulkApi(this._conn, options).request(request).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Create and start bulkload job and batch\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', or 'hardDelete')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @param {String} [options.extIdField] - External ID field name (used when upsert operation).\r\n * @param {String} [options.concurrencyMode] - 'Serial' or 'Parallel'. Defaults to Parallel.\r\n * @param {Array.<Record>|stream.Stream|String} [input] - Input source for bulkload. Accepts array of records, CSV string, and CSV data input stream in insert/update/upsert/delete/hardDelete operation, SOQL string in query operation.\r\n * @param {Callback.<Array.<RecordResult>|Array.<Bulk~BatchResultInfo>>} [callback] - Callback function\r\n * @returns {Bulk~Batch}\r\n */\r\nBulk.prototype.load = function(type, operation, options, input, callback) {\r\n  var self = this;\r\n  if (!type || !operation) {\r\n    throw new Error(\"Insufficient arguments. At least, 'type' and 'operation' are required.\");\r\n  }\r\n  if (!_.isObject(options) || options.constructor !== Object) { // when options is not plain hash object, it is omitted\r\n    callback = input;\r\n    input = options;\r\n    options = null;\r\n  }\r\n  var job = this.createJob(type, operation, options);\r\n  job.once('error', function (error) {\r\n    if (batch) {\r\n      batch.emit('error', error); // pass job error to batch\r\n    }\r\n  });\r\n  var batch = job.createBatch();\r\n  var cleanup = function() {\r\n    batch = null;\r\n    job.close();\r\n  };\r\n  var cleanupOnError = function(err) {\r\n    if (err.name !== 'PollingTimeout') {\r\n      cleanup();\r\n    }\r\n  };\r\n  batch.on('response', cleanup);\r\n  batch.on('error', cleanupOnError);\r\n  batch.on('queue', function() { batch.poll(self.pollInterval, self.pollTimeout); });\r\n  return batch.execute(input, callback);\r\n};\r\n\r\n/**\r\n * Execute bulk query and get record stream\r\n *\r\n * @param {String} soql - SOQL to execute in bulk job\r\n * @returns {RecordStream.Parsable} - Record stream, convertible to CSV data stream\r\n */\r\nBulk.prototype.query = function(soql) {\r\n  var m = soql.replace(/\\([\\s\\S]+\\)/g, '').match(/FROM\\s+(\\w+)/i);\r\n  if (!m) {\r\n    throw new Error(\"No sobject type found in query, maybe caused by invalid SOQL.\");\r\n  }\r\n  var type = m[1];\r\n  var self = this;\r\n  var recordStream = new RecordStream.Parsable();\r\n  var dataStream = recordStream.stream('csv');\r\n  this.load(type, \"query\", soql).then(function(results) {\r\n    var streams = results.map(function(result) {\r\n      return self\r\n        .job(result.jobId)\r\n        .batch(result.batchId)\r\n        .result(result.id)\r\n        .stream();\r\n    });\r\n\r\n    joinStreams(streams).pipe(dataStream);\r\n  }).fail(function(err) {\r\n    recordStream.emit('error', err);\r\n  });\r\n  return recordStream;\r\n};\r\n\r\n\r\n/**\r\n * Create a new job instance\r\n *\r\n * @param {String} type - SObject type\r\n * @param {String} operation - Bulk load operation ('insert', 'update', 'upsert', 'delete', 'hardDelete', or 'query')\r\n * @param {Object} [options] - Options for bulk loading operation\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.createJob = function(type, operation, options) {\r\n  return new Job(this, type, operation, options);\r\n};\r\n\r\n/**\r\n * Get a job instance specified by given job ID\r\n *\r\n * @param {String} jobId - Job ID\r\n * @returns {Bulk~Job}\r\n */\r\nBulk.prototype.job = function(jobId) {\r\n  return new Job(this, null, null, null, jobId);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.bulk = new Bulk(conn);\r\n});\r\n\r\n\r\nmodule.exports = Bulk;\r\n","/**\r\n * @file Manages Salesforce Chatter REST API calls\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    _       = require('lodash/core'),\r\n    jsforce = require('../core'),\r\n    Promise = require('../promise');\r\n\r\n/**\r\n * API class for Chatter REST API call\r\n *\r\n * @class\r\n * @param {Connection} conn Connection\r\n */\r\nvar Chatter = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Sending request to API endpoint\r\n * @private\r\n */\r\nChatter.prototype._request = function(params, callback) {\r\n  if (/^(put|post|patch)$/i.test(params.method)) {\r\n    if (_.isObject(params.body)) {\r\n      params.headers = {\r\n        \"Content-Type\": \"application/json\"\r\n      };\r\n      params.body = JSON.stringify(params.body);\r\n    }\r\n  }\r\n  params.url = this._normalizeUrl(params.url);\r\n  return this._conn.request(params, callback);\r\n};\r\n\r\n/**\r\n * Convert path to site root relative url\r\n * @private\r\n */\r\nChatter.prototype._normalizeUrl = function(url) {\r\n  if (url.indexOf('/chatter/') === 0 || url.indexOf('/connect/') === 0) {\r\n    return '/services/data/v' + this._conn.version + url;\r\n  } else if (/^\\/v[\\d]+\\.[\\d]+\\//.test(url)) {\r\n    return '/services/data' + url;\r\n  } else if (url.indexOf('/services/') !== 0 && url[0] === '/') {\r\n    return '/services/data/v' + this._conn.version + '/chatter' + url;\r\n  } else {\r\n    return url;\r\n  }\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~RequestParams\r\n * @prop {String} method - HTTP method\r\n * @prop {String} url - Resource URL\r\n * @prop {String} [body] - HTTP body (in POST/PUT/PATCH methods)\r\n */\r\n\r\n/**\r\n * @typedef {Object} Chatter~RequestResult\r\n */\r\n\r\n/**\r\n * Make a request for chatter API resource\r\n *\r\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback func\r\n * @returns {Chatter~Request}\r\n */\r\nChatter.prototype.request = function(params, callback) {\r\n  return new Request(this, params).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Make a resource request to chatter API\r\n *\r\n * @param {String} url - Resource URL\r\n * @param {Object} [queryParams] - Query parameters (in hash object)\r\n * @returns {Chatter~Resource}\r\n */\r\nChatter.prototype.resource = function(url, queryParams) {\r\n  return new Resource(this, url, queryParams);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~BatchRequestResult\r\n * @prop {Boolean} hasError - Flag if the batch has one or more errors\r\n * @prop {Array.<Object>} results - Batch request results in array\r\n * @prop {Number} results.statusCode - HTTP response status code\r\n * @prop {Chatter~RequestResult} results.result - Parsed HTTP response body\r\n */\r\n\r\n/**\r\n * Make a batch request to chatter API\r\n *\r\n * @params {Array.<Chatter~Request>} requests - Chatter API requests\r\n * @param {Callback.<Chatter~BatchRequestResult>} [callback] - Callback func\r\n * @returns {Promise.<Chatter~BatchRequestResult>}\r\n */\r\nChatter.prototype.batch = function(requests, callback) {\r\n  var self = this;\r\n  var batchRequests = [], batchDeferreds = [];\r\n  _.forEach(requests, function(request) {\r\n    var deferred = Promise.defer();\r\n    request._promise = deferred.promise;\r\n    batchRequests.push(request.batchParams());\r\n    batchDeferreds.push(deferred);\r\n  });\r\n  var params = {\r\n    method: 'POST',\r\n    url: this._normalizeUrl('/connect/batch'),\r\n    body: {\r\n      batchRequests: batchRequests\r\n    }\r\n  };\r\n  return this.request(params).then(function(res) {\r\n    _.forEach(res.results, function(result, i) {\r\n      var deferred = batchDeferreds[i];\r\n      if (result.statusCode >= 400) {\r\n        deferred.reject(result.result);\r\n      } else {\r\n        deferred.resolve(result.result);\r\n      }\r\n    });\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * A class representing chatter API request\r\n *\r\n * @protected\r\n * @class Chatter~Request\r\n * @implements {Promise.<Chatter~RequestResult>}\r\n * @param {Chatter} chatter - Chatter API object\r\n * @param {Chatter~RequestParams} params - Paramters representing HTTP request\r\n */\r\nvar Request = function(chatter, params) {\r\n  this._chatter = chatter;\r\n  this._params = params;\r\n  this._promise = null;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Chatter~BatchRequestParams\r\n * @prop {String} method - HTTP method\r\n * @prop {String} url - Resource URL\r\n * @prop {String} [richInput] - HTTP body (in POST/PUT/PATCH methods)\r\n */\r\n\r\n/**\r\n * Retrieve parameters in batch request form\r\n *\r\n * @method Chatter~Request#batchParams\r\n * @returns {Chatter~BatchRequestParams}\r\n */\r\nRequest.prototype.batchParams = function() {\r\n  var params = this._params;\r\n  var batchParams = {\r\n    method: params.method,\r\n    url: this._chatter._normalizeUrl(params.url)\r\n  };\r\n  if (this._params.body) {\r\n    batchParams.richInput = this._params.body;\r\n  }\r\n  return batchParams;\r\n};\r\n\r\n/**\r\n * Retrieve parameters in batch request form\r\n *\r\n * @method Chatter~Request#promise\r\n * @returns {Promise.<Chatter~RequestResult>}\r\n */\r\nRequest.prototype.promise = function() {\r\n  return this._promise || this._chatter._request(this._params);\r\n};\r\n\r\n/**\r\n * Returns Node.js Stream object for request\r\n *\r\n * @method Chatter~Request#stream\r\n * @returns {stream.Stream}\r\n */\r\nRequest.prototype.stream = function() {\r\n  return this._chatter._request(this._params).stream();\r\n};\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Chatter~Request#then\r\n */\r\nRequest.prototype.then = function(onResolve, onReject) {\r\n  return this.promise().then(onResolve, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Chatter~Request#thenCall\r\n */\r\nRequest.prototype.thenCall = function(callback) {\r\n  return _.isFunction(callback) ? this.promise().thenCall(callback) : this;\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * A class representing chatter API resource\r\n *\r\n * @protected\r\n * @class Chatter~Resource\r\n * @extends Chatter~Request\r\n * @param {Chatter} chatter - Chatter API object\r\n * @param {String} url - Resource URL\r\n * @param {Object} [queryParams] - Query parameters (in hash object)\r\n */\r\nvar Resource = function(chatter, url, queryParams) {\r\n  if (queryParams) {\r\n    var qstring = _.map(_.keys(queryParams), function(name) {\r\n      return name + \"=\" + encodeURIComponent(queryParams[name]);\r\n    }).join('&');\r\n    url += (url.indexOf('?') > 0 ? '&' : '?') + qstring;\r\n  }\r\n  Resource.super_.call(this, chatter, { method: 'GET', url: url });\r\n  this._url = url;\r\n};\r\n\r\ninherits(Resource, Request);\r\n\r\n/**\r\n * Create a new resource\r\n *\r\n * @method Chatter~Resource#create\r\n * @param {Object} data - Data to newly post\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.create = function(data, callback) {\r\n  return this._chatter.request({\r\n    method: 'POST',\r\n    url: this._url,\r\n    body: data\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Retrieve resource content\r\n *\r\n * @method Chatter~Resource#retrieve\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.retrieve = function(callback) {\r\n  return this.thenCall(callback);\r\n};\r\n\r\n/**\r\n * Update specified resource\r\n *\r\n * @method Chatter~Resource#update\r\n * @param {Object} data - Data to update\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.update = function(data, callback) {\r\n  return this._chatter.request({\r\n    method: 'PATCH',\r\n    url: this._url,\r\n    body: data\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Resource#delete()\r\n *\r\n * @method Chatter~Resource#del\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\n/**\r\n * Delete specified resource\r\n *\r\n * @method Chatter~Resource#delete\r\n * @param {Callback.<Chatter~RequestResult>} [callback] - Callback function\r\n * @returns {Chatter~Request}\r\n */\r\nResource.prototype.del =\r\nResource.prototype[\"delete\"] = function(callback) {\r\n  return this._chatter.request({\r\n    method: 'DELETE',\r\n    url: this._url\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.chatter = new Chatter(conn);\r\n});\r\n","/*global process, Buffer */\r\n/**\r\n * @file Manages Salesforce Metadata API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar inherits = require('inherits'),\r\n    events  = require('events'),\r\n    stream  = require('readable-stream'),\r\n    _       = require('lodash/core'),\r\n    jsforce = require('../core'),\r\n    Promise = require('../promise'),\r\n    SOAP    = require('../soap');\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * Class for Salesforce Metadata API\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Metadata = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n\r\n/**\r\n * Polling interval in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollInterval = 1000;\r\n\r\n/**\r\n * Polling timeout in milliseconds\r\n * @type {Number}\r\n */\r\nMetadata.prototype.pollTimeout = 10000;\r\n\r\n\r\n/**\r\n * Call Metadata API SOAP endpoint\r\n *\r\n * @private\r\n */\r\nMetadata.prototype._invoke = function(method, message, callback) {\r\n  var soapEndpoint = new SOAP(this._conn, {\r\n    xmlns: \"http://soap.sforce.com/2006/04/metadata\",\r\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/m/\" + this._conn.version\r\n  });\r\n  return soapEndpoint.invoke(method, message).then(function(res) {\r\n    return res.result;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} Metadata~MetadataInfo\r\n * @prop {String} fullName - The name of the component\r\n */\r\n\r\n/**\r\n * Asynchronously adds one or more new metadata components to the organization.\r\n *\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.createAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"create\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~SaveResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToSaveResult(result) {\r\n  var saveResult = _.clone(result);\r\n  saveResult.success = saveResult.success === 'true';\r\n  return saveResult;\r\n}\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpsertResult\r\n * @prop {Boolean} success - True if metadata is successfully saved\r\n * @prop {String} fullName - Full name of metadata object\r\n * @prop {Boolean} created - True if metadata is newly created\r\n */\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToUpsertResult(result) {\r\n  var upsertResult = convertToSaveResult(result);\r\n  upsertResult.created = upsertResult.created === 'true';\r\n  return upsertResult;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#create().\r\n *\r\n * @method Metadata#createSync\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously adds one or more new metadata components to the organization.\r\n *\r\n * @method Metadata#create\r\n * @param {String} type - The type of metadata to create\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Metadata to create\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.createSync =\r\nMetadata.prototype.create = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"createMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nfunction convertToMetadataInfo(rec) {\r\n  var metadataInfo = _.clone(rec);\r\n  delete metadataInfo.$;\r\n  return metadataInfo;\r\n}\r\n\r\n/**\r\n * Synonym of Metadata#read()\r\n *\r\n * @method Metadata#readSync\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\n/**\r\n * Synchronously read specified metadata components in the organization.\r\n *\r\n * @method Metadata#read\r\n * @param {String} type - The type of metadata to read\r\n * @param {String|Array.<String>} fullNames - full name(s) of metadata objects to read\r\n * @param {Callback.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>>>}\r\n */\r\nMetadata.prototype.readSync =\r\nMetadata.prototype.read = function(type, fullNames, callback) {\r\n  return this._invoke(\"readMetadata\", { type: type, fullNames: fullNames }).then(function(res) {\r\n    return _.isArray(res.records) ? _.map(res.records, convertToMetadataInfo) : convertToMetadataInfo(res.records);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~UpdateMetadataInfo\r\n * @prop {String} currentName - The API name of the component or field before the update\r\n * @prop {Metadata~MetadataInfo} metadata - Full specification of the component or field you wish to update\r\n */\r\n\r\n/**\r\n * Asynchronously updates one or more metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~UpdateMetadataInfo|Array.<Metadata~UpdateMetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.updateAsync = function(type, updateMetadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(umd) {\r\n    umd.metadata[\"@xsi:type\"] = type;\r\n    return umd;\r\n  };\r\n  var isArray = _.isArray(updateMetadata);\r\n  updateMetadata = isArray ? _.map(updateMetadata, convert) : convert(updateMetadata);\r\n  var res = this._invoke(\"update\", { updateMetadata: updateMetadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#update().\r\n *\r\n * @method Metadata#updateSync\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n/**\r\n * Synchronously updates one or more metadata components in the organization.\r\n *\r\n * @method Metadata#update\r\n * @param {String} type - The type of metadata to update\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} updateMetadata - Updating metadata\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.updateSync =\r\nMetadata.prototype.update = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"updateMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#upsert().\r\n *\r\n * @method Metadata#upsertSync\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\n/**\r\n * Upserts one or more components in your organization's data.\r\n *\r\n * @method Metadata#upsert\r\n * @param {String} type - The type of metadata to upsert\r\n * @param {Metadata~MetadataInfo|Array.<Metadata~MetadataInfo>} metadata - Upserting metadata\r\n * @param {Callback.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~UpsertResult|Array.<Metadata~UpsertResult>>}\r\n */\r\nMetadata.prototype.upsertSync =\r\nMetadata.prototype.upsert = function(type, metadata, callback) {\r\n  var convert = function(md) {\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  return this._invoke(\"upsertMetadata\", { metadata: metadata }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToUpsertResult) : convertToUpsertResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Asynchronously deletes specified metadata components in the organization.\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.deleteAsync = function(type, metadata, callback) {\r\n  if (Number(this._conn.version) > 30) {\r\n    throw new Error(\"Async metadata CRUD calls are not supported on ver 31.0 or later.\");\r\n  }\r\n  var convert = function(md) {\r\n    if (_.isString(md)) {\r\n      md = { fullName : md };\r\n    }\r\n    md[\"@xsi:type\"] = type;\r\n    return md;\r\n  };\r\n  var isArray = _.isArray(metadata);\r\n  metadata = isArray ? _.map(metadata, convert) : convert(metadata);\r\n  var res = this._invoke(\"delete\", { metadata: metadata });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @deprecated\r\n * @method Metadata#del\r\n * @param {String} [type] - The type of metadata to delete\r\n * @param {String|Metadata~MetadataInfo|Array.<String>|Array.<Metadata~MetadataInfo>} metadata - The fullName of metadata or metadata info to delete. If it is passed in fullName, the type parameter should not be empty.\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\n/**\r\n * Synonym of Metadata#delete().\r\n *\r\n * @method Metadata#deleteSync\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\n\r\n/**\r\n * Synchronously deletes specified metadata components in the organization.\r\n *\r\n * @method Metadata#delete\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String|Array.<String>} fullNames - The fullName of metadata to delete.\r\n * @param {Callback.<Metadata~SaveResult|Array.<Metadata~SaveResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult|Array.<Metadata~SaveResult>>}\r\n */\r\nMetadata.prototype.del =\r\nMetadata.prototype.deleteSync =\r\nMetadata.prototype[\"delete\"] = function(type, fullNames, callback) {\r\n  return this._invoke(\"deleteMetadata\", { type: type, fullNames: fullNames }).then(function(results) {\r\n    return _.isArray(results) ? _.map(results, convertToSaveResult) : convertToSaveResult(results);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Rename fullname of a metadata component in the organization\r\n *\r\n * @param {String} type - The type of metadata to delete\r\n * @param {String} oldFullName - The original fullName of metadata\r\n * @param {String} newFullName - The new fullName of metadata\r\n * @param {Callback.<Metadata~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~SaveResult>}\r\n */\r\nMetadata.prototype.rename = function(type, oldFullName, newFullName, callback) {\r\n  return this._invoke(\"renameMetadata\", { type: type, oldFullName: oldFullName, newFullName: newFullName }).then(function(result) {\r\n    return convertToSaveResult(result);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of asynchronous metadata calls\r\n *\r\n * @param {String|Array.<String>} ids - The asynchronous process ID(s)\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Metadata~AsyncResultLocator}\r\n */\r\nMetadata.prototype.checkStatus = function(ids, callback) {\r\n  var isArray = _.isArray(ids);\r\n  var res = this._invoke(\"checkStatus\", { asyncProcessId: ids });\r\n  return new AsyncResultLocator(this, res, isArray).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~DescribeMetadataResult\r\n * @prop {Array.<Object>} metadataObjects - One or more metadata components and their attributes\r\n * @prop {Array.<String>} metadataObjects.childXmlNames - List of child sub-components for this component\r\n * @prop {String} metadataObjects.directoryName - The name of the directory in the .zip file that contains this component\r\n * @prop {Boolean} metadataObjects.inFolder - Indicates whether the component is in a folder or not\r\n * @prop {Boolean} metadataObjects.metaFile - Indicates whether the component requires an accompanying metadata file\r\n * @prop {String} metadataObjects.suffix - The file suffix for this component\r\n * @prop {String} metadataObjects.xmlName - The name of the root element in the metadata file for this component\r\n * @prop {String} organizationNamespace - The namespace of the organization\r\n * @prop {Boolean} partialSaveAllowed - Indicates whether rollbackOnError is allowed or not\r\n * @prop {Boolean} testRequired - Indicates whether tests are required or not\r\n */\r\n\r\n/**\r\n * Retrieves the metadata which describes your organization, including Apex classes and triggers,\r\n * custom objects, custom fields on standard objects, tab sets that define an app,\r\n * and many other components.\r\n *\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Metadata~DescribeMetadataResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DescribeMetadataResult>}\r\n */\r\nMetadata.prototype.describe = function(version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  return this._invoke(\"describeMetadata\", { asOfVersion: version }).then(function(res) {\r\n    res.metadataObjects = _.isArray(res.metadataObjects) ? res.metadataObjects : [ res.metadataObjects ];\r\n    res.metadataObjects = _.map(res.metadataObjects, function(mo) {\r\n      if (mo.childXmlNames) {\r\n        mo.childXmlNames = _.isArray(mo.childXmlNames) ? mo.childXmlNames: [ mo.childXmlNames ];\r\n      }\r\n      mo.inFolder = mo.inFolder === 'true';\r\n      mo.metaFile = mo.metaFile === 'true';\r\n      return mo;\r\n    });\r\n    res.partialSaveAllowed = res.partialSaveAllowed === 'true';\r\n    res.testRequired = res.testRequired === 'true';\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~ListMetadataQuery\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} [folder] - The folder associated with the component.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Metadata~FileProperties\r\n * @prop {String} type - The metadata type, such as CustomObject, CustomField, or ApexClass\r\n * @prop {String} createdById - ID of the user who created the file\r\n * @prop {String} createdByName - Name of the user who created the file\r\n * @prop {String} createdDate - Date and time when the file was created\r\n * @prop {String} fileName - Name of the file\r\n * @prop {String} fullName - The file developer name used as a unique identifier for API access\r\n * @prop {String} id - ID of the file\r\n * @prop {String} lastModifiedById - ID of the user who last modified the file\r\n * @prop {String} lastModifiedByName - Name of the user who last modified the file\r\n * @prop {String} lastModifiedDate - Date and time that the file was last modified\r\n * @prop {String} [manageableState] - Indicates the manageable state of the specified component if it is contained in a package\r\n * @prop {String} [namespacePrefix] - The namespace prefix of the component\r\n */\r\n\r\n/**\r\n * Retrieves property information about metadata components in your organization\r\n *\r\n * @param {Metadata~ListMetadataQuery|Array.<Metadata~ListMetadataQuery>} queries - The criteria object(s) specifing metadata to list\r\n * @param {String} [version] - The API version for which you want metadata; for example, 29.0\r\n * @param {Callback.<Array.<Metadata~FileProperties>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<Metadata~FileProperties>>}\r\n */\r\nMetadata.prototype.list = function(queries, version, callback) {\r\n  if (!_.isString(version)) {\r\n    callback = version;\r\n    version = this._conn.version;\r\n  }\r\n  if (!_.isArray(queries)) {\r\n    queries = [ queries ];\r\n  }\r\n  return this._invoke(\"listMetadata\", { queries: queries, asOfVersion: version }, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveRequest\r\n */\r\n\r\n/**\r\n * Retrieves XML file representations of components in an organization\r\n *\r\n * @param {Metadata~RetrieveRequest} request - Options for determining which packages or files are retrieved\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~RetrieveResultLocator}\r\n */\r\nMetadata.prototype.retrieve = function(request, callback) {\r\n  var res = this._invoke(\"retrieve\", { request: request });\r\n  return new RetrieveResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call retrieve() and returns the zip file contents\r\n *\r\n * @param {String} id - Async process id returned from previous retrieve request\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nMetadata.prototype.checkRetrieveStatus = function(id, callback) {\r\n  return this._invoke(\"checkRetrieveStatus\", { asyncProcessId: id }, callback);\r\n};\r\n\r\n/**\r\n * Deploy components into an organization using zipped file representations\r\n *\r\n * @param {stream.Stream|Buffer|String} zipInput - Zipped file input source in readable stream, binary buffer or Base64-encoded string\r\n * @param {Object} [options] - Options used in deployment\r\n * @param {Boolean} [options.allowMissingFiles] - Specifies whether a deploy succeeds even if files that are specified in package.xml but are not in the .zip file or not.\r\n * @param {Boolean} [options.autoUpdatePackage] - If a file is in the .zip file but not specified in package.xml, specifies whether the file should be automatically added to the package or not.\r\n * @param {Boolean} [options.checkOnly] - Indicates whether Apex classes and triggers are saved to the organization as part of the deployment (false) or not (true).\r\n * @param {Boolean} [options.ignoreWarnings] - Indicates whether a warning should allow a deployment to complete successfully (true) or not (false). Defaults to false.\r\n * @param {Boolean} [options.performRetrieve] - Indicates whether a retrieve() call is performed immediately after the deployment (true) or not (false).\r\n * @param {Boolean} [options.purgeOnDelete] - If true, the deleted components in the destructiveChanges.xml manifest file aren't stored in the Recycle Bin.\r\n * @param {Boolean} [options.rollbackOnError] - Indicates whether any failure causes a complete rollback (true) or not (false).\r\n * @param {Boolean} [options.runAllTests] - If true, all Apex tests defined in the organization are run.\r\n * @param {Array.<String>} [options.runTests] - A list of Apex tests to be run during deployment.\r\n * @param {Boolean} [options.singlePackage] - Indicates whether the specified .zip file points to a directory structure with a single package (true) or a set of packages (false).\r\n * @param {Callback.<Metadata~AsyncResult>} [callback] - Callback function\r\n * @returns {Metadata~DeployResultLocator}\r\n */\r\nMetadata.prototype.deploy = function(zipInput, options, callback) {\r\n  if (!options || _.isFunction(options)) {\r\n    callback = options;\r\n    options = {};\r\n  }\r\n  var deferred = Promise.defer();\r\n  if (_.isObject(zipInput) && _.isFunction(zipInput.pipe)) {\r\n    var bufs = [];\r\n    zipInput.on('data', function(d) {\r\n      bufs.push(d);\r\n    });\r\n    zipInput.on('end', function() {\r\n      deferred.resolve(Buffer.concat(bufs).toString('base64'));\r\n    });\r\n    // zipInput.resume();\r\n  } else if (zipInput instanceof Buffer) {\r\n    deferred.resolve(zipInput.toString('base64'));\r\n  } else if (zipInput instanceof String || typeof zipInput === 'string') {\r\n    deferred.resolve(zipInput);\r\n  } else {\r\n    throw \"Unexpected zipInput type\";\r\n  }\r\n\r\n  var self = this;\r\n  var res = deferred.promise.then(function(zipContentB64) {\r\n    return self._invoke(\"deploy\", {\r\n      ZipFile: zipContentB64,\r\n      DeployOptions: options\r\n    }, callback);\r\n  });\r\n  return new DeployResultLocator(this, res).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Checks the status of declarative metadata call deploy()\r\n *\r\n * @param {String} id - Async process id returned from previous deploy request\r\n * @param {Boolean} [includeDetails] - Sets the DeployResult object to include details information (default: false)\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nMetadata.prototype.checkDeployStatus = function(id, includeDetails, callback) {\r\n  if (_.isObject(includeDetails) || _.isBoolean(includeDetails)) {\r\n    includeDetails = !!includeDetails;\r\n  } else {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  return this._invoke(\"checkDeployStatus\", {\r\n    asyncProcessId: id,\r\n    includeDetails : includeDetails\r\n  }).then(function(res) {\r\n    res.done = res.done === 'true';\r\n    res.success = res.success === 'true';\r\n    res.checkOnly = res.checkOnly === 'true';\r\n    res.runTestsEnabled = res.runTestsEnabled === 'true';\r\n    if (res.ignoreWarnings) {\r\n      res.ignoreWarnings = res.ignoreWarnings === 'true';\r\n    }\r\n    if (res.rollbackOnError) {\r\n      res.rollbackOnError = res.rollbackOnError === 'true';\r\n    }\r\n    res.numberComponentErrors = Number(res.numberComponentErrors);\r\n    res.numberComponentsDeployed = Number(res.numberComponentsDeployed);\r\n    res.numberComponentsTotal = Number(res.numberComponentsTotal);\r\n    res.numberTestErrors = Number(res.numberTestErrors);\r\n    res.numberTestsCompleted = Number(res.numberTestsCompleted);\r\n    res.numberTestsTotal = Number(res.numberTestsTotal);\r\n\r\n    return res;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * @typedef {Object} Metadata~AsyncResult\r\n * @prop {Boolean} done - Indicates whether the call has completed or not\r\n * @prop {String} id - ID of the component being created, updated, deleted, deployed, or retrieved\r\n * @prop {String} state - The state four possible values: Queued, InProgress, Completed, and Error.\r\n * @prop {String} [statusCode] - If an error occurred during the create(), update(), or delete() call, a status code is returned\r\n * @prop {String} [message] - Message corresponding to the statusCode field returned\r\n */\r\n\r\n/**\r\n * The locator class for Metadata API asynchronous call result\r\n *\r\n * @protected\r\n * @class Metadata~AsyncResultLocator\r\n * @extends events.EventEmitter\r\n * @implements Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} results - Promise object for async result info\r\n * @param {Boolean} [isArray] - Indicates whether the async request is given in array or single object\r\n */\r\nvar AsyncResultLocator = function(meta, results, isArray) {\r\n  this._meta = meta;\r\n  this._results = results;\r\n  this._isArray = isArray;\r\n};\r\n\r\ninherits(AsyncResultLocator, events.EventEmitter);\r\n\r\n/**\r\n * Promise/A+ interface\r\n * http://promises-aplus.github.io/promises-spec/\r\n *\r\n * Delegate to deferred promise, return promise instance for batch result\r\n *\r\n * @method Metadata~AsyncResultLocator#then\r\n */\r\nAsyncResultLocator.prototype.then = function(onResolve, onReject) {\r\n  var self = this;\r\n  return this._results.then(function(results) {\r\n    var convertType = function(res) {\r\n      if (res.$ && res.$[\"xsi:nil\"] === 'true') {\r\n        return null;\r\n      }\r\n      res.done = res.done === 'true';\r\n      return res;\r\n    };\r\n    results = _.isArray(results) ? _.map(results, convertType) : convertType(results);\r\n    if (self._isArray && !_.isArray(results)) {\r\n      results = [ results ];\r\n    }\r\n    return onResolve(results);\r\n  }, onReject);\r\n};\r\n\r\n/**\r\n * Promise/A+ extension\r\n * Call \"then\" using given node-style callback function\r\n *\r\n * @method Metadata~AsyncResultLocator#thenCall\r\n */\r\nAsyncResultLocator.prototype.thenCall = function(callback) {\r\n  return _.isFunction(callback) ? this.then(function(res) {\r\n    process.nextTick(function() {\r\n      callback(null, res);\r\n    });\r\n  }, function(err) {\r\n    process.nextTick(function() {\r\n      callback(err);\r\n    });\r\n  }) : this;\r\n};\r\n\r\n/**\r\n * Check the status of async request\r\n *\r\n * @method Metadata~AsyncResultLocator#check\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.check = function(callback) {\r\n  var self = this;\r\n  var meta = this._meta;\r\n  return this.then(function(results) {\r\n    var ids = _.isArray(results) ? _.map(results, function(res){ return res.id; }) : results.id;\r\n    self._ids = ids;\r\n    return meta.checkStatus(ids);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Polling until async call status becomes complete or error\r\n *\r\n * @method Metadata~AsyncResultLocator#poll\r\n * @param {Number} interval - Polling interval in milliseconds\r\n * @param {Number} timeout - Polling timeout in milliseconds\r\n */\r\nAsyncResultLocator.prototype.poll = function(interval, timeout) {\r\n  var self = this;\r\n  var startTime = new Date().getTime();\r\n  var poll = function() {\r\n    var now = new Date().getTime();\r\n    if (startTime + timeout < now) {\r\n      var errMsg = \"Polling time out.\";\r\n      if (self._ids) {\r\n        errMsg += \" Process Id = \" + self._ids;\r\n      }\r\n      self.emit('error', new Error(errMsg));\r\n      return;\r\n    }\r\n    self.check().then(function(results) {\r\n      var done = true;\r\n      var resultArr = _.isArray(results) ? results : [ results ];\r\n      for (var i=0, len=resultArr.length; i<len; i++) {\r\n        var result = resultArr[i];\r\n        if (result && !result.done) {\r\n          self.emit('progress', result);\r\n          done = false;\r\n        }\r\n      }\r\n      if (done) {\r\n        self.emit('complete', results);\r\n      } else {\r\n        setTimeout(poll, interval);\r\n      }\r\n    }, function(err) {\r\n      self.emit('error', err);\r\n    });\r\n  };\r\n  setTimeout(poll, interval);\r\n};\r\n\r\n/**\r\n * Check and wait until the async requests become in completed status\r\n *\r\n * @method Metadata~AsyncResultLocator#complete\r\n * @param {Callback.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~AsyncResult|Array.<Metadata~AsyncResult>>}\r\n */\r\nAsyncResultLocator.prototype.complete = function(callback) {\r\n  var deferred = Promise.defer();\r\n  this.on('complete', function(results) {\r\n    deferred.resolve(results);\r\n  });\r\n  this.on('error', function(err) {\r\n    deferred.reject(err);\r\n  });\r\n  var meta = this._meta;\r\n  this.poll(meta.pollInterval, meta.pollTimeout);\r\n  return deferred.promise.thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track retreive() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~RetrieveResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of retrieve call()\r\n */\r\nvar RetrieveResultLocator = function(meta, result) {\r\n  RetrieveResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(RetrieveResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~RetrieveResult\r\n * @prop {Array.<Metadata~FileProperties>} fileProperties - Contains information about the properties of each component in the .zip file, and the manifest file package.xml\r\n * @prop {String} id - ID of the component being retrieved\r\n * @prop {Array.<Object>} messages - Contains information about the success or failure of the retrieve() call\r\n * @prop {String} zipFile - The zip file returned by the retrieve request. Base 64-encoded binary data\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @memthod Metadata~RetrieveResultLocator#complete\r\n * @param {Callback.<Metadata~RetrieveResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~RetrieveResult>}\r\n */\r\nRetrieveResultLocator.prototype.complete = function(callback) {\r\n  var meta = this._meta;\r\n  return RetrieveResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkRetrieveStatus(result.id);\r\n  }).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Change the retrieved result to Node.js readable stream\r\n *\r\n * @method Metadata~RetrieveResultLocator#stream\r\n * @returns {stream.Readable}\r\n */\r\nRetrieveResultLocator.prototype.stream = function() {\r\n  var self = this;\r\n  var resultStream = new stream.Readable();\r\n  var reading = false;\r\n  resultStream._read = function() {\r\n    if (reading) { return; }\r\n    reading = true;\r\n    self.complete(function(err, result) {\r\n      if (err) {\r\n        resultStream.emit('error', err);\r\n      } else {\r\n        resultStream.push(Buffer.from(result.zipFile, 'base64'));\r\n        resultStream.push(null);\r\n      }\r\n    });\r\n  };\r\n  return resultStream;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/**\r\n * The locator class to track deploy() Metadata API call result\r\n *\r\n * @protected\r\n * @class Metadata~DeployResultLocator\r\n * @extends Metadata~AsyncResultLocator\r\n * @param {Metadata} meta - Metadata API object\r\n * @param {Promise.<Metadata~AsyncResult>} result - Promise object for async result of deploy() call\r\n */\r\nvar DeployResultLocator = function(meta, result) {\r\n  DeployResultLocator.super_.call(this, meta, result);\r\n};\r\n\r\ninherits(DeployResultLocator, AsyncResultLocator);\r\n\r\n/**\r\n * @typedef {Object} Metadata~DeployResult\r\n * @prop {String} id - ID of the component being deployed\r\n * @prop {Boolean} checkOnly - Indicates whether this deployment is being used to check the validity of the deployed files without making any changes in the organization or not\r\n * @prop {String} completedDate - Timestamp for when the deployment process ended\r\n * @prop {String} createdDate - Timestamp for when the deploy() call was received\r\n * @prop {Array.<Object>} [details] - Provides the details of a deployment that is in-progress or ended, if includeDetails is set to true in checkDeployStatus() call\r\n * @prop {Boolean} done - Indicates whether the server finished processing the deploy() call for the specified id\r\n * @prop {String} [errorMessage] - Message corresponding to the values in the errorStatusCode field\r\n * @prop {String} [errorStatusCode] - If an error occurred during the deploy() call, a status code is returned, and the message corresponding to the status code is returned in the errorMessagefield\r\n * @prop {Boolean} [ignoreWarnings] - Specifies whether a deployment should continue even if the deployment generates warnings\r\n * @prop {String} lastModifiedDate - Timestamp of the last update for the deployment process\r\n * @prop {Number} numberComponentErrors - The number of components that generated errors during this deployment\r\n * @prop {Number} numberComponentsDeployed - The number of components deployed in the deployment process\r\n * @prop {Number} numberComponentsTotal - The total number of components in the deployment\r\n * @prop {Number} numberTestErrors - The number of Apex tests that have generated errors during this deployment\r\n * @prop {Number} numberTestsCompleted - The number of completedApex tests for this deployment\r\n * @prop {Number} numberTestsTotal - The total number of Apex tests for this deployment\r\n * @prop {Boolean} [rollbackOnError] - Indicates whether any failure causes a complete rollback or not. Default is true.\r\n * @prop {String} startDate - Timestamp for when the deployment process began\r\n * @prop {String} status - Indicates the current state of the deployment\r\n * @prop {Boolean} success - Indicates whether the deployment was successful or not\r\n */\r\n\r\n/**\r\n * Check and wait until the async request becomes in completed status,\r\n * and retrieve the result data.\r\n *\r\n * @method Metadata~DeployResultLocator#complete\r\n * @param {Callback.<Metadata~DeployResult>} [callback] - Callback function\r\n * @returns {Promise.<Metadata~DeployResult>}\r\n */\r\nDeployResultLocator.prototype.complete = function(includeDetails, callback) {\r\n  if (_.isFunction(includeDetails)) {\r\n    callback = includeDetails;\r\n    includeDetails = false;\r\n  }\r\n  var meta = this._meta;\r\n  return DeployResultLocator.super_.prototype.complete.call(this).then(function(result) {\r\n    return meta.checkDeployStatus(result.id, includeDetails);\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.metadata = new Metadata(conn);\r\n});\r\n","/**\r\n * @file Salesforce SOAP API\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _ = require('lodash/core');\r\nvar jsforce = require('../core');\r\nvar SOAP = require('../soap');\r\n\r\n/**\r\n * API class for Partner SOAP call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar SoapApi = module.exports = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\n/**\r\n * Call SOAP Api (Partner) endpoint\r\n * @private\r\n */\r\nSoapApi.prototype._invoke = function(method, message, schema, callback) {\r\n  var soapEndpoint = new SOAP(this._conn, {\r\n    xmlns: \"urn:partner.soap.sforce.com\",\r\n    endpointUrl: this._conn.instanceUrl + \"/services/Soap/u/\" + this._conn.version\r\n  });\r\n  return soapEndpoint.invoke(method, message, { result: schema }).then(function(res) {\r\n    return res.result;\r\n  }).thenCall(callback);\r\n};\r\n\r\n\r\n/* */\r\nvar Schemas = {};\r\n\r\n/**\r\n * @typedef SoapApi~LeadConvert\r\n * @prop {String} convertedStatus - Status of converted lead\r\n * @prop {String} leadId - Lead record Id to convert\r\n * @prop {String} [accountId] - Account record Id to assign the converted record\r\n * @prop {String} [contactId] - Contact record Id to assign the converted record\r\n * @prop {Boolean} [doNotCreateOpportunity] - True if you don't want to create a new opportunity\r\n * @prop {String} [opportunityName] - Name of opportunity to create\r\n * @prop {Boolean} [overwriteLeadSource] - True if overwriting lead source\r\n * @prop {String} [ownerId] - Owner Id\r\n * @prop {Boolean} [sendNotificationEmail] - True if send notification email\r\n */\r\n/**\r\n * @typedef SoapApi~LeadConvertResult\r\n * @prop {String} leadId - Lead record Id to convert\r\n * @prop {String} [accountId] - Account record Id of converted lead\r\n * @prop {String} [contactId] - Contact record Id of converted lead\r\n * @prop {String} [opportunityId] - Opportunity record Id created in conversion\r\n * @prop {Boolean} success - True if successfully converted\r\n * @prop {Array.<Object>} errors - Error\r\n */\r\n/**\r\n * Converts a Lead into an Account, Contact, or (optionally) an Opportunity.\r\n *\r\n * @param {SoapApi~LeadConvert|Array.<SoapApi~LeadConvert>} leadConverts\r\n * @param {Callback.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~LeadConvertResult|Array.<SoapApi~LeadConvertResult>>}\r\n */\r\nSoapApi.prototype.convertLead = function(leadConverts, callback) {\r\n  var schema = _.isArray(leadConverts) ? [ Schemas.LeadConvertResult ] : Schemas.LeadConvertResult;\r\n  return this._invoke(\"convertLead\", { leadConverts: leadConverts }, schema, callback);\r\n};\r\nSchemas.LeadConvertResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  leadId: 'string',\r\n  accountId: 'string',\r\n  contactId: 'string',\r\n  opportunityId: 'string'\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~MergeRequest\r\n * @prop {Object} masterRecord - The merge destination record\r\n * @prop {Array.<String>} recordToMergeIds - Ids of records to merge\r\n */\r\n/**\r\n * @typedef SoapApi~MergeResult\r\n * @prop {Boolean} success - True if successfully merged\r\n * @prop {Array.<Object>} errors - Error\r\n * @prop {String} id - ID of the master record\r\n * @prop {Array.<String>} mergedRecordIds - ID of the records that were merged into the master record\r\n * @prop {Array.<String>} updatedRelatedIds - ID of all related records that were moved (re-parented) as a result of the merge\r\n */\r\n\r\n/**\r\n * Merge up to three records into one\r\n *\r\n * @param {SoapApi~MergeRequest|Array.<SoapApi~MergeRequest>} mergeRequests\r\n * @param {Callback.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~MergeResult|Array.<SoapApi~MergeResult>>}\r\n */\r\nSoapApi.prototype.merge = function(mergeRequests, callback) {\r\n  var schema = _.isArray(mergeRequests) ? [ Schemas.MergeResult ] : Schemas.MergeResult;\r\n  return this._invoke(\"merge\", { mergeRequests: mergeRequests }, schema, callback);\r\n};\r\nSchemas.MergeResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string',\r\n  mergedRecordIds: ['string'],\r\n  updatedRelatedIds: ['string']\r\n};\r\n\r\n\r\n/**\r\n * @typedef SoapApi~EmptyRecycleBinResult\r\n * @prop {String} id - ID of an sObject that you attempted to delete from the Recycle Bin\r\n * @prop {Boolean} success - Whether the call succeeded (true) or not (false) for this record\r\n * @prop {Array.<Object>} errors - Errors\r\n */\r\n/**\r\n * Delete records from the recycle bin immediately\r\n *\r\n * @param {Array.<String>} ids - Record ids to empty from recycle bin\r\n * @param {Callback.<Array.<SoapApi~EmptyRecycleBinResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<SoapApi~EmptyRecycleBinResult>>}\r\n */\r\nSoapApi.prototype.emptyRecycleBin = function(ids, callback) {\r\n  return this._invoke(\"emptyRecycleBin\", { ids: ids }, [ Schemas.EmptyRecycleBinResult ], callback);\r\n};\r\nSchemas.EmptyRecycleBinResult = {\r\n  id: 'string',\r\n  success: 'boolean',\r\n  errors: []\r\n};\r\n\r\n\r\n/**\r\n * @typedef SoapApi~DescribeTabSetResult\r\n * @prop {String} label - The display label for this standard or custom app\r\n * @prop {String} logoUrl - A fully qualified URL to the logo image associated with the standard or custom app\r\n * @prop {String} namespace - Namespace of application package\r\n * @prop {Boolean} selected - If true, then this standard or custom app is the user’s currently selected app\r\n * @prop {Array.<SoapApi~DescribeTab>} tabs - An array of tabs that are displayed for the specified standard app or custom app\r\n */\r\n/**\r\n * @typedef SoapApi~DescribeTab\r\n * @prop {Array.<Object>} colors - Array of color information used for a tab\r\n * @prop {Boolean} custom - true if this is a custom tab\r\n * @prop {String} iconUrl - The URL for the main 32 x 32 pixel icon for a tab\r\n * @prop {Array.<Object>} icons - Array of icon information used for a tab\r\n * @prop {String} label - The display label for this tab\r\n * @prop {String} miniIconUrl - The URL for the 16 x 16 pixel icon that represents a tab\r\n * @prop {String} name - The API name of the tab\r\n * @prop {String} sobjectName - The name of the sObject that is primarily displayed on this tab\r\n * @prop {String} url - A fully qualified URL for viewing this tab\r\n */\r\n/**\r\n * Returns information about the standard and custom apps available to the logged-in user\r\n *\r\n * @param {Callback.<Array.<SoapApi~DescribeTabSetResult>>} [callback] - Callback function\r\n * @returns {Promise.<Array.<SoapApi~DescribeTabSetResult>>}\r\n */\r\nSoapApi.prototype.describeTabs = function(callback) {\r\n  return this._invoke(\"describeTabs\", {}, [ Schemas.DescribeTabSetResult ], callback);\r\n};\r\nSchemas.DescribeTabSetResult = {\r\n  label: 'string',\r\n  logoUrl: 'string',\r\n  namespace: 'string',\r\n  selected: 'boolean',\r\n  tabs: [{\r\n    colors: [{\r\n      theme: 'string',\r\n      color: 'string',\r\n      context: 'string'\r\n    }],\r\n    iconUrl: 'string',\r\n    icons: [{\r\n      theme: 'string',\r\n      height: 'number',\r\n      width: 'number',\r\n      url: 'string',\r\n      contentType: 'string'\r\n    }],\r\n    label: 'string',\r\n    custom: 'boolean',\r\n    miniIconUrl: 'string',\r\n    name: 'string',\r\n    sobjectName: 'string',\r\n    url: 'string'\r\n  }]\r\n};\r\n\r\n/**\r\n * Retrieves the current system timestamp (Coordinated Universal Time (UTC) time zone) from the API\r\n *\r\n * @typedef SoapApi~ServerTimestampResult\r\n * @prop {String} timestamp - Timestamp\r\n */\r\n/**\r\n * @param {Callback.<SoapApi~ServerTimestampResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~ServerTimestampResult>}\r\n */\r\nSoapApi.prototype.getServerTimestamp = function(callback) {\r\n  return this._invoke(\"getServerTimestamp\", {}, Schemas.GetServerTimestampResult, callback);\r\n};\r\nSchemas.GetServerTimestampResult = {\r\n  timestamp: 'string'\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~UserInfoResult\r\n * @prop {Boolean} accessibilityMode\r\n * @prop {String} currencySymbol\r\n * @prop {Number} orgAttachmentFileSizeLimit\r\n * @prop {String} orgDefaultCurrencyIsoCode\r\n * @prop {String} orgDisallowHtmlAttachments\r\n * @prop {Boolean} orgHasPersonAccounts\r\n * @prop {String} organizationId\r\n * @prop {Boolean} organizationMultiCurrency\r\n * @prop {String} organizationName\r\n * @prop {String} profileId\r\n * @prop {String} roleId\r\n * @prop {Number} sessionSecondsValid\r\n * @prop {String} userDefaultCurrencyIsoCode\r\n * @prop {String} userEmail\r\n * @prop {String} userFullName\r\n * @prop {String} userId\r\n * @prop {String} userLanguage\r\n * @prop {String} userLocale\r\n * @prop {String} userName\r\n * @prop {String} userTimeZone\r\n * @prop {String} userType\r\n * @prop {String} userUiSkin\r\n */\r\n/**\r\n * Retrieves personal information for the user associated with the current session\r\n *\r\n * @param {Callback.<SoapApi~UserInfoResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~UserInfoResult>}\r\n */\r\nSoapApi.prototype.getUserInfo = function(callback) {\r\n  return this._invoke(\"getUserInfo\", {}, Schemas.GetUserInfoResult, callback);\r\n};\r\nSchemas.GetUserInfoResult = {\r\n  accessibilityMode: 'boolean',\r\n  currencySymbol: 'string',\r\n  orgAttachmentFileSizeLimit: 'number',\r\n  orgDefaultCurrencyIsoCode: 'string',\r\n  orgDisallowHtmlAttachments: 'boolean',\r\n  orgHasPersonAccounts: 'boolean',\r\n  organizationId: 'string',\r\n  organizationMultiCurrency: 'boolean',\r\n  organizationName: 'string',\r\n  profileId: 'string',\r\n  roleId: 'string',\r\n  sessionSecondsValid: 'number',\r\n  userDefaultCurrencyIsoCode: 'string',\r\n  userEmail: 'string',\r\n  userFullName: 'string',\r\n  userId: 'string',\r\n  userLanguage: 'string',\r\n  userLocale: 'string',\r\n  userName: 'string',\r\n  userTimeZone: 'string',\r\n  userType: 'string',\r\n  userUiSkin: 'string'\r\n};\r\n\r\n/**\r\n * Sets the specified user’s password to the specified value\r\n *\r\n * @param {String} userId - User Id to set password\r\n * @param {String} password - New password\r\n * @param {Callback.<String>} [callback] - Callback function\r\n * @returns {Promise.<String>}\r\n */\r\nSoapApi.prototype.setPassword = function(userId, password, callback) {\r\n  return this._invoke(\"setPassword\", { userId: userId, password: password }, callback);\r\n};\r\n\r\n/**\r\n * @typedef SoapApi~ResetPasswordResult\r\n * @prop {String} password\r\n */\r\n/**\r\n * Resets the specified user’s password\r\n *\r\n * @param {String} userId - User Id to set password\r\n * @param {String} password - New password\r\n * @param {Callback.<SoapApi~ResetPasswordResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~ResetPasswordResult>}\r\n */\r\nSoapApi.prototype.resetPassword = function(userId, callback) {\r\n  return this._invoke(\"resetPassword\", { userId: userId }, callback);\r\n};\r\n\r\n/**\r\n * Adds one or more new records to your organization’s data\r\n *\r\n * @param {Array.<Object>} sObjects - Records to insert\r\n * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~SaveResult>}\r\n */\r\nSoapApi.prototype.create = function(sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.SaveResult ] : Schemas.SaveResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"create\", args, schema, callback);\r\n};\r\n\r\n/**\r\n * Updates one or more existing records in your organization’s data.\r\n *\r\n * @param {Array.<Object>} sObjects - Records to update\r\n * @param {Callback.<SoapApi~SaveResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~SaveResult>}\r\n */\r\nSoapApi.prototype.update = function(sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.SaveResult ] : Schemas.SaveResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"update\", args, schema, callback);\r\n};\r\n\r\nSchemas.SaveResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n/**\r\n * Creates new records and updates existing records in your organization’s data.\r\n *\r\n * @param {Array.<Object>} sObjects - Records to upsert\r\n * @param {Callback.<SoapApi~UpsertResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~UpsertResult>}\r\n */\r\nSoapApi.prototype.upsert = function(externalIdFieldName, sObjects, callback) {\r\n  var schema = _.isArray(sObjects) ? [ Schemas.UpsertResult ] : Schemas.UpsertResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:externalIDFieldName' : externalIdFieldName,\r\n    'ns1:sObjects' : sObjects\r\n  };\r\n  return this._invoke(\"upsert\", args, schema, callback);\r\n};\r\n\r\nSchemas.UpsertResult = {\r\n  created: 'boolean',\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n/**\r\n * Deletes one or more records from your organization’s data\r\n *\r\n * @param {Array.<Object>} ids - Id of records to delete\r\n * @param {Callback.<SoapApi~DeleteResult>} [callback] - Callback function\r\n * @returns {Promise.<SoapApi~DeleteResult>}\r\n */\r\nSoapApi.prototype.delete = function(ids, callback) {\r\n  var schema = _.isArray(ids) ? [ Schemas.DeleteResult ] : Schemas.DeleteResult;\r\n  var args = {\r\n    '@xmlns' : 'urn:partner.soap.sforce.com',\r\n    '@xmlns:ns1' : 'sobject.partner.soap.sforce.com',\r\n    'ns1:ids' : ids\r\n  };\r\n  return this._invoke(\"delete\", args, schema, callback);\r\n};\r\n\r\nSchemas.DeleteResult = {\r\n  success: 'boolean',\r\n  errors: [],\r\n  id: 'string'\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.soap = new SoapApi(conn);\r\n});\r\n\r\n\r\nmodule.exports = SoapApi;\r\n","/**\r\n * Faye Client extensions: https://faye.jcoglan.com/browser/extensions.html\r\n *\r\n * For use with Streaming.prototype.createClient()\r\n**/\r\nvar StreamingExtension = {};\r\n\r\n/**\r\n * Constructor for an auth failure detector extension\r\n *\r\n * Based on new feature released with Salesforce Spring '18:\r\n * https://releasenotes.docs.salesforce.com/en-us/spring18/release-notes/rn_messaging_cometd_auth_validation.htm?edition=&impact=\r\n *\r\n * Example triggering error message:\r\n *\r\n * ```\r\n * {\r\n *   \"ext\":{\r\n *     \"sfdc\":{\"failureReason\":\"401::Authentication invalid\"},\r\n *     \"replay\":true},\r\n *   \"advice\":{\"reconnect\":\"none\"},\r\n *   \"channel\":\"/meta/handshake\",\r\n *   \"error\":\"403::Handshake denied\",\r\n *   \"successful\":false\r\n * }\r\n * ```\r\n *\r\n * Example usage:\r\n *\r\n * ```javascript\r\n * const conn = new jsforce.Connection({ … });\r\n * \r\n * const channel = \"/event/My_Event__e\";\r\n * \r\n * // Exit the Node process when auth fails\r\n * const exitCallback = () => process.exit(1);\r\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\r\n * \r\n * const fayeClient = conn.streaming.createClient([ authFailureExt ]);\r\n * \r\n * const subscription = fayeClient.subscribe(channel, data => {\r\n *   console.log('topic received data', data);\r\n * });\r\n * \r\n * subscription.cancel();\r\n * ```\r\n *\r\n * @param {Function} failureCallback - Invoked when authentication becomes invalid\r\n */\r\nStreamingExtension.AuthFailure = function(failureCallback) {\r\n  this.incoming = function(message, callback) {\r\n    if (\r\n      (message.channel === '/meta/connect' ||\r\n        message.channel === '/meta/handshake')\r\n      && message.advice\r\n      && message.advice.reconnect == 'none'\r\n    ) {\r\n      failureCallback(message);\r\n    } else {\r\n      callback(message);\r\n    }\r\n  }\r\n};\r\n\r\n/**\r\n * Constructor for a durable streaming replay extension\r\n *\r\n * Modified from original Salesforce demo source code:\r\n * https://github.com/developerforce/SalesforceDurableStreamingDemo/blob/3d4a56eac956f744ad6c22e6a8141b6feb57abb9/staticresources/cometdReplayExtension.resource\r\n * \r\n * Example usage:\r\n *\r\n * ```javascript\r\n * const conn = new jsforce.Connection({ … });\r\n * \r\n * const channel = \"/event/My_Event__e\";\r\n * const replayId = -2; // -2 is all retained events\r\n * \r\n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\r\n * \r\n * const fayeClient = conn.streaming.createClient([ replayExt ]);\r\n * \r\n * const subscription = fayeClient.subscribe(channel, data => {\r\n *   console.log('topic received data', data);\r\n * });\r\n * \r\n * subscription.cancel();\r\n * ```\r\n */\r\nStreamingExtension.Replay = function(channel, replayId) {\r\n  var REPLAY_FROM_KEY = \"replay\";\r\n  \r\n  var _extensionEnabled = replayId != null ? true : false;\r\n  var _replay = replayId;\r\n  var _channel = channel;\r\n\r\n  this.setExtensionEnabled = function(extensionEnabled) {\r\n    _extensionEnabled = extensionEnabled;\r\n  }\r\n\r\n  this.setReplay = function (replay) {\r\n    _replay = parseInt(replay, 10);\r\n  }\r\n\r\n  this.setChannel = function(channel) {\r\n    _channel = channel;\r\n  }\r\n\r\n  this.incoming = function(message, callback) {\r\n    if (message.channel === '/meta/handshake') {\r\n      if (message.ext && message.ext[REPLAY_FROM_KEY] == true) {\r\n        _extensionEnabled = true;\r\n      }\r\n    } else if (message.channel === _channel && message.data && message.data.event && message.data.event.replayId) {\r\n      _replay = message.data.event.replayId;\r\n    }\r\n    callback(message);\r\n  }\r\n  \r\n  this.outgoing = function(message, callback) {\r\n    if (message.channel === '/meta/subscribe' && message.subscription === _channel) {\r\n      if (_extensionEnabled) {\r\n        if (!message.ext) { message.ext = {}; }\r\n\r\n        var replayFromMap = {};\r\n        replayFromMap[_channel] = _replay;\r\n\r\n        // add \"ext : { \"replay\" : { CHANNEL : REPLAY_VALUE }}\" to subscribe message\r\n        message.ext[REPLAY_FROM_KEY] = replayFromMap;\r\n      }\r\n    }\r\n    callback(message);\r\n  };\r\n};\r\n\r\nmodule.exports = StreamingExtension;\r\n","/**\r\n * @file Manages Streaming APIs\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar events = require('events'),\r\n    inherits = require('inherits'),\r\n    _ = require('lodash/core'),\r\n    Faye   = require('faye'),\r\n    StreamingExtension = require('./streaming-extension'),\r\n    jsforce = require('../core');\r\n\r\n/**\r\n * Streaming API topic class\r\n *\r\n * @class Streaming~Topic\r\n * @param {Streaming} steaming - Streaming API object\r\n * @param {String} name - Topic name\r\n */\r\nvar Topic = function(streaming, name) {\r\n  this._streaming = streaming;\r\n  this.name = name;\r\n};\r\n\r\n/**\r\n * @typedef {Object} Streaming~StreamingMessage\r\n * @prop {Object} event\r\n * @prop {Object} event.type - Event type\r\n * @prop {Record} sobject - Record information\r\n */\r\n/**\r\n * Subscribe listener to topic\r\n *\r\n * @method Streaming~Topic#subscribe\r\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\r\n * @returns {Subscription} - Faye subscription object\r\n */\r\nTopic.prototype.subscribe = function(listener) {\r\n  return this._streaming.subscribe(this.name, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribe listener from topic\r\n *\r\n * @method Streaming~Topic#unsubscribe\r\n * @param {Callback.<Streaming~StreamingMesasge>} listener - Streaming message listener\r\n * @returns {Streaming~Topic}\r\n */\r\nTopic.prototype.unsubscribe = function(listener) {\r\n  this._streaming.unsubscribe(this.name, listener);\r\n  return this;\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Streaming API Generic Streaming Channel\r\n *\r\n * @class Streaming~Channel\r\n * @param {Streaming} steaming - Streaming API object\r\n * @param {String} name - Channel name (starts with \"/u/\")\r\n */\r\nvar Channel = function(streaming, name) {\r\n  this._streaming = streaming;\r\n  this._name = name;\r\n};\r\n\r\n/**\r\n * Subscribe to channel\r\n *\r\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\r\n * @returns {Subscription} - Faye subscription object\r\n */\r\nChannel.prototype.subscribe = function(listener) {\r\n  return this._streaming.subscribe(this._name, listener);\r\n};\r\n\r\nChannel.prototype.unsubscribe = function(listener) {\r\n  this._streaming.unsubscribe(this._name, listener);\r\n  return this;\r\n};\r\n\r\nChannel.prototype.push = function(events, callback) {\r\n  var isArray = _.isArray(events);\r\n  events = isArray ? events : [ events ];\r\n  var conn = this._streaming._conn;\r\n  if (!this._id) {\r\n    this._id = conn.sobject('StreamingChannel').findOne({ Name: this._name }, 'Id')\r\n      .then(function(rec) { return rec.Id });\r\n  }\r\n  return this._id.then(function(id) {\r\n    var channelUrl = '/sobjects/StreamingChannel/' + id + '/push';\r\n    return conn.requestPost(channelUrl, { pushEvents: events });\r\n  }).then(function(rets) {\r\n    return isArray ? rets : rets[0];\r\n  }).thenCall(callback);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n\r\n/**\r\n * Streaming API class\r\n *\r\n * @class\r\n * @extends events.EventEmitter\r\n * @param {Connection} conn - Connection object\r\n */\r\nvar Streaming = function(conn) {\r\n  this._conn = conn;\r\n};\r\n\r\ninherits(Streaming, events.EventEmitter);\r\n\r\n/** @private **/\r\nStreaming.prototype._createClient = function(forChannelName, extensions) {\r\n  // forChannelName is advisory, for an API workaround. It does not restrict or select the channel.\r\n  var needsReplayFix = typeof forChannelName === 'string' && forChannelName.indexOf('/u/') === 0;\r\n  var endpointUrl = [\r\n    this._conn.instanceUrl,\r\n    // special endpoint \"/cometd/replay/xx.x\" is only available in 36.0.\r\n    // See https://releasenotes.docs.salesforce.com/en-us/summer16/release-notes/rn_api_streaming_classic_replay.htm\r\n    \"cometd\" + (needsReplayFix === true && this._conn.version === \"36.0\" ? \"/replay\" : \"\"),\r\n    this._conn.version\r\n  ].join('/');\r\n  var fayeClient = new Faye.Client(endpointUrl, {});\r\n  fayeClient.setHeader('Authorization', 'OAuth '+this._conn.accessToken);\r\n  if (extensions instanceof Array) {\r\n    extensions.forEach(function(extension) {\r\n      fayeClient.addExtension(extension);\r\n    });\r\n  }\r\n  if (fayeClient._dispatcher.getConnectionTypes().indexOf('callback-polling') === -1) {\r\n    // prevent streaming API server error\r\n    fayeClient._dispatcher.selectTransport('long-polling');\r\n    fayeClient._dispatcher._transport.batching = false;\r\n  }\r\n  return fayeClient;\r\n};\r\n\r\n/** @private **/\r\nStreaming.prototype._getFayeClient = function(channelName) {\r\n  var isGeneric = channelName.indexOf('/u/') === 0;\r\n  var clientType = isGeneric ? 'generic' : 'pushTopic';\r\n  if (!this._fayeClients || !this._fayeClients[clientType]) {\r\n    this._fayeClients = this._fayeClients || {};\r\n    this._fayeClients[clientType] = this._createClient(channelName);\r\n  }\r\n  return this._fayeClients[clientType];\r\n};\r\n\r\n\r\n/**\r\n * Get named topic\r\n *\r\n * @param {String} name - Topic name\r\n * @returns {Streaming~Topic}\r\n */\r\nStreaming.prototype.topic = function(name) {\r\n  this._topics = this._topics || {};\r\n  var topic = this._topics[name] =\r\n    this._topics[name] || new Topic(this, name);\r\n  return topic;\r\n};\r\n\r\n/**\r\n * Get Channel for Id\r\n * @param {String} channelId - Id of StreamingChannel object\r\n * @returns {Streaming~Channel}\r\n */\r\nStreaming.prototype.channel = function(channelId) {\r\n  return new Channel(this, channelId);\r\n};\r\n\r\n/**\r\n * Subscribe topic/channel\r\n *\r\n * @param {String} name - Topic name\r\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\r\n * @returns {Subscription} - Faye subscription object\r\n */\r\nStreaming.prototype.subscribe = function(name, listener) {\r\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\r\n  var fayeClient = this._getFayeClient(channelName);\r\n  return fayeClient.subscribe(channelName, listener);\r\n};\r\n\r\n/**\r\n * Unsubscribe topic\r\n *\r\n * @param {String} name - Topic name\r\n * @param {Callback.<Streaming~StreamingMessage>} listener - Streaming message listener\r\n * @returns {Streaming}\r\n */\r\nStreaming.prototype.unsubscribe = function(name, listener) {\r\n  var channelName = name.indexOf('/') === 0 ? name : '/topic/' + name;\r\n  var fayeClient = this._getFayeClient(channelName);\r\n  fayeClient.unsubscribe(channelName, listener);\r\n  return this;\r\n};\r\n\r\n\r\n/**\r\n * Create a Streaming client, optionally with extensions\r\n *\r\n * See Faye docs for implementation details: https://faye.jcoglan.com/browser/extensions.html\r\n *\r\n * Example usage:\r\n * \r\n * ```javascript\r\n * // Establish a Salesforce connection. (Details elided)\r\n * const conn = new jsforce.Connection({ … });\r\n * \r\n * const fayeClient = conn.streaming.createClient();\r\n * \r\n * const subscription = fayeClient.subscribe(channel, data => {\r\n *   console.log('topic received data', data);\r\n * });\r\n * \r\n * subscription.cancel();\r\n * ```\r\n * \r\n * Example with extensions, using Replay & Auth Failure extensions in a server-side Node.js app:\r\n * \r\n * ```javascript\r\n * // Establish a Salesforce connection. (Details elided)\r\n * const conn = new jsforce.Connection({ … });\r\n * \r\n * const channel = \"/event/My_Event__e\";\r\n * const replayId = -2; // -2 is all retained events\r\n * \r\n * const exitCallback = () => process.exit(1);\r\n * const authFailureExt = new jsforce.StreamingExtension.AuthFailure(exitCallback);\r\n * \r\n * const replayExt = new jsforce.StreamingExtension.Replay(channel, replayId);\r\n * \r\n * const fayeClient = conn.streaming.createClient([\r\n *   authFailureExt,\r\n *   replayExt\r\n * ]);\r\n * \r\n * const subscription = fayeClient.subscribe(channel, data => {\r\n *   console.log('topic received data', data);\r\n * });\r\n * \r\n * subscription.cancel();\r\n * ```\r\n * \r\n * @param {Array} Extensions - Optional, extensions to apply to the Faye client\r\n * @returns {FayeClient} - Faye client object\r\n */\r\nStreaming.prototype.createClient = function(extensions) {\r\n  return this._createClient(null, extensions);\r\n};\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.streaming = new Streaming(conn);\r\n});\r\n\r\n/*\r\n * \r\n */\r\njsforce.StreamingExtension = StreamingExtension;\r\n\r\nmodule.exports = Streaming;\r\n","/**\r\n * @file Manages Tooling APIs\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar jsforce = require('../core'),\r\n    _     = require('lodash/core'),\r\n    Cache = require('../cache');\r\n\r\n/**\r\n * API class for Tooling API call\r\n *\r\n * @class\r\n * @param {Connection} conn - Connection\r\n */\r\nvar Tooling = function(conn) {\r\n  this._conn = conn;\r\n  this._logger = conn._logger;\r\n  var delegates = [\r\n    \"query\",\r\n    \"queryMore\",\r\n    \"_toRecordResult\",\r\n    \"create\",\r\n    \"_createSingle\",\r\n    \"_createParallel\",\r\n    \"_createMany\",\r\n    \"insert\",\r\n    \"retrieve\",\r\n    \"_retrieveSingle\",\r\n    \"_retrieveParallel\",\r\n    \"_retrieveMany\",\r\n    \"update\",\r\n    \"_updateSingle\",\r\n    \"_updateParallel\",\r\n    \"_updateMany\",\r\n    \"upsert\",\r\n    \"del\",\r\n    \"delete\",\r\n    \"destroy\",\r\n    \"_destroySingle\",\r\n    \"_destroyParallel\",\r\n    \"_destroyMany\",\r\n    \"describe\",\r\n    \"describeGlobal\",\r\n    \"sobject\"\r\n  ];\r\n  delegates.forEach(function(method) {\r\n    this[method] = conn.constructor.prototype[method];\r\n  }, this);\r\n\r\n  this.cache = new Cache();\r\n\r\n  var cacheOptions = {\r\n    key: function(type) { return type ? \"describe.\" + type : \"describe\"; }\r\n  };\r\n  this.describe$ = this.cache.makeCacheable(this.describe, this, cacheOptions);\r\n  this.describe = this.cache.makeResponseCacheable(this.describe, this, cacheOptions);\r\n  this.describeSObject$ = this.describe$;\r\n  this.describeSObject = this.describe;\r\n\r\n  cacheOptions = { key: 'describeGlobal' };\r\n  this.describeGlobal$ = this.cache.makeCacheable(this.describeGlobal, this, cacheOptions);\r\n  this.describeGlobal = this.cache.makeResponseCacheable(this.describeGlobal, this, cacheOptions);\r\n\r\n  this.initialize();\r\n};\r\n\r\n/**\r\n * Initialize tooling API\r\n * @protected\r\n */\r\nTooling.prototype.initialize = function() {\r\n  this.sobjects = {};\r\n  this.cache.clear();\r\n  this.cache.get('describeGlobal').removeAllListeners('value');\r\n  this.cache.get('describeGlobal').on('value', _.bind(function(res) {\r\n    if (res.result) {\r\n      var types = _.map(res.result.sobjects, function(so) { return so.name; });\r\n      types.forEach(this.sobject, this);\r\n    }\r\n  }, this));\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype._baseUrl = function() {\r\n  return this._conn._baseUrl() + \"/tooling\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype._supports = function(feature) {\r\n  // should return false in order not to use compsite collection\r\n  if (feature === 'sobject-collection') {\r\n    return false;\r\n  }\r\n  return this._conn._supports.apply(this._conn, arguments);\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nTooling.prototype.request = function() {\r\n  return this._conn.request.apply(this._conn, arguments);\r\n};\r\n\r\n/**\r\n * Execute query by using SOQL\r\n *\r\n * @param {String} soql - SOQL string\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Query next record set by using query locator\r\n *\r\n * @method Tooling#query\r\n * @param {String} locator - Next record set locator\r\n * @param {Callback.<QueryResult>} [callback] - Callback function\r\n * @returns {Query.<QueryResult>}\r\n */\r\n/**\r\n * Retrieve specified records\r\n *\r\n * @method Tooling#queryMore\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A record ID or array of record IDs\r\n * @param {Callback.<Record|Array.<Record>>} [callback] - Callback function\r\n * @returns {Promise.<Record|Array.<Record>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#create()\r\n *\r\n * @method Tooling#insert\r\n * @param {String} type - SObject Type\r\n * @param {Object|Array.<Object>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Create records\r\n *\r\n * @method Tooling#create\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to create\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Update records\r\n *\r\n * @method Tooling#update\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - A record or array of records to update\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback function\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Upsert records\r\n *\r\n * @method Tooling#upsert\r\n * @param {String} type - SObject Type\r\n * @param {Record|Array.<Record>} records - Record or array of records to upsert\r\n * @param {String} extIdField - External ID field name\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#delete\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Synonym of Tooling#destroy()\r\n *\r\n * @method Tooling#del\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n/**\r\n * Delete records\r\n *\r\n * @method Tooling#destroy\r\n * @param {String} type - SObject Type\r\n * @param {String|Array.<String>} ids - A ID or array of IDs to delete\r\n * @param {Callback.<RecordResult|Array.<RecordResult>>} [callback] - Callback\r\n * @returns {Promise.<RecordResult|Array.<RecordResult>>}\r\n */\r\n\r\n/**\r\n * Synonym of Tooling#describe()\r\n *\r\n * @method Tooling#describeSObject\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n/**\r\n * Describe SObject metadata\r\n *\r\n * @method Tooling#describe\r\n * @param {String} type - SObject Type\r\n * @param {Callback.<DescribeSObjectResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeSObjectResult>}\r\n */\r\n\r\n/**\r\n * Describe global SObjects\r\n *\r\n * @method Tooling#describeGlobal\r\n * @param {Callback.<DescribeGlobalResult>} [callback] - Callback function\r\n * @returns {Promise.<DescribeGlobalResult>}\r\n */\r\n\r\n/**\r\n * Get SObject instance\r\n *\r\n * @method Tooling#sobject\r\n * @param {String} type - SObject Type\r\n * @returns {SObject}\r\n */\r\n\r\n/**\r\n * @typedef {Object} Tooling~ExecuteAnonymousResult\r\n * @prop {Boolean} compiled - Flag if the query is compiled successfully\r\n * @prop {String} compileProblem - Error reason in compilation\r\n * @prop {Boolean} success - Flag if the code is executed successfully\r\n * @prop {Number} line - Line number for the error\r\n * @prop {Number} column - Column number for the error\r\n * @prop {String} exceptionMessage - Exception message\r\n * @prop {String} exceptionStackTrace - Exception stack trace\r\n */\r\n/**\r\n * Executes Apex code anonymously\r\n *\r\n * @param {String} body - Anonymous Apex code\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.executeAnonymous = function(body, callback) {\r\n  var url = this._baseUrl() + \"/executeAnonymous?anonymousBody=\" + encodeURIComponent(body);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests asynchronously\r\n *\r\n * @param {Array.<String>} classids - Comma separated list of class IDs\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsAsynchronous = function(classids, callback) {\r\n  var url = this._baseUrl() + \"/runTestsAsynchronous/\";\r\n  return this._conn.requestPost(url, {classids : classids.join(',')}, undefined, callback);\r\n};\r\n\r\n/**\r\n * Executes Apex tests synchronously\r\n *\r\n * @param {Array.<String>} classnames - Comma separated list of class Names\r\n * @param {Callback.<Tooling~ExecuteAnonymousResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~ExecuteAnonymousResult>}\r\n */\r\nTooling.prototype.runTestsSynchronous = function(classnames, callback) {\r\n  var url = this._baseUrl() + \"/runTestsSynchronous/\";\r\n  return this._conn.requestPost(url, {classnames : classnames.join(',')}, undefined, callback);\r\n};\r\n\r\n/**\r\n * @typedef {Object} Tooling~CompletionsResult\r\n * @prop {Object} publicDeclarations\r\n */\r\n/**\r\n * Retrieves available code completions of the referenced type\r\n *\r\n * @param {String} [type] - completion type (default 'apex')\r\n * @param {Callback.<Tooling~CompletionsResult>} [callback] - Callback function\r\n * @returns {Promise.<Tooling~CompletionsResult>}\r\n */\r\nTooling.prototype.completions = function(type, callback) {\r\n  if (!_.isString(type)) {\r\n    callback = type;\r\n    type = 'apex';\r\n  }\r\n  var url = this._baseUrl() + \"/completions?type=\" + encodeURIComponent(type);\r\n  return this.request(url).thenCall(callback);\r\n};\r\n\r\n\r\n/*--------------------------------------------*/\r\n/*\r\n * Register hook in connection instantiation for dynamically adding this API module features\r\n */\r\njsforce.on('connection:new', function(conn) {\r\n  conn.tooling = new Tooling(conn);\r\n});\r\n\r\n\r\nmodule.exports = Tooling;\r\n","require('./analytics');\r\nrequire('./apex');\r\nrequire('./bulk');\r\nrequire('./chatter');\r\nrequire('./metadata');\r\nrequire('./soap');\r\nrequire('./streaming');\r\nrequire('./tooling');\r\n","/*global process */\r\n/**\r\n * @file Registry for connection information, cached in local file system\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nvar _  = require('lodash/core');\r\nvar Connection = require('../connection');\r\n\r\n/*  */\r\nvar Registry = function(configFilePath) {\r\n  this._registryConfig = {};\r\n};\r\n\r\n/**\r\n * @private\r\n * @override\r\n */\r\nRegistry.prototype._saveConfig = function() {\r\n  throw new Error('_saveConfig must be implemented in subclass');\r\n};\r\n\r\nRegistry.prototype._getClients = function() {\r\n  return this._registryConfig.clients || (this._registryConfig.clients = {});\r\n};\r\n\r\nRegistry.prototype._getConnections = function() {\r\n  return this._registryConfig.connections || (this._registryConfig.connections = {});\r\n};\r\n\r\nRegistry.prototype.getConnectionNames = function() {\r\n  return Object.keys(this._getConnections());\r\n};\r\n\r\nRegistry.prototype.getConnection = function(name) {\r\n  return new Connection(this.getConnectionConfig(name));\r\n};\r\n\r\nRegistry.prototype.getConnectionConfig = function(name) {\r\n  if (!name) { name = this._registryConfig[\"default\"]; }\r\n  var connections = this._getConnections();\r\n  var connConfig = connections[name];\r\n  if (connConfig) {\r\n    connConfig = _.clone(connConfig);\r\n    if (connConfig.client) {\r\n      connConfig.oauth2 = _.clone(this.getClient(connConfig.client));\r\n    }\r\n    delete connConfig.client;\r\n  }\r\n  return connConfig;\r\n};\r\n\r\nRegistry.prototype.saveConnectionConfig = function(name, connConfig) {\r\n  var connections = this._getConnections();\r\n  connConfig = _.clone(connConfig);\r\n  if (connConfig.oauth2) {\r\n    var clientName = this._findClientName(connConfig.oauth2);\r\n    if (clientName) {\r\n      connConfig.client = clientName;\r\n    }\r\n    delete connConfig.oauth2;\r\n  }\r\n  connections[name] = connConfig;\r\n  this._saveConfig();\r\n};\r\n\r\nRegistry.prototype._findClientName = function(clientConfig) {\r\n  var clients = this._getClients();\r\n  for (var name in clients) {\r\n    var client = clients[name];\r\n    if (client.clientId === clientConfig.clientId &&\r\n        (client.loginUrl || 'https://login.salesforce.com') === clientConfig.loginUrl) {\r\n      return name;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nRegistry.prototype.setDefaultConnection = function(name) {\r\n  this._registryConfig[\"default\"] = name;\r\n  this._saveConfig();\r\n};\r\n\r\nRegistry.prototype.removeConnectionConfig = function(name) {\r\n  var connections = this._getConnections();\r\n  delete connections[name];\r\n  this._saveConfig();\r\n};\r\n\r\nRegistry.prototype.getClient = function(name) {\r\n  var clientConfig = this._getClients()[name];\r\n  return clientConfig && _.clone(clientConfig);\r\n};\r\n\r\nRegistry.prototype.getClientNames = function() {\r\n  return Object.keys(this._getClients());\r\n};\r\n\r\nRegistry.prototype.registerClient = function(name, clientConfig) {\r\n  var clients = this._getClients();\r\n  clients[name] = clientConfig;\r\n  this._saveConfig();\r\n};\r\n\r\n\r\n\r\n/* ------------------------------------------------------------------------- */\r\n\r\nmodule.exports = Registry;\r\n","var inherits = require('inherits');\r\nvar fs = require('fs');\r\nvar path = require('path');\r\nvar Registry = require('./registry');\r\n\r\n/* ------------------------------------------------------------------------- */\r\n\r\nvar FileRegistry = function(configFilePath) {\r\n  FileRegistry.super_.call(this);\r\n  this._configFilePath = configFilePath || this._getDefaultConfigFilePath();\r\n  try {\r\n    var data = fs.readFileSync(this._configFilePath, 'utf-8');\r\n    this._registryConfig = JSON.parse(data);\r\n  } catch(e) {}\r\n};\r\n\r\ninherits(FileRegistry, Registry);\r\n\r\n/**\r\n *\r\n */\r\nFileRegistry.prototype._getDefaultConfigFilePath = function() {\r\n  var homeDir = process.env[(process.platform === 'win32') ? 'USERPROFILE' : 'HOME'];\r\n  var configDir = homeDir + \"/.jsforce\";\r\n  return configDir + \"/config.json\";\r\n};\r\n\r\n/**\r\n * @private\r\n */\r\nFileRegistry.prototype._saveConfig = function() {\r\n  var data = JSON.stringify(this._registryConfig, null, 4);\r\n  try {\r\n    fs.writeFileSync(this._configFilePath, data);\r\n    fs.chmodSync(this._configFilePath, \"600\");\r\n  } catch(e) {\r\n    var configDir = path.dirname(this._configFilePath);\r\n    fs.mkdirSync(configDir);\r\n    fs.chmodSync(configDir, \"700\");\r\n    fs.writeFileSync(this._configFilePath, data);\r\n    fs.chmodSync(this._configFilePath, \"600\");\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n */\r\nmodule.exports = FileRegistry;\r\n","var jsforce = require('../core');\r\nvar FileRegistry = require('./file-registry');\r\njsforce.registry = new FileRegistry();\r\n","/**\r\n * @file JSforce API root object\r\n * @author Shinichi Tomita <shinichi.tomita@gmail.com>\r\n */\r\n\r\n'use strict';\r\n\r\nrequire('./api');\r\nrequire('./registry');\r\nmodule.exports = require('./core');\r\n"],"mappings":"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","names":["exports","module","Promise","exports","module","level","exports","module","callback","body","exports","module","exports","module","Promise","apiHost","exports","module","exports","module","literal","exports","exports","module","exports","module","exports","module","Promise","table","fpath","record","exports","module","exports","module","value","exports","module","exports","module","exports","module","Promise","err","exports","module","Promise","process","exports","module","Promise","options","typesToFetch","exports","module","v","exports","module","exports","module","exports","module","exports","module","Promise","exports","module","exports","module","Promise","err","exports","module","Promise","exports","module","Promise","require_soap","exports","module","exports","module","channel","exports","module","events","exports","module","exports","module","exports","module","require_registry"]}